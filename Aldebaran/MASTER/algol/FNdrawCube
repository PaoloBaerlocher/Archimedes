REM >MASTER.ALGOL.FNdrawCube
END
_________________________________________________________________________

DEFFNcubeObjects

Static=0:Dinamic=1:Shadow=1:NoShadow=0          :REM const
eod=65536                                       :REM EndOfData sentinel
maxPoints=22

[OPT PASS

.WireCube
FNdefine(WireCube,Dinamic,Shadow,0)

EQUD 64:EQUD 64:EQUD -64
EQUD -64:EQUD 64:EQUD -64
EQUD -64:EQUD -64:EQUD -64
EQUD 64:EQUD -64:EQUD -64

EQUD 64:EQUD 64:EQUD 64
EQUD -64:EQUD 64:EQUD 64
EQUD -64:EQUD -64:EQUD 64
EQUD 64:EQUD -64:EQUD 64
EQUD eod

FNhidden(cub,0)
.cub

FNline(25,1,2,3)
FNline(25,1,3,0)
FNline(25,1,6,7)
FNline(25,1,7,4)
FNline(25,1,2,6)
FNline(25,1,3,7)

FNline(25,1,1,0)
FNline(25,1,1,2)
FNline(25,1,5,4)
FNline(25,1,5,6)
FNline(25,1,0,4)
FNline(25,1,1,5)

EQUD eod

.WireCube2
FNdefine(WireCube2,Dinamic,Shadow,0)

EQUD 64:EQUD 128:EQUD -64
EQUD -64:EQUD 128:EQUD -64
EQUD -64:EQUD -128:EQUD -64
EQUD 64:EQUD -128:EQUD -64

EQUD 64:EQUD 128:EQUD 64
EQUD -64:EQUD 128:EQUD 64
EQUD -64:EQUD -128:EQUD 64
EQUD 64:EQUD -128:EQUD 64
EQUD eod

FNhidden(cub2,0)
.cub2

;FNline(08,1,2,3)
FNline(08,1,3,0)
;FNline(08,1,6,7)
FNline(08,1,7,4)
;FNline(08,1,2,6)
;FNline(08,1,3,7)

FNline(08,1,1,0)
FNline(08,1,1,2)
FNline(08,1,5,4)
FNline(08,1,5,6)
FNline(08,1,0,4)
FNline(08,1,1,5)

EQUD eod

.Pyr4
FNdefine(Pyr4,Dinamic,Shadow,0)

EQUD 0:EQUD 0:EQUD -64

EQUD 64:EQUD 64:EQUD 64
EQUD -64:EQUD 64:EQUD 64
EQUD -64:EQUD -64:EQUD 64
EQUD 64:EQUD -64:EQUD 64
EQUD eod

FNhidden(pyr4,0)
.pyr4

FNline(40,1,0,1)
FNline(40,1,2,0)
FNline(40,1,3,0)
FNline(40,1,0,4)

FNline(40,1,2,1)
FNline(40,1,2,3)
FNline(40,1,3,4)
FNline(40,1,4,1)

EQUD eod

.Russian
FNdefine(Russian,Dinamic,Shadow,0)

EQUD +64:EQUD 00:EQUD 64
EQUD +64:EQUD 00:EQUD -64
EQUD -64:EQUD 00:EQUD -64
EQUD -64:EQUD 00:EQUD 64

EQUD +16:EQUD 00:EQUD 0
EQUD +00:EQUD 00:EQUD -16
EQUD -16:EQUD 00:EQUD 0
EQUD +00:EQUD 00:EQUD 16

EQUD eod

FNhidden(rus,0)
.rus

FNline(02,1,4,0):FNline(39,1,4,1)
FNline(39,1,3,6):FNline(02,1,6,2)

FNline(02,1,3,7):FNline(39,1,7,0)
FNline(39,1,2,5):FNline(02,1,5,1)

EQUD eod

.Target
FNdefine(Target,Dinamic,Shadow,0)

EQUD -32:EQUD 00:EQUD -64
EQUD -32:EQUD 00:EQUD -32
EQUD -32:EQUD 00:EQUD +32
EQUD -32:EQUD 00:EQUD +64

EQUD 32:EQUD 00:EQUD -64
EQUD 32:EQUD 00:EQUD -32
EQUD 32:EQUD 00:EQUD +32
EQUD 32:EQUD 00:EQUD +64

EQUD -64:EQUD 00:EQUD -32
EQUD +64:EQUD 00:EQUD -32

EQUD -64:EQUD 00:EQUD +32
EQUD 64:EQUD 00:EQUD +32

EQUD eod

FNhidden(tar,0)
.tar

FNline(36,1,1,5)
FNline(36,1,2,6)
FNline(36,1,1,2)
FNline(36,1,5,6)

FNline(15,1,0,4)
FNline(15,1,3,7)
FNline(15,1,8,10)
FNline(15,1,9,11)

EQUD eod

.Net
FNdefine(Net,Dinamic,Shadow,0)

EQUD -64:EQUD 00:EQUD -64
EQUD -64:EQUD 00:EQUD -21
EQUD -64:EQUD 00:EQUD 21
EQUD -64:EQUD 00:EQUD 64

EQUD 64:EQUD 00:EQUD -64
EQUD 64:EQUD 00:EQUD -21
EQUD 64:EQUD 00:EQUD 21
EQUD 64:EQUD 00:EQUD 64

EQUD -21:EQUD 00:EQUD -64
EQUD +21:EQUD 00:EQUD -64

EQUD -21:EQUD 00:EQUD 64
EQUD  21:EQUD 00:EQUD 64

EQUD eod

FNhidden(net,0)
.net

FNline(09,1,1,5)
FNline(09,1,2,6)
FNline(09,1,8,10)
FNline(09,1,9,11)

FNline(42,1,0,4)
FNline(42,1,3,7)
FNline(42,1,0,3)
FNline(42,1,4,7)
EQUD eod

.Flashion
FNdefine(Flashion,Dinamic,Shadow,0)

 EQUD -64:EQUD -64:EQUD -64
 EQUD 64:EQUD -64:EQUD -64

 EQUD 64:EQUD 64:EQUD 64
 EQUD -64:EQUD 64:EQUD 64
 EQUD -64:EQUD -64:EQUD 64
 EQUD 64:EQUD -64:EQUD 64
]
 FOR FLASH%=0TO 12
  [OPT PASS : EQUD -64+FLASH%*128/12:EQUD 0:EQUD (RND(84)-RND(84))*SIN(FLASH%*PI/12) :]
 NEXT
[OPT PASS
EQUD eod
FNhidden(fla,0)
.fla
 FNline(25,1, 1,5)
 FNline(25,1, 5,2)
 FNline(25,1, 2,1)

 FNline(25,1, 3,4)
 FNline(25,1, 4,0)
 FNline(25,1, 0,3)

 FNline(35,1, 6, 7)
 FNline(35,1, 7, 8)
 FNline(35,1, 8, 9)
 FNline(35,1, 9,10)
 FNline(35,1,10,11)
 FNline(35,1,11,12)
 FNline(35,1,12,13)
 FNline(35,1,13,14)
 FNline(35,1,14,15)
 FNline(35,1,15,16)
 FNline(35,1,16,17)
 FNline(35,1,17,18)
EQUD eod

; ; ;

.readCol
FNadr (12,MegaShades)
ADD R12,R12,R13,LSL#2
LDR R12,[R12,R9,LSL#5]   ; color x 96 bytes
MOV PC,R14

;;;;;;;;;;;;;;;;;;;;;;;;

   ;;;;;;; version "wireframe" de la routine d'affichage,
    ;;;;;;;; optimisee pour la phase "Algol".

.drawCube              ; IN  R0=Obj pointer,(R1,R2)=(posX,posY)
FNin                   ;     R3=posZ for dinamic
                       ;     R4=[0/-1]=highlight OFF/ON
ADD R0,R0,#8

;;;;; no rotations
 ;;;;;;;;;;;;;;;;;;;

FNadr(7,buf2Dobj)

CMN R4,#1:STREQ R4,strip3Dcube:BEQ algol_dinamicObjLoop ; highlight cube!

MOVS R9,R2,ASR#4:MOVMI R9,#0
CMPGT R9,#23:MOVGT R9,#23
STR R9,strip3Dcube ;useful for the colour

.algol_dinamicObjLoop
LDMIA R0!,{R12,R13,R14}
CMP R12,#eod:SUBEQ R0,R0,#4:BEQ algol_drawDinNow

ADD R12,R1,R12,ASR#2    ; in atom coords
ADD R13,R2,R13,ASR#2
ADD R14,R3,R14,ASL#2

CMP R13,#640:FNexitCS              ; out of perspective bounds
FNadr(6,threeD_algol):LDR R6,[R6,R13,LSL#2]   ;read perspective

MUL R13,R6,R14:MOV R13,R13,ASR#12:ADD R13,R13,#72   ; Y projection
MUL R12,R6,R12:MOV R12,R12,ASR#08:ADD R12,R12,#160  ; X projection

STMIA R7!,{R12,R13,R14}     ; R14 is "NIL"
B algol_dinamicObjLoop

.algol_drawDinNow
LDR R9,[R0]
CMP R9,#eod:FNexitEQ
TST R9,#1<<30:ADDEQ R0,R0,#8*4:ADDNE R0,R0,#3*4 ; move to end of surf def

              BEQ algol_drawDinNow  ; if solid surface then NOP

  ;;;;;;;;;;;;;
 ; draw a line ;
  ;;;;;;;;;;;;;

LDR R13,strip3Dcube  ; if !strip3Dcube<0 then highlight cube
CMN R13,#1
 MVNEQ R12,#0
 BLNE readCol  ;en fonction de R9(real color) et de R13=!strip3Dcube

 LDMDB R0,{R1,R2}
 LDMIA R2,{R3,R4}:LDMIA R1,{R1,R2}   ;load coords

 BL PutLine   ; draw line  ;R0 unaltered
B algol_drawDinNow

FNout

FNbin

.strip3Dcube EQUD 0

]

=0

REM *********** END OF MAIN ROUTINE *********************************

DEFFNq(A,B,C,D,E) =FNquad(A,1,1,B,C,D,E)  :REM quadra with BackFace,Shadow
