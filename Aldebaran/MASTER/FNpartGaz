REM >MASTER.FNpartGaz

***********************************************************************
Structure d'une particule (28 bytes)

EQUD IDcde
EQUD 0:EQUD 0:EQUD 0       ; x,y,z           ! in atom units shifted <<20
EQUD 0:EQUD 0:EQUD 0       ; vx,vy,vz        !       ~

IDcde= &&ddccbbaa          ; &aa=counter ; &bb=sprite figure
                           ; &ddcc=eventually more datas
STRUCTURE GENERALE

.Tables des projections (repartie par bandes)

 EQUD nbOfParticles/strip

 x loop

  EQUD stripCde
  ...   ; space for 31 reduced particles = 12*32 bytes

 end loop

.Table des particules

 x Particule                          = 32*28 bytes

; Now About sprite kind  &bb
;;;;;;;;;;;;;;;;;;;;;;;;

&FF       : explosion sprite
&FE       : dust sprite
&FD       : water sprite
&FC       : bullet particle
&FB       : gaz particle
&FA       : flash sprite

...
&00 - ... : boom particle ( color &xx)
__________________________________________________________________________

DEFFNparticles
[OPT PASS

.dustData      FNload("MASTER.GAZ3")
.flashingData  FNload("MASTER.CRYSTAL")

.PutParticles        ; input R0=what strip=[0..12]
FNin

 STR R0,IDcde

 ADD R2,R0,R0,LSL#1
 FNadr(1,PartStrips):ADD R1,R1,R2,LSL#8  ; x3x4x64
 LDR R12,[R1],#4    ;load header
.nextPart
 SUBS R12,R12,#1:FNexitMI
 LDMIA R1!,{R2,R3,R4}

 AND R5,R2,#&FF00    ;extract sprite kind

 CMP R5,#&FE<<8 : BEQ dustSpr  : BPL explSpr
 CMP R5,#&FC<<8 : BEQ bullPart : BPL wateSpr
 CMP R5,#&FA<<8 : BEQ flashSpr : BPL gazPart

;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; BOOM PARTICLE ;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;
.boomPart

CMP R0,#6:MOVMI R7,#8   ; sprite sizes
          MOVEQ R7,#16
          MOVGT R7,#32

SUB R3,R3,R7,LSR#1      ; centre
SUB R4,R4,R7,LSR#1

 RSB R7,R7,#320
 CMP R3,R7:CMPCC R4,#176:BCS nextPart  ;test range for particules

 ADD R3,R3,R4,LSL#8
 ADD R3,R3,R4,LSL#6
 FNldr (4,BASESCR)
 ADD R3,R3,R4

 FNadr (4,MegaShades+44)
 ADD R4,R4,R5,LSR#3
 LDR R7,[R4,R0,LSL#2]  ; load color

LDR R6,rndPart
CMP R0,#6:BEQ midBPixels:BPL bigBPixels

AND R2,R2,#&FF
.putB

 ADD R6,R6,R6,ROR#3
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29] ;plot boom pixel

 ADD R6,R6,R6,ROR#13
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29] ;plot boom pixel

SUBS R2,R2,#1:BGT putB
STR R6,rndPart
B nextPart

.midBPixels
AND R2,R2,#&FF
.putB2

 ADD R6,R6,R6,ROR#3
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28]! ;plot boom pixel
 STRB R7,[R8,#1]

 ADD R6,R6,R6,ROR#13
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28]! ;plot boom pixel
 STRB R7,[R8,#1]

SUBS R2,R2,#1:BGT putB2
STR R6,rndPart
B nextPart

.bigBPixels
AND R2,R2,#&FF:MOV R2,R2,LSL#1
.putB3

 ADD R6,R6,R6,ROR#3
 AND R8,R6,#31
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#27]! ;plot boom pixel
 STRB R7,[R8,#1]
 STRB R7,[R8,#320]
 STRB R7,[R8,#321]

SUBS R2,R2,#1:BGT putB3
STR R6,rndPart
B nextPart

.rndPart EQUD -TIME

.bullPart
 CMP R3,#316:BGT nextPart  ;test range for particules
  CMP R3,#2:BMI nextPart
 CMP R4,#205:BGT nextPart
  CMP R4,#2:BMI nextPart

 ADD R3,R3,R4,LSL#8
 ADD R3,R3,R4,LSL#6
 FNldr (4,BASESCR)
 ADD R3,R3,R4

 ;select colors
 TST R2,#&10000   ; test colors code
                 MOVEQ R6,#119:MOVEQ R7,#23
                 MOVNE R6,#203:MOVNE R7,#201

 ADD R5,R0,#2:MOV R5,R5,LSR#2
 BL patternFlash

B nextPart

.patternFlash  ; input R5=kind=[0..3]
 CMP R5,#4
 ADDCC PC,PC,R5,LSL#2
 MOV PC,R14

 B flash_1
 B flash_2
 B flash_3
.flash_4
 STRB R7,[R3,#-319]
 STRB R7,[R3,#-321]
 STRB R7,[R3,#-318]
 STRB R7,[R3,#-322]
 STRB R7,[R3,#-002]
 STRB R7,[R3,#+002]
 STRB R7,[R3,#+319]
 STRB R7,[R3,#+321]
 STRB R7,[R3,#+318]
 STRB R7,[R3,#+322]

 STRB R7,[R3,#-640]
 STRB R7,[R3,#-641]
 STRB R7,[R3,#-639]

 STRB R7,[R3,#+640]
 STRB R7,[R3,#+641]
 STRB R7,[R3,#+639]

 STRB R6,[R3]:STRB R6,[R3,#1]:STRB R6,[R3,#-1]:STRB R6,[R3,#320]:STRB R6,[R3,#-320]
 MOV PC,R14
.flash_3
 STRB R7,[R3,#-320]
 STRB R7,[R3,#-319]
 STRB R7,[R3,#-001]
 STRB R7,[R3,#+002]
 STRB R7,[R3,#+319]
 STRB R7,[R3,#+322]
 STRB R7,[R3,#+640]
 STRB R7,[R3,#+641]

 STRB R6,[R3]:STRB R6,[R3,#1]:STRB R6,[R3,#320]:STRB R6,[R3,#321]
 MOV PC,R14
.flash_2

 STRB R7,[R3,#-320]
 STRB R7,[R3,#+320]
 STRB R7,[R3,#-001]
 STRB R7,[R3,#+001]
.flash_1
 STRB R6,[R3]
 MOV PC,R14

.explSpr                      ; R2 should be in [7..0]
 STR R1,espr1:STR R12,espr2
 ADD R0,R0,#2:MOV R0,R0,ASR#2
 AND R2,R2,#7:RSB R2,R2,#7:ADD R2,R2,R0,LSL#3:MOV R0,R3:MOV R1,R4
 BL PutExploSprite
 LDR R0,IDcde:LDR R1,espr1:LDR R12,espr2
B nextPart

.dustSpr
STR R1,espr1:STR R12,espr2

AND R2,R2,#7:RSB R2,R2,#7
FNadr(12,dustData)
ADD R12,R12,R2,LSL#4 ;x400
ADD R12,R12,R2,LSL#7
ADD R12,R12,R2,LSL#8
MOV R2,#5:MOV R0,R3:MOV R1,R4:BL PutSprite
LDR R0,IDcde:LDR R1,espr1:LDR R12,espr2
B nextPart

.wateSpr
SUB R3,R3,#8  ;centre
SUB R4,R4,#8
 CMP R3,#300:CMPCC R4,#192:BCS nextPart  ;test range for particules

 ADD R3,R3,R4,LSL#8
 ADD R3,R3,R4,LSL#6
 FNldr (4,BASESCR)
 ADD R3,R3,R4

FNadr(5,MegaShades+96*26+8):ADD R5,R5,R0,LSL#3
LDR R6,rndPart

CMP R0,#6:BEQ midPixels:BPL bigPixels

AND R2,R2,#&FF
.putWater

 LDR R7,[R5],#96
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28] ;plot water pixel
 ADD R6,R6,R6,ROR#11
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28] ;plot water pixel

SUBS R2,R2,#1:BGT putWater
STR R6,rndPart
B nextPart

.midPixels
AND R2,R2,#&FF
.putWater2

 LDR R7,[R5],#96
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28]! ;plot water pixel
 STRB R7,[R8,#1]
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28]! ;plot water pixel

SUBS R2,R2,#1:BGT putWater2
STR R6,rndPart
B nextPart

.bigPixels
AND R2,R2,#&FF
.putWater3

 LDR R7,[R5],#96
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28]! ;plot water pixel
 STRB R7,[R8,#1]
 STRB R7,[R8,#320]
 STRB R7,[R8,#321]
 ADD R6,R6,R6,ROR#9
 AND R8,R6,#15
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#28]! ;plot water pixel
 STRB R7,[R8,#1]
 STRB R7,[R8,#320]
 STRB R7,[R8,#321]
SUBS R2,R2,#1:BGT putWater3
STR R6,rndPart
B nextPart

.gazPart

 SUB R3,R3,#4
 SUB R4,R4,#4

 CMP R3,#308:CMPCC R4,#200:BCS nextPart  ;test range for particules

 ADD R3,R3,R4,LSL#8
 ADD R3,R3,R4,LSL#6
 FNldr (4,BASESCR)
 ADD R3,R3,R4

 TST R2,#&10000   ; select the right gaz colors
 ADREQ R9,gazTable_1:ADRNE R9,gazTable_2

 MOV R2,R2,LSR#1:AND R2,R2,#15

FNadr(5,MegaShades+96*0+48):ADD R5,R5,R0,LSL#2
LDR R6,rndPart

CMP R0,#6:BEQ midGPixels:BPL bigGPixels

AND R2,R2,#&FF
.putJet

 LDRB R7,[R9],#1
 LDR R7,[R5,R7,LSL#5]
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29] ;plot water pixel
 EOR R6,R8,R6,ROR#7
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29] ;plot water pixel

SUBS R2,R2,#1:BGT putJet
STR R6,rndPart
B nextPart

.midGPixels
AND R2,R2,#&FF
.putJet2

 LDRB R7,[R9],#1
 LDR R7,[R5,R7,LSL#5]
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29]! ;plot water pixel
 STRB R7,[R8,#1]
 EOR R6,R8,R6,ROR#7
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29]! ;plot water pixel
 STRB R7,[R8,#320]

SUBS R2,R2,#1:BGT putJet2
STR R6,rndPart
B nextPart

.bigGPixels
AND R2,R2,#&FF
.putJet3

 LDRB R7,[R9],#1
 LDR R7,[R5,R7,LSL#5]
 ADD R6,R6,R6,ROR#3
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29]! ;plot water pixel
 STRB R7,[R8,#1]
 STRB R7,[R8,#320]
 STRB R7,[R8,#321]
 EOR R6,R8,R6,ROR#5
 AND R8,R6,#7
 ADD R8,R8,R8,LSL#2
 ADD R8,R3,R8,LSL#6
 STRB R7,[R8,R6,LSR#29]! ;plot water pixel
 STRB R7,[R8,#1]
 STRB R7,[R8,#320]
 STRB R7,[R8,#321]
SUBS R2,R2,#1:BGT putJet3
STR R6,rndPart
B nextPart

.gazTable_1
 EQUB 3*42
 EQUB 3*41
 EQUB 3*41
 EQUB 3*40
 EQUB 3*47
 EQUB 3*47
 EQUB 3*47
 EQUB 3*47
ALIGN

.gazTable_2
 EQUB 3*9
 EQUB 3*9
 EQUB 3*8
 EQUB 3*8
 EQUB 3*7
 EQUB 3*7
 EQUB 3*2
 EQUB 3*2
ALIGN

.flashSpr
STR R1,espr1:STR R12,espr2

AND R2,R2,#7:RSB R2,R2,#7:MOV R2,R2,LSR#1
FNadr(12,flashingData)
ADD R12,R12,R2,LSL#4 ;x400
ADD R12,R12,R2,LSL#7
ADD R12,R12,R2,LSL#8
MOV R2,#5:MOV R0,R3:MOV R1,R4:BL PutSprite
ADR R0,IDcde:LDMIA R0,{R0, R1,R12}
B nextPart

FNout

.IDcde EQUD 0
.espr1 EQUD 0
.espr2 EQUD 0

.ClearPartStrips     ; routines d'initialisation (before every frame)
 FNadr(0,PartStrips)
 MOV R2,#0
 MOV R1,#13
.lClearStrips
 STR R2,[R0],#64*12:SUBS R1,R1,#1:BNE lClearStrips
MOV PC,R14

.CalcPartStrips
 FNin

 BL ClearPartStrips

 FNadr(0,PartStrips)
 FNadr(1,PartTable)  ; pointeur pour lire
 MOV R14,R1          ; pointeur pour ecrire

 FNldr(11,RealPos)
 MOV R10,R11,LSR#16:SUB R11,R11,R10,LSL#16
 ADD R10,R10,#13.5*32

 LDR R12,pointerParticle  ; the last one

.loopStrips
 CMP R12,R1:BEQ exitCycle
 LDR R3,[R1],#28            ;load particle Id
 TST R3,#&FF:BEQ loopStrips ;dead particle
 LDMDB R1,{R4,R5,R6, R7,R8,R9}

 AND R13,R3,#&FF00

  CMP R13,#&FD00:BEQ itsWater
  CMP R6,#(128*1.5)<<20:BLE fountain ;teste si le debris rentre dans l'eau
  B noWaterPart
.itsWater
 CMP R6,#(128*1.5)<<20:MOVLE R6,#(128*1.5)<<20 ;water particle under water

.noWaterPart
 ADD R4,R4,R7:ADD R5,R5,R8:ADD R6,R6,R9   ; new vposition

 CMP R13,#&FC00       ; bullets and gaz dont support gravity
 CMPNE R13,#&FB00
 SUBNE R9,R9,#1<<19   ; gravity effect(for some particles only)
.returnFromFlash

 FNadr(13,myScape)    ; test earth collision
 ADD R13,R13,R4,LSR#25
 MOV R2,R5,LSR#25
 LDRB R2,[R13,R2,LSL#7]          ;read z
 ADD R2,R2,R2,ASR#1              ;x1.5
 CMP R2,R6,LSR#20:BMI noEarthReached
   AND R6,R3,#&FF00
   CMP R6,#&FC00:BEQ angeldust   ;if bullet reach earth then angeldust
            RSB R9,R9,R9,ASR#3   ;invert speed if earth reached...
            MOV R6,R2,LSL#20     ; ...and set zParticle to z
.noEarthReached
 SUB R3,R3,#1  ;decr counter
 STMIA R14!,{R3, R4,R5,R6, R7,R8,R9} ; ecrit la nouvelle particule

 RSBS R7,R11,R5,LSR#20      ;relative Y position

 CMNMI R7,#32*(128-26):ADDMI R7,R7,#128*32 ; problemes bord du land
 CMPPL R7,#32*(128-26):SUBPL R7,R7,#128*32

 CMP R7,#392:BCS loopStrips ; out of perspective bounds!

 RSBS R8,R10,R4,LSR#20  ;relative X position

 CMNMI R8,#32*(128-26):ADDMI R8,R8,#128*32 ; problemes bord du land
 CMPPL R8,#32*(128-26):SUBPL R8,R8,#128*32

 CMN R8,#32*12:BMI loopStrips
 CMP R8,#32*12:BPL loopStrips  ; out!

 FNldr(13,Elevation)
 ADD R6,R13,R6,LSR#20 ; the real high (add !Elevation=R14)

 FNadr(13,table3D)
 LDR R13,[R13,R7,LSL#2]  ; load perspective factor

 MUL R8,R13,R8:MOV R8,R8,ASR#14:ADD R8,R8,#160     ;xscr
 MUL R9,R13,R6:MOV R9,R9,ASR#14:RSB R9,R9,#10      ;yscr

 MOV R7,R7,LSR#5  ; Yposrel in square units
 ADD R7,R7,R7,LSL#1  ;x3
 MOV R7,R7,LSL#8     ;x4x64

 LDR R2,[R7,R0]!     ;load header
 ADD R13,R2,R2,LSL#1 ;x3
 ADD R13,R7,R13,LSL#2 ;x4=x12
 STMIB R13,{R3,R8,R9} ;save particle screen data
 CMP R2,#62:ADDMI R2,R2,#1    ;set up new header value
 STRMI R2,[R7]                ;store new header

 B loopStrips

.exitCycle
 STR R14,pointerParticle ; save new address of the last particle

FNout

FNbin

.ClearPartTable
 FNadr(0,PartTable)
 STR R0,pointerParticle
MOV PC,R14

.InsertParticle         ; INPUT R0;R1,R2,R3;R4,R5,R6  (id,x,y,z,vx,vy,vz)
 LDR R11,pointerParticle   ; speed shifted by LSL#20
 FNadr(12,eofTable)
 CMP R11,R12
 RSBMI R1,R4,R1,LSL#20  ; substract 1 frame now -> right start position
 RSBMI R2,R5,R2,LSL#20
 RSBMI R3,R6,R3,LSL#20
 STMMIIA R11!,{R0-R6} ;save particle
 STRMI R11,pointerParticle
MOV PC,R14

.pointerParticle EQUD PartTable

.fountain

 MVN R13,R9,ASR#2 ; la vitesse z depend de la vitesse de debris * (-1)

 MOV R9,#(128*1.5)<<20 ; fountains high (niveau de l'eau)

 FNadr(7,eofTable)

 MOV R8,#6  ; particules d'eau
.lFount

  CMP R12,R7:BPL stopFount

  LDR R11,rndFount:ADD R11,R11,R11,ROR#1:STR R11,rndFount
  AND R10,R11,#255:SUB R10,R10,#128:MOV R10,R10,LSL#16
  MOV R11,R11,LSR#24:SUB R11,R11,#128:MOV R11,R11,LSL#16

  MOV R3,#&FD00:ADD R3,R3,R8,LSR#1:ADD R3,R3,#5 ; phase
  STMIA R12!,{R3,R4,R5,R9,R10,R11,R13}      ;store ID,x,y,z

SUBS R8,R8,#1:BNE lFount

.stopFount
 FNldr(11,RealPos)            ; recalc R10,R11 because I used them
 MOV R10,R11,LSR#16:BIC R11,R11,#&FF000000:BIC R11,R11,#&00FF0000
 ADD R10,R10,#13.5*32
 B loopStrips

.angeldust

 MVN R13,R9,ASR#1 ; la vitesse z depend de la vitesse de debris * (-1)
 ADD R9,R2,#8:MOV R9,R9,LSL#20

 FNadr(7,eofTable)

 MOV R8,#4
.lDust

  CMP R12,R7:BPL stopFount

  LDR R11,rndFount:ADD R11,R11,R11,ROR#1:STR R11,rndFount
  AND R10,R11,#128:SUB R10,R10,#64:MOV R10,R10,LSL#17
  MOV R11,R11,LSR#25:SUB R11,R11,#64:MOV R11,R11,LSL#17

  MOV R3,#&FE00:ADD R3,R3,R8,LSR#1:ADD R3,R3,#6    ; phase
  STMIA R12!,{R3,R4,R5,R9,R10,R11,R13}             ; store ID,x,y,z

SUBS R8,R8,#1:BNE lDust
B stopFount

.rndFount EQUD -TIME

]
=0
