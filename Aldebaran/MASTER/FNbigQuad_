REM >MASTER.FNbigQuad_
         :REM this version works with 208 lines instead of 256

LIBRARY "MASTER.FNadr"
LIBRARY "MASTER.FNinout"

REM **************************
REM * the real one!
REM * Final version : 09 . 03 . 1992
REM * by P Baerlocher

MODE 15:MODE 13:OFF

DIM cde 30000
FOR PASS=4 TO 6 STEP 2
P%=cde
O%=cde
PROCinitinout
main_assembly%=FALSE
[OPT PASS

.go
STR R13,mymy
STR R14,mwmw
;MOV R1,#160
;MOV R2,#128

;MOV R3,#160
;MOV R4,#128

;MOV R5,#160
;MOV R6,#128

MOV R7,#160
MOV R8,#128

LDR R12,cols
AND R12,R12,#255
ORR R12,R12,R12,LSL#8
ORR R12,R12,R12,LSL#16
BL PutBigQuadra
LDR R13,mymy
LDR R15,mwmw

.cols EQUD 0
.mymy EQUD 0
.mwmw EQUD 0

.BASESCR EQUD &1FD8000

FNBigQuadraRoutine

FNuni_div_table

]
PROCendinout
NEXT

REPEAT
B%=160+370*SIN(TIME/200):C%=128+399*COS(TIME/150)
D%=160+370*SIN(TIME/130):E%=128+399*COS(TIME/250)
F%=160+370*SIN(TIME/030):G%=128+399*COS(TIME/053)

!cols=(!cols)+1
CALL go


UNTIL FALSE

END

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DEFFNBigQuadraRoutine
[OPT PASS

.PutBigQuadra
FNin

FNadr(13,Div512)

CMP R2,R4:BMI noSwp1b
CMPEQ R1,R3:BLE noSwp1b
                      MOV R9,R2:MOV R2,R4:MOV R4,R9
                      MOV R9,R1:MOV R1,R3:MOV R3,R9
.noSwp1b
CMP R2,R6:BMI noSwp2b
CMPEQ R1,R5:BLE noSwp2b
                      MOV R9,R2:MOV R2,R6:MOV R6,R9
                      MOV R9,R1:MOV R1,R5:MOV R5,R9
.noSwp2b
CMP R2,R8:BMI noSwp3b
CMPEQ R1,R7:BLE noSwp3b
                      MOV R9,R2:MOV R2,R8:MOV R8,R9
                      MOV R9,R1:MOV R1,R7:MOV R7,R9
.noSwp3b
CMP R6,R4:BPL noSwp4b:MOV R9,R4:MOV R4,R6:MOV R6,R9
                      MOV R9,R3:MOV R3,R5:MOV R5,R9
.noSwp4b
CMP R8,R4:BPL noSwp5b:MOV R9,R4:MOV R4,R8:MOV R8,R9
                      MOV R9,R3:MOV R3,R7:MOV R7,R9
.noSwp5b
CMP R8,R6:BPL noSwp6b:MOV R9,R6:MOV R6,R8:MOV R8,R9
                      MOV R9,R5:MOV R5,R7:MOV R7,R9
.noSwp6b

TST R2,#1:MOVEQ R12,R12,ROR#8  ; r12=color word

;;;;;;Test border ;;;;;;;;;;;;;;;;

CMP R2,#208:CMPCC R8,#208
CMPCC R1,#320:CMPCC R3,#320:CMPCC R5,#320:CMPCC R7,#320
EORCS R12,R12,#1<<17

STR R12,memoria

SUB R11,R3,R1       ; dx AB :STR R11,deltaStartb
SUB R9,R4,R2
LDR R9,[R13,R9,LSL#2]
MUL R9,R11,R9

CMP R2,R4:CMPEQ R2,R6:BNE nonob
SUB R10,R5,R1:CMP R10,R11:STRGT R10,deltaStartb
.nonob

SUB R14,R5,R1          ; d AC
SUB R10,R6,R2
LDR R10,[R13,R10,LSL#2]
MUL R10,R14,R10

SUB R14,R7,R1         ; d AD
SUB R11,R8,R2
LDR R11,[R13,R11,LSL#2]
MUL R11,R14,R11


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ADD R1,R1,R2,LSL#6:ADD R1,R1,R2,LSL#8

CMP R9,R10
BMI Bsel1

CMP R9,R11:BMI Bsel1b
           MOV R12,R9
           SUB R9,R4,R2
           SUB R0,R6,R4:STR R0,[R13,#-4]

          SUB R14,R7,R3       ; d BD
          SUB R0,R8,R4
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0

          SUB R14,R5,R3       ; d BC
          SUB R3,R6,R4
          LDR R3,[R13,R3,LSL#2]
          MUL R3,R14,R3


          CMP R0,R3

           BMI Bsel1f

   ; middle BD

           STR R0,[R13,#-8]   ; pente R12

           STR R0,[R13,#-8-12] ; pente R12 last

          SUB R14,R7,R5        ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


           STR R0,[R13,#-12-12] ; pente R11 last

         CMP R10,R11:MOVMI R11,R10
          STR R11,[R13,#-12]
          BMI BstartDraw

           SUB R0,R8,R4:STR R0,[R13,#-4]
           MOV R0,#0:STR R0,[R13,#-12-4]
          B BstartDraw2

       .Bsel1f
           STR R3,[R13,#-8]   ; pente R12

          SUB R14,R7,R5       ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


           STR R0,[R13,#-8-12] ; pente R12 last

         CMP R10,R11:MOVMI R11,R10
            STR R11,[R13,#-12]
            STR R11,[R13,#-12-12] ; R11 last

           B BstartDraw

.Bsel1b
           MOV R12,R11
           SUB R9,R6,R2
           MOV R0,#0:STR R0,[R13,#-4]

           MOV R11,R10

          SUB R14,R7,R5       ; dx CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


           STR R0,[R13,#-12-12]
           STR R12,[R13,#-8-12]

B BstartDraw

.Bsel1

CMP R10,R11:BMI Bminus:MOV R12,R10

.Bplus
CMP R9,R11:BMI Bsel1d

           SUB R9,R6,R2
           MOV R0,#0:STR R0,[R13,#-4]

          SUB R14,R7,R5       ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


           STR R0,[R13,#-8-12] ; pente R12 last
           STR R11,[R13,#-12-12]

           B BstartDraw
.Bsel1d
           MOV R11,R9
           SUB R9,R4,R2

           SUB R0,R6,R4:STR R0,[R13,#-4]

          SUB R14,R7,R3       ; d BD
          SUB R0,R8,R4
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


          SUB R14,R5,R3       ; d BC
          SUB R3,R6,R4
          LDR R3,[R13,R3,LSL#2]
          MUL R3,R14,R3


          CMP R0,R3

           BMI Bsel1g

          STR R3,[R13,#-12]   ; pente R11

          SUB R14,R7,R5       ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


          STR R0,[R13,#-12-12]   ; pente R11 last
          STR R12,[R13,#-8-12]   ; pente R12 last

          B Bsel1e
       .Bsel1g
          STR R0,[R13,#-12]         ; pente R11

          STR R0,[R13,#-12-12]      ; pente R11 last

          SUB R14,R7,R5       ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


          STR R0,[R13,#-8-12]       ; pente R12 last

.Bsel1e
           STR R12,[R13,#-8]
           B BstartDraw

.Bminus
MOV R12,R11
CMP R9,R11:BMI Bsel1d2

           SUB R9,R6,R2
           MOV R0,#0:STR R0,[R13,#-4]

          SUB R14,R7,R5       ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


           STR R0,[R13,#-8-12] ; pente R12 last
           STR R11,[R13,#-12-12]

           B BstartDraw
.Bsel1d2
           MOV R11,R9
           SUB R9,R4,R2

          SUB R14,R7,R3       ; d BD
          SUB R0,R8,R4
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


          SUB R14,R5,R3       ; d BC
          SUB R3,R6,R4
          LDR R3,[R13,R3,LSL#2]
          MUL R3,R14,R3


          CMP R0,R3

           BMI Bsel1g2

          STR R3,[R13,#-12]   ; pente R11

           SUB R0,R6,R4:STR R0,[R13,#-4]     ;;;

          SUB R14,R7,R5       ; d CD
          SUB R0,R8,R6
          LDR R0,[R13,R0,LSL#2]
          MUL R0,R14,R0


          STR R0,[R13,#-12-12]   ; pente R11 last
          STR R12,[R13,#-8-12]   ; pente R12 last

          B Bsel1e2
       .Bsel1g2
          STR R0,[R13,#-12]         ; pente R11

          STR R12,[R13,#-8]         ; pente R12

          SUB R0,R8,R4:STR R0,[R13,#-4]
          MOV R0,#0:STR R0,[R13,#-4-12]
          B BstartDraw2

.Bsel1e2
           STR R12,[R13,#-8]

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.BstartDraw
           SUB R0,R8,R6:STR R0,[R13,#-4-12]
.BstartDraw2

LDR R14,memoria
CMP R14,R14,ROR#16:BNE Bclipped

MOV R8,R14,ROR#8
LDR R3,BASESCR:ADD R10,R3,R1

.Bnoclipped

MOV R1,#&8000
MOV R2,#&8000

CMP R9,#0:BNE BnoNext
LDR R5,deltaStartb
CMP R5,#0
MOVGT R2,R5,LSL#16
MOVMI R1,R5,LSL#16
B BnextOne

.BnoNext

SUB R5,PC,#4
SUBS R9,R9,#1:BPL fillb

;;;;;;;;;;;;;;;;;;;;;;;
.BnextOne
LDR R9,[R13,#-4]!
CMP R9,#0:BEQ BnextTwo

LDMDB R13,{R5,R7}
CMP R7,R12:MOVNE R12,R7:MOVNE R2,R2,ASR#16:MOVNE R2,R2,ASL#16:ORRNE R2,R2,#&8000
CMP R5,R11:MOVNE R11,R5:MOVNE R1,R1,ASR#16:MOVNE R1,R1,ASL#16:ORRNE R1,R1,#&8000

SUB R5,PC,#4
SUBS R9,R9,#1:BPL fillb

;;;;;;;;;;;;;;;;;;;;;;;
.BnextTwo
LDR R9,[R13,#-12]!
CMP R9,#0:FNexitEQ

LDMDB R13,{R5,R7}
CMP R7,R12:MOVNE R12,R7:MOVNE R2,R2,ASR#16:MOVNE R2,R2,ASL#16:ORRNE R2,R2,#&8000
CMP R5,R11:MOVNE R11,R5:MOVNE R1,R1,ASR#16:MOVNE R1,R1,ASL#16:ORRNE R1,R1,#&8000

SUB R5,PC,#4
SUBS R9,R9,#1:BPL fillb

FNexit

;;;;;;;;;;;; Clipped polygon  ;;;;;;;;;;;;;;;;;

.Bclipped
EOR R14,R14,#1<<17 ;reset the right bit

MOV R8,R14,ROR#8
LDR R3,BASESCR:ADD R10,R3,R1
               ADD R6,R3,R2,LSL#8:ADD R6,R6,R2,LSL#6

MOV R1,#&8000
MOV R2,#&8000

CMP R9,#0:BNE BnoNextC
LDR R5,deltaStartb
CMP R5,#0
MOVGT R2,R5,LSL#16
MOVMI R1,R5,LSL#16
B BnextOneC

.BnoNextC

SUB R5,PC,#4
SUBS R9,R9,#1:BPL BfillClip

;;;;;;;;;;;;;;;;;;;;;;;
.BnextOneC
LDR R9,[R13,#-4]!
CMP R9,#0:BEQ BnextTwoC

LDMDB R13,{R5,R7}
CMP R7,R12:MOVNE R12,R7:MOVNE R2,R2,ASR#16:MOVNE R2,R2,ASL#16:ORRNE R2,R2,#&8000
CMP R5,R11:MOVNE R11,R5:MOVNE R1,R1,ASR#16:MOVNE R1,R1,ASL#16:ORRNE R1,R1,#&8000

SUB R5,PC,#4
SUBS R9,R9,#1:BPL BfillClip

;;;;;;;;;;;;;;;;;;;;;;;
.BnextTwoC
LDR R9,[R13,#-12]!
CMP R9,#0:FNexitEQ

LDMDB R13,{R5,R7}
CMP R7,R12:MOVNE R12,R7:MOVNE R2,R2,ASR#16:MOVNE R2,R2,ASL#16:ORRNE R2,R2,#&8000
CMP R5,R11:MOVNE R11,R5:MOVNE R1,R1,ASR#16:MOVNE R1,R1,ASL#16:ORRNE R1,R1,#&8000

SUB R5,PC,#4
SUBS R9,R9,#1:BPL BfillClip

.Bnext
FNout

  ; ************ How to fill an hline

.fillb
 ADD R1,R1,R11
 ADD R2,R2,R12
 ADD R10,R10,#320
 MOV R0,R2,ASR#16
 SUB R0,R0,R1,ASR#16

 ADD R4,R10,R1,ASR#16 ; start fill

RSBS R7,R0,#10:BPL BdrawLittle

.BsuperFill

MOVS R7,R4,LSL#30:BEQ BnoBound

EORS R7,R7,R7,LSL#1
SUB R0,R0,R7,LSR#30

STRCCB R8,[R4],#1
STRMIB R14,[R4],#1
STRB   R8,[R4],#1
.BnoBound

MOV R8,R8,ROR#8

RSB R7,R0,#31*8+7
ADDS R7,R7,#8*8
ADDGE PC,PC,R7,LSR#1
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}   ; fills 1 horizontal line (full)
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}

STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}

STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}
STMIA R4!,{R8,R14}:STMIA R4!,{R8,R14}

MOV R14,R14,ROR#8

TEQP R15,R0,LSL#29
 STRMI R8,[R4],#4
 STREQB R8,[R4],#1
 STREQB R14,[R4],#1
 STRCSB R8,[R4]
MOV PC,R5

.BfillClip
 ADD R1,R1,R11
 ADD R2,R2,R12
 ADD R10,R10,#320
 MOV R0,R2,ASR#16
 SUB R0,R0,R1,ASR#16

 ADD R6,R6,#320

 ADD R4,R10,R1,ASR#16 ; start fill

 SUBS R7,R4,R6:BPL BnoLeft   ; left margin
 ADDS R0,R0,R7:MOVLE PC,R5:MOV R4,R6:MOV R7,#0

.BnoLeft
 ADD R7,R7,R0
 RSBS R7,R7,#320  ; right margin
 ADDLES R0,R0,R7
.BokMargin
 MOVLE PC,R5      ; out of border

 SUBS R7,R4,R3:MOVMI PC,R5    ; out of Vborder UP
 CMP R7,#65*1024:BPL Bnext    ; out of Vborder DOWN >> end of work

RSBS R7,R0,#10:BMI BsuperFill

.BdrawLittle
MOV R8,R8,ROR#8
MOV R14,R14,ROR#8

CMP R7,#11:MOVPL PC,R5

TST R4,#1:ADDNE R7,R7,#11   ; jump into 2nd table(11 instr later)

ADD PC,PC,R7,LSL#2
MOVNV R0,R0      :STRB R14,[R4,#09]:STRB R8,[R4,#08]
STRB R14,[R4,#07]:STRB R8,[R4,#06]:STRB R14,[R4,#05]
STRB R8,[R4,#04]:STRB R14,[R4,#03]:STRB R8,[R4,#02]
STRB R14,[R4,#01]:STRB R8,[R4,#00]
MOV PC,R5

                 :STRB R8,[R4,#09]:STRB R14,[R4,#08]
STRB R8,[R4,#07]:STRB R14,[R4,#06]:STRB R8,[R4,#05]
STRB R14,[R4,#04]:STRB R8,[R4,#03]:STRB R14,[R4,#02]
STRB R8,[R4,#01]:STRB R14,[R4,#00]
MOV PC,R5

;;;;;;;;;;;;;;;;;;;;;;;;;;

FNbin

.deltaStartb EQUD 0
.memoria     EQUD 0

]
=0
_________________________________________________________________________

DEFFNuni_div_table
[OPT PASS
 EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0 ;buffer routine(never forget!)

.Div512
 EQUD 65536/0.05
]
FOR ZORRO%=1TO 1023
[OPT PASS
 EQUD 65536/ZORRO%
]
NEXT

=0
