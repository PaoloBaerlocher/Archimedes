REM >POIZONE_10
REM Poizone by P Baerlocher , M Andreoli and F Hautecloque - 1991

basecode=&8000+220*1024

DIM Cde 539000
FOR PASS=4 TO 6 STEP 2
P%=basecode
O%=Cde
[OPT PASS

;;;;;;;;;;;;;;; PROGRAMME PRINCIPAL ;;;;;;;;;;;;;;;
.Poizone
MOV R0,#200:MOV R1,#%01:MOV R2,#0:SWI "OS_Byte" ; no 'escape'
SWI 256+21 ; disable VDU screen

BL SetDisplayStart
BL SwapScreens:BL SwapScreens    ; to set BASESCROLL

BL SetStartScreen
BL FastRecopy

ADR R0,theMusicFilename
MOV R1,#&8000
LDR R2,BufferAdt
MOV R3,#1
SWI "LZWD_Decompress"   ; load music

BL SaveBorder
BL CheckPort            ; ctrl if RTFM fitted
BL CopyScreen
BL SetScoreChars
BL ScoresUpDate
BL LoadScoresTable
BL TranslateHiScores

MOV R0,#&8000:SWI "Trk_InitMusic"

.infini
MOV R0,#0:SWI "Trk_SetPosition"

.retToPres
BL PresentationInitiale    ; return in R0 key number

CMP R0,#3:BMI startGame    ; analyse key pressed
          BLEQ gosub

          BL RedefineKeys     ; F4
          B retToPres
      .gosub
          BL RequestPassWord  ; F3
          B retToPres

.startGame
STR R0,NbOfPlayers
BL ResetGameVariables
BL CtrlPassWord      ; output R0=level nb

.nextZone
STR R0,WhichLevel
BL SetLevelGraphLand ; input R0
BL ResetRND

LDR R0,WhichLevel:BL LoadScheme
BL PrepareGame

BL PlayZoneMusic
BL writeZONE
BL SetScoreChars
BL ScoresUpDate
BL IntermedeScr
BL SetScoreChars

.Loooop
 BL MainGame

 LDR R0,Time:CMP R0,#0:BMI endofLoooop        ; conditions de sortie
 BL CountBadBlocks:CMP R0,#0:BEQ endofLoooop
 ADD R0,PC,#FNmb(abortGame):LDR R0,[R0,#FNlb(abortGame)]:CMP R0,#0:BNE EscapeGame
B Loooop

.endofLoooop
BL eraseTime:BL erasePerc:BL SwapScreens
BL eraseTime:BL erasePerc:BL SwapScreens
BL EndOfLevel
BL eraseZONE

ADD R0,PC,#FNmb(Pourcentage):LDR R0,[R0,#FNlb(Pourcentage)]
CMP R0,#90:BMI endOfGame

LDR R0,WhichLevel:BL Cartoon

LDR R0,WhichLevel         ; if last level was computer then play challenge
.searchChl
CMP R0,#6:SUBPL R0,R0,#5:BPL searchChl
CMP R0,#5:BLEQ PlayChallenge

LDR R0,Pirated:CMP R0,#0:BNE infini
LDR R0,WhichLevel:ADD R0,R0,#1  ; all right,next zone
CMP R0,#51:BMI nextZone

BL Congratulations              ; un genie a fini le jeu

.endOfGame
BL InsertName
BL SaveScoresTable
B infini

.PlayChallenge
STR R14,temp14_5
BL TextChallenge
BL PrepareChallenge
MOV R0,#16:SWI "Trk_SetPosition"
BL IntroChallenge
BL SetScoreChars

.Loooop2
 BL MainChal
 LDR R0,Time:CMP R0,#0:BMI endofLoooop2      ; conditions de sortie
 ADD R0,PC,#FNmb(abortGame):LDR R0,[R0,#FNlb(abortGame)]:CMP R0,#0:BNE EscapeGame
B Loooop2

.endofLoooop2
BL eraseTime:BL SwapScreens:BL eraseTime:BL SwapScreens
BL ScoresUpDate
BL RevealPassWord

LDR R15,temp14_5

.EscapeGame
BL ScoresUpDate
BL eraseTime:BL erasePerc:BL SwapScreens
BL eraseTime:BL erasePerc:BL SwapScreens
BL eraseZONE
B infini

;;;;;;;;;;;;;;;;; END OF MAIN PROGRAM ;;;;;;;;;;;;;;;

.temp14_5 EQUD 0
.prepare14 EQUD 0

.PrepareGame
STR R14,prepare14
 MOV R0,#0:STR R0,ItsChallenge

 LDR R0,WhichLevel:MOV R1,R0,LSR#3
 ADD R2,PC,#FNmb(Baddie):STR R1,[R2,#FNlb(Baddie)] ;nb of bad monsters

 MOV R0,R0,LSR#3:BL SetSpeedOfBirth
 BL AddMaskToLevel
 BL ResetGeneralVariables
 BL ResetLevelVariables
 BL ResetTrunk

 LDR R0,NbOfPlayers:CMP R0,#1:MVNEQ R0,#0:STREQ R0,Deadly2
 BLNE KillTransporters
 BL GenerateLand
 BL InitOccTable
 BL InitCyclones
 BL AnalizeScheme
 BL GenerateAllMonsters
LDR R15,prepare14

.PrepareChallenge
STR R14,prepare14
 MOV R0,#1:STR R0,ItsChallenge

 BL LoadChallengeScheme
 BL DecompChallenge

 MOV R0,#0
 LDR R1,WhichLevel
 SUB R1,R1,#1
 .nxtPenta
 CMP R1,#5:SUBPL R1,R1,#5:ADDPL R0,R0,#1:BPL nxtPenta

 BL SetChallengePos
 MOV R0,#12:BL SetSpeedOfBirth

 BL ResetGeneralVariables
 BL ResetChallengeVariables
 BL ResetTrunk

 LDR R0,NbOfPlayers:CMP R0,#1:MVNEQ R0,#0:STREQ R0,Deadly2
 BL GenerateLand
 BL InitOccTable
 BL InitCyclones
 BL GenerateAllMonsters
LDR R15,prepare14

.PlayZoneMusic
LDR R0,WhichLevel:SUB R0,R0,#1
.nxtZMs
CMP R0,#5:SUBPL R0,R0,#5:BPL nxtZMs:ADD R0,R0,#4

LDRB R0,[PC,R0]
SWI "Trk_SetPosition"
MOV R15,R14
EQUB 30
EQUB 36
EQUB 45
EQUB 51
EQUB 57
ALIGN

.theMusicFilename EQUS "Music"+CHR$0:ALIGN
.BufferAdt EQUD Buffer

;;;;;;;;;;; FIN DU PROGRAMME PRINCIPAL ;;;;;;;;;;;;

; INDICATIONS - chaque fois qu'il est necessaire de sauver R14/13 au debut
;          d'une subroutine,je sauve R14/13 dans une location temp14\13_xx
;             - pour acceder a' une location eloignee (delta>4096) je fais
;               ainsi * SUB Rx,PC,#FNmb(LABEL%) LDR Rx,[Rx,#FNlb(LABEL%)]
;               ou les fonctions FNmb & FNlb me donnent,respectivement,
;               le byte le plus et le moins significatif du delta cherche'
;               ( si LABEL% est posterieure a l'istruction,j'utilise ADD )
;************************************************************************

\\\\\\\\\\\\\\
\ PROTECTION \   Si c'est une copie,alors sauver 1 dans Pirated
\\\\\\\\\\\\\\   ( le programme se charge alors de diminuer le temps)

.Pirated EQUD 0 ; 0=original

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\ VARIABLES PRINCIPALES DU JEU \
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

.TheScore1  EQUD 00000        ; 0 - 99999    ; SCORE OF PLAYER 1 \ 2
.TheScore2  EQUD 00000
.TempScore1 EQUD 00000
.TempScore2 EQUD 00000
.Time       EQUD 15000        ; 0 - 15000 ( 5 minutes )

.NbOfPlayers  EQUD 1           ; 1 ou 2
.WhichLevel   EQUD 0           ; 1..50

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\ VARIABLES DU JEU SECONDAIRES \
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

.ItsChallenge EQUD 0           ; 0/1 = (no / yes) challenge
.ChallPos     EQUD 0           ; mais quel challenge(il y en a 10)

.Unreal  EQUD 0      ; Pengi1 vulnerable si !Unreal=0
.Unreal2 EQUD 0      ; Pengi2 vulnerable si !Unreal2=0

.DeltaX  EQUD 0
.DeltaY  EQUD 0
.DeltaX2 EQUD 0
.DeltaY2 EQUD 0

.ScrCoords
.ScrPX  EQUD 18     ; Indique case en haut a' droite
.ScrPY  EQUD 19     ;
.ScrFX  EQUD 2      ; [ interval comme pour pengo (0-63) & (0-4) ]
.ScrFY  EQUD 2      ;

.PenCoords          ; ( doit immediatement suivre ScrCoords! )
.PosX   EQUD 25     ; 0-63   ; position de pengo dans la zone de jeu
.PosY   EQUD 26     ; 0-63
.FinX   EQUD 0      ; 0-4    ; position de pengo dans une case
.FinY   EQUD 0      ; 0-4

.PenCoords2
.PosX2   EQUD 25     ; 0-63   ; position de pengo2 dans la zone de jeu
.PosY2   EQUD 27     ; 0-63
.FinX2   EQUD 0      ; 0-4    ; position de pengo2 dans une case
.FinY2   EQUD 0      ; 0-4

.DirX    EQUD 0       ; for every player | -1 , 0 , 1    * direction X
.DirY    EQUD 0       ;                  | -1 , 0 , 1    * direction Y
.PengDir EQUD 0       ;                  | deltaSprite du Pengo
.Pushing EQUD 0       ;                  | indique si Pengo pousse bloc
.movwhat EQUD 0       ;                  | quel bloc  ( =-1 pas de bloc )
.movbx   EQUD 0       ;                  | ou se trouve ce bloc X
.movby   EQUD 0       ;                  |         "            Y
.movbdx  EQUD 0       ;                  | direction de deplacement bloc X
.movbdy  EQUD 0       ;                  |             "                 Y
.movcrsh EQUD 0       ;                  | Nb de monstres tues avec bloc
.Deadly  EQUD 0       ;                  | phase d'agonie de Pengo

.DirX2    EQUD 0      ; idem for player 2
.DirY2    EQUD 0
.PengDir2 EQUD 0
.Pushing2 EQUD 0
.movwhat2 EQUD 0
.movbx2   EQUD 0
.movby2   EQUD 0
.movbdx2  EQUD 0
.movbdy2  EQUD 0
.movcrsh2 EQUD 0
.Deadly2  EQUD 0

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
\ AUTRES VARIABLES IMPORTANTES \
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

.ScreenStartAdr EQUD &1FD8000 ; Adresse base de la RAM Video
.BASESCR        EQUD &1FD8000 ; Address of current screen (Shadow Screen)
.BASESCROLL     EQUD &1FD8A08 ; Address of scroll screen (=BASESCR+321*8)
.SwapPage       EQUD 0        ; 0\80 Kb (delta entre deux ecrans)

;;;;;;;;;;;;;;;;;;;;;;;;;;;; MicroRoutines ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.ResetGameVariables
MOV R0,#0:    STR R0,TheScore1:STR R0,TheScore2
              STR R0,TempScore1:STR R0,TempScore2
              ADD R1,PC,#FNmb(abortGame):STR R0,[R1,#FNlb(abortGame)]
MOV R15,R14

.ResetGeneralVariables
MOV R0,#0:    STR R0,DirX:STR R0,DirY:STR R0,Pushing
              STR R0,Deadly:STR R0,movcrsh
              STR R0,PengDir
              STR R0,DirX2:STR R0,DirY2:STR R0,Pushing2
              STR R0,Deadly2:STR R0,movcrsh2
MOV R0,#4:    STR R0,PengDir2
MVN R0,#0:    STR R0,movwhat
              STR R0,movwhat2
              ADD R1,PC,#FNmb(badwhat):STR R0,[R1,#FNlb(badwhat)]
MOV R0,#0:    ADD R1,PC,#FNmb(alreadyDiamond):STR R0,[R1,#FNlb(alreadyDiamond)]
              ADD R1,PC,#FNmb(Crashes):STR R0,[R1,#FNlb(Crashes)]
              ADD R1,PC,#FNmb(Crashes+4):STR R0,[R1,#FNlb(Crashes+4)]
              ADD R1,PC,#FNmb(bombT):STR R0,[R1,#FNlb(bombT)]
              ADD R1,PC,#FNmb(scoreT):STR R0,[R1,#FNlb(scoreT)]
MOV R15,R14

.ResetLevelVariables
LDR R2,WhichLevel
CMP R2,#1:MOVEQ R0,#90  ;select right delay
CMP R2,#2:MOVEQ R0,#90
CMP R2,#3:MOVEQ R0,#150
CMP R2,#4:MOVEQ R0,#150:MOVGT R0,#180

ADD R0,R0,R0,LSL#2:ADD R0,R0,R0,LSL#2:MOV R0,R0,LSL#1 ; x50

STR R0,Time

MOV R0,#0:    STR R0,Unreal:STR R0,Unreal2
MOV R0,#18:   STR R0,ScrPX:STR R0,ScrPY
MOV R0,#2:    STR R0,ScrFX:STR R0,ScrFY

SUB R0,PC,#FNmb(NbOfPlayers):LDR R0,[R0,#FNlb(NbOfPlayers)]:CMP R0,#1

MOVEQ R0,#24:MOVGT R0,#23:STR R0,PosX
MOV R0,#25:               STR R0,PosX2
MOV R0,#24:   STR R0,PosY
              STR R0,PosY2
MOV R0,#0:    STR R0,FinX:STR R0,FinY:STR R0,FinX2:STR R0,FinY2

ADD R1,PC,#FNmb(currentPerc):STR R0,[R1,#FNlb(currentPerc)]
MOV R15,R14

.ResetChallengeVariables
MOV R0,#&5D0:ADD R0,R0,#&C:STR R0,Time     ; 30 secs
MOV R0,#2048:STR R0,Unreal:STR R0,Unreal2  ; superpengo

SUB R0,PC,#FNmb(NbOfPlayers):LDR R0,[R0,#FNlb(NbOfPlayers)]:CMP R0,#1

LDR R0,ChallPos:MOV R0,R0,LSR#2
MOV R1,R0,LSR#6:ADD R1,R1,#1:STR R1,ScrPY
ADD R1,R1,#5:                STR R1,PosY:STR R1,PosY2
AND R1,R0,#63:               STR R1,ScrPX
ADD R1,R1,#6:STR R1,PosX2:SUB R1,R1,#1:SUBNE R1,R1,#1:STR R1,PosX

MOV R0,#0:STR R0,ScrFX:STR R0,ScrFY

MOV R0,#2:STR R0,FinX:STR R0,FinY:STR R0,FinX2:STR R0,FinY2
MOV R15,R14

.AddScore1
LDR R11,TempScore1
ADD R11,R11,R12
STR R11,TempScore1                     ;;;;;;;;;;;;;;;
MOV R15,R14                            ;GESTION SCORE;
                                       ;;;;;;;;;;;;;;;
.AddScore2
LDR R11,TempScore2
ADD R11,R11,R12
STR R11,TempScore2
MOV R15,R14

.RefreshScore
LDR R0,TempScore1
SUBS R0,R0,#1:LDRPL R2,TheScore1:ADDPL R2,R2,#1:STRPL R0,TempScore1:STRPL R2,TheScore1
LDR R0,TempScore2
SUBS R0,R0,#1:LDRPL R2,TheScore2:ADDPL R2,R2,#1:STRPL R0,TempScore2:STRPL R2,TheScore2
MOV R15,R14

.TotalRefresh                       ; (for both players)
LDR R0,TempScore1:LDR R1,TheScore1:ADD R1,R1,R0:STR R1,TheScore1
MOV R0,#0:STR R0,TempScore1

LDR R0,TempScore2:LDR R1,TheScore2:ADD R1,R1,R0:STR R1,TheScore2
MOV R0,#0:STR R0,TempScore2
MOV R15,R14
                                          ;;;;;;;;;;;;;;;;;
.RefreshTime                              ; GESTION TEMPS ;
LDR R8,Time:SUB R8,R8,#1:STR R8,Time      ;;;;;;;;;;;;;;;;;
MOV R15,R14

.ResetRND                                ; Reset RND seed ;
SWI "OS_ReadMonotonicTime"
ADD R1,PC,#FNmb(Random):STR R0,[R1,#FNlb(Random)]
MOV R15,R14

.SwapScreens                           ;;;;;;;;;;;;;;;;;;;;;;;;;;
LDR R0,ScreenStartAdr                  ;GESTION PAGES GRAPHIQUES;
LDR R1,SwapPage                        ;;;;;;;;;;;;;;;;;;;;;;;;;;
RSB R1,R1,#80*1024
STR R1,SwapPage
ADD R0,R0,R1
STR R0,BASESCR
ADD R0,R0,#320*8:ADD R0,R0,#8
STR R0,BASESCROLL
MOV R15,R14

.ViewScreen
SWI "OS_EnterOS"                 ; SwapPage (Hard)
MOV R0,#&3600000
LDR R1,SwapPage
ADD R0,R0,R1,LSR#2
STR R0,[R0]
TEQP PC,#0
MOVNV R0,R0
MOV R15,R14

.SetDisplayStart
ADR R0,inoutBlock
ADD R1,R0,#8
SWI "OS_ReadVduVariables"
LDR R1,[R1]
STR R1,ScreenStartAdr
MOV R15,R14

.inoutBlock EQUD 149:EQUD -1:EQUD 0

.SetChallengePos   ; input R0=challenge number
MOV R1,#0
CMP R0,#4:SUBPL R0,R0,#4:MOVPL R1,#1*12*64*4
CMP R0,#4:SUBPL R0,R0,#4:MOVPL R1,#2*12*64*4
ADD R0,R0,R0,LSL#1:ADD R1,R1,R0,LSL#4
STR R1,ChallPos
MOV R15,R14

.CalculeDeltas
ADR R0,ScrCoords
LDMIA R0,{R0,R1, R2,R3, R4,R5, R6,R7}  ; ScrPX,.PY,.FX,.FY,PosX,.Y,FinX,.Y
SUB R4,R4,R0:ADD R4,R4,R4,LSL#2:ADD R4,R4,R6:SUB R4,R4,R2
SUB R5,R5,R1:ADD R5,R5,R5,LSL#2:ADD R5,R5,R7:SUB R5,R5,R3
STR R4,DeltaX:STR R5,DeltaY
MOV R15,R14

.CalculeDeltas2
ADR R0,ScrCoords
LDMIA R0,{R0,R1, R2,R3}  ; ScrPX,.PY,.FX,.FY
ADR R4,PenCoords2
LDMIA R4,{R4,R5, R6,R7}
SUB R4,R4,R0:ADD R4,R4,R4,LSL#2:ADD R4,R4,R6:SUB R4,R4,R2
SUB R5,R5,R1:ADD R5,R5,R5,LSL#2:ADD R5,R5,R7:SUB R5,R5,R3
STR R4,DeltaX2:STR R5,DeltaY2
MOV R15,R14

.CtrlScrollScreen
LDR R1,DeltaX
CMP R1,#13:BPL notoleft
ADD R1,R1,#1
LDR R0,ScrFX
SUBS R0,R0,#1
STRPL R0,ScrFX
BPL notoright
MOV R0,#4:STR R0,ScrFX
LDR R0,ScrPX:SUB R0,R0,#1:STR R0,ScrPX
.notoleft
CMP R1,#44:BMI notoright
SUB R1,R1,#1
LDR R0,ScrFX
ADD R0,R0,#1
CMP R0,#5
STRMI R0,ScrFX
BMI notoright
MOV R0,#0:STR R0,ScrFX
LDR R0,ScrPX:ADD R0,R0,#1:STR R0,ScrPX
.notoright
STR R1,DeltaX

LDR R1,DeltaY
CMP R1,#13:BPL notup
ADD R1,R1,#1
LDR R0,ScrFY
SUBS R0,R0,#1
STRPL R0,ScrFY
BPL notdown
MOV R0,#4:STR R0,ScrFY
LDR R0,ScrPY:SUB R0,R0,#1:STR R0,ScrPY
.notup
CMP R1,#44:BMI notdown
SUB R1,R1,#1
LDR R0,ScrFY
ADD R0,R0,#1
CMP R0,#5
STRMI R0,ScrFY
BMI notdown
MOV R0,#0:STR R0,ScrFY
LDR R0,ScrPY:ADD R0,R0,#1:STR R0,ScrPY
.notdown
STR R1,DeltaY
MOV R15,R14

.GestionDeltasTwin
STR R14,temp14_19

BL CalculeDeltas
BL CalculeDeltas2

; cas X
;;;;;;;;;

LDR R0,DeltaX
LDR R1,DeltaX2
SUBS R2,R0,R1:RSBMI R2,R2,#0   ; delta between pengos
CMP R2,#31:BMI trivial1

CMP R0,#13:BMI jump1:CMP R0,#44:BPL jump2
.endjump12
CMP R1,#13:BMI jump3:CMP R1,#44:BPL jump4
.endjump34
.endtrivial1

; cas Y
;;;;;;;;

LDR R0,DeltaY
LDR R1,DeltaY2
SUBS R2,R0,R1:RSBMI R2,R2,#0   ; delta between pengos
CMP R2,#31:BMI trivial2

CMP R0,#13:BMI jump5:CMP R0,#44:BPL jump6
.endjump56
CMP R1,#13:BMI jump7:CMP R1,#44:BPL jump8
.endjump78
.endtrivial2

BL CalculeDeltas
BL CalculeDeltas2

LDR R15,temp14_19

.temp14_19 EQUD 0

.jump1
LDR R2,FinX:ADD R2,R2,#1
CMP R2,#5:MOVEQ R2,#0
STR R2,FinX
LDREQ R2,PosX:ADDEQ R2,R2,#1:STREQ R2,PosX
MOV R2,#0:STR R2,DirX
B endjump12

.jump3
LDR R2,FinX2:ADD R2,R2,#1
CMP R2,#5:MOVEQ R2,#0
STR R2,FinX2
LDREQ R2,PosX2:ADDEQ R2,R2,#1:STREQ R2,PosX2
MOV R2,#0:STR R2,DirX2
B endjump34

.jump2
LDR R2,FinX:SUBS R2,R2,#1
MOVMI R2,#4
STR R2,FinX
LDRMI R2,PosX:SUBMI R2,R2,#1:STRMI R2,PosX
MOV R2,#0:STR R2,DirX
B endjump12

.jump4
LDR R2,FinX2:SUBS R2,R2,#1
MOVMI R2,#4
STR R2,FinX2
LDRMI R2,PosX2:SUBMI R2,R2,#1:STRMI R2,PosX2
MOV R2,#0:STR R2,DirX2
B endjump34

.trivial1
CMP R0,#13:CMPPL R1,#13:BMI trivjump1
CMP R0,#44:CMPMI R1,#44:BPL trivjump2
B endtrivial1

.trivjump1
LDR R2,ScrFX:SUBS R2,R2,#1
MOVMI R2,#4
STR R2,ScrFX
LDRMI R2,ScrPX:SUBMI R2,R2,#1:STRMI R2,ScrPX
B endtrivial1
.trivjump2
LDR R2,ScrFX:ADD R2,R2,#1
CMP R2,#5:MOVEQ R2,#0
STR R2,ScrFX
LDREQ R2,ScrPX:ADDEQ R2,R2,#1:STREQ R2,ScrPX
B endtrivial1

.jump5
LDR R2,FinY:ADD R2,R2,#1
CMP R2,#5:MOVEQ R2,#0
STR R2,FinY
LDREQ R2,PosY:ADDEQ R2,R2,#1:STREQ R2,PosY
MOV R2,#0:STR R2,DirY
B endjump56

.jump7
LDR R2,FinY2:ADD R2,R2,#1
CMP R2,#5:MOVEQ R2,#0
STR R2,FinY2
LDREQ R2,PosY2:ADDEQ R2,R2,#1:STREQ R2,PosY2
MOV R2,#0:STR R2,DirY2
B endjump78

.jump6
LDR R2,FinY:SUBS R2,R2,#1
MOVMI R2,#4
STR R2,FinY
LDRMI R2,PosY:SUBMI R2,R2,#1:STRMI R2,PosY
MOV R2,#0:STR R2,DirY
B endjump56

.jump8
LDR R2,FinY2:SUBS R2,R2,#1
MOVMI R2,#4
STR R2,FinY2
LDRMI R2,PosY2:SUBMI R2,R2,#1:STRMI R2,PosY2
MOV R2,#0:STR R2,DirY2
B endjump78

.trivial2
CMP R0,#13:CMPPL R1,#13:BMI trivjump3
CMP R0,#44:CMPMI R1,#44:BPL trivjump4
B endtrivial2

.trivjump3
LDR R2,ScrFY:SUBS R2,R2,#1
MOVMI R2,#4
STR R2,ScrFY
LDRMI R2,ScrPY:SUBMI R2,R2,#1:STRMI R2,ScrPY
B endtrivial2
.trivjump4
LDR R2,ScrFY:ADD R2,R2,#1
CMP R2,#5:MOVEQ R2,#0
STR R2,ScrFY
LDREQ R2,ScrPY:ADDEQ R2,R2,#1:STREQ R2,ScrPY
B endtrivial2

.CtrlCollision1
LDR R0,Deadly2:MVNS R0,R0:MOVPL R15,R14

ADD R0,R8,R8,LSL#2:ADD R0,R0,R10    ;dx1
LDR R1,PosX2:LDR R2,FinX2
ADD R1,R1,R1,LSL#2:ADD R1,R1,R2
SUBS R0,R0,R1:RSBMI R0,R0,#0
CMP R0,#5:MOVPL R15,R14

ADD R0,R9,R9,LSL#2:ADD R0,R0,R11    ;dy1
LDR R1,PosY2:LDR R2,FinY2
ADD R1,R1,R1,LSL#2:ADD R1,R1,R2
SUBS R0,R0,R1:RSBMI R0,R0,#0
CMP R0,#5:MOVPL R15,R14

MOV R12,#0:MOV R13,#0
MOV R15,R14

.CtrlCollision2
LDR R0,Deadly:MVNS R0,R0:MOVPL R15,R14

ADD R0,R8,R8,LSL#2:ADD R0,R0,R10    ;dx2
LDR R1,PosX:LDR R2,FinX
ADD R1,R1,R1,LSL#2:ADD R1,R1,R2
SUBS R0,R0,R1:RSBMI R0,R0,#0
CMP R0,#5:MOVPL R15,R14

ADD R0,R9,R9,LSL#2:ADD R0,R0,R11    ;dy2
LDR R1,PosY:LDR R2,FinY
ADD R1,R1,R1,LSL#2:ADD R1,R1,R2
SUBS R0,R0,R1:RSBMI R0,R0,#0
CMP R0,#5:MOVPL R15,R14

MOV R12,#0:MOV R13,#0
MOV R15,R14
;;;;;;;;;;;;;;;;;;;;;;;; Fin des MicroRoutines ;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;; DRAW * dessine un sprite sous controle du Controller ;;;;;;;;;;

.Draw            ; Input  R0,R1,R2 = SPOSX,SPOSY,spritePosition
; Accessible from Controller only !

; R2 = Number of lines to draw

MOV R2,#20             ; NORMAL = 20 lines to draw

CMP R1,#220
RSBPL R2,R1,#240
CMPPL R2,#21
BPL ContSprites        ; out of screen ?

CMP R1,#0
ADDMI R2,R1,#20
SUBMI R14,R14,R1,LSL#3
SUBMI R14,R14,R1,LSL#5   ; R14+=R1*20*2
MOVMI R1,#0

CMP R2,#1
BMI ContSprites        ; no lines to draw?

CMP R0,#245-20
BGT rightrunc
BCS lefttrunc

LDR R3,BASESCROLL
ADD R3,R3,R1,LSL#8
ADD R3,R3,R1,LSL#6
ADD R3,R3,R0

ANDS R0,R0,#%11
BEQ Lospr

.Alfa2

LDMIA R3,{R0,R4,R5,R6,R7,R8}
LDMIA R14!,{R1,R9 ,R10,R11, R12,R13}
BIC R0,R0,R9,LSL#16 :ORR R0,R0,R1,LSL#16
BIC R4,R4,R9,LSR#16 :ORR R4,R4,R1,LSR#16
BIC R4,R4,R11,LSL#16:ORR R4,R4,R10,LSL#16
BIC R5,R5,R11,LSR#16:ORR R5,R5,R10,LSR#16
BIC R5,R5,R13,LSL#16:ORR R5,R5,R12,LSL#16
BIC R6,R6,R13,LSR#16:ORR R6,R6,R12,LSR#16
LDMIA R14!,{R1,R9 ,R10,R11}
BIC R6,R6,R9,LSL#16 :ORR R6,R6,R1,LSL#16
BIC R7,R7,R9,LSR#16 :ORR R7,R7,R1,LSR#16
BIC R7,R7,R11,LSL#16:ORR R7,R7,R10,LSL#16
BIC R8,R8,R11,LSR#16:ORR R8,R8,R10,LSR#16
STMIA R3,{R0,R4,R5,R6,R7,R8}
ADD R3,R3,#320

SUBS R2,R2,#1
BNE Alfa2

B ContSprites

.Lospr

LDMIA R3,{R4,R5,R6,R7,R8}
LDMIA R14!,{R1,R9 ,R10,R11, R12,R13}
BIC R4,R4,R9:ORR R4,R4,R1
BIC R5,R5,R11:ORR R5,R5,R10
BIC R6,R6,R13:ORR R6,R6,R12
LDMIA R14!,{R1,R9 ,R10,R11}
BIC R7,R7,R9:ORR R7,R7,R1
BIC R8,R8,R11:ORR R8,R8,R10
STMIA R3,{R4,R5,R6,R7,R8}
ADD R3,R3,#320

SUBS R2,R2,#1
BNE Lospr

B ContSprites

.rightrunc
RSBS R8,R0,#244
BLE ContSprites

LDR R3,BASESCROLL
ADD R3,R3,R1,LSL#8
ADD R3,R3,R1,LSL#6
ADD R3,R3,R0

ANDS R0,R0,#%11
BEQ Lospr2

.Alfa22

LDMIA R3,{R0,R4,R5,R6,R7}
LDMIA R14!,{R1,R9 ,R10,R11, R12,R13}
BIC R0,R0,R9,LSL#16   :ORR R0,R0,R1,LSL#16
CMP R8,#5
BICPL R4,R4,R9,LSR#16 :ORRPL R4,R4,R1,LSR#16
BICPL R4,R4,R11,LSL#16:ORRPL R4,R4,R10,LSL#16
CMPPL R8,#9
BICPL R5,R5,R11,LSR#16:ORRPL R5,R5,R10,LSR#16
BICPL R5,R5,R13,LSL#16:ORRPL R5,R5,R12,LSL#16
CMPPL R8,#13
BICPL R6,R6,R13,LSR#16:ORRPL R6,R6,R12,LSR#16
LDMPLIA R14!,{R1,R9,R10,R11}:ADDMI R14,R14,#4*4
BICPL R6,R6,R9,LSL#16 :ORRPL R6,R6,R1,LSL#16
CMPPL R8,#17
BICPL R7,R7,R9,LSR#16 :ORRPL R7,R7,R1,LSR#16
BICPL R7,R7,R11,LSL#16:ORRPL R7,R7,R10,LSL#16
STMIA R3,{R0,R4,R5,R6,R7}
ADD R3,R3,#320

SUBS R2,R2,#1
BNE Alfa22

B ContSprites

.Lospr2

LDMIA R3,{R0,R4,R5,R6}
LDMIA R14!,{R1,R9 ,R10,R11, R12,R13}
BIC R0,R0,R9          :ORR R0,R0,R1
CMP R8,#5
BICPL R4,R4,R11       :ORRPL R4,R4,R10
CMPPL R8,#9
BICPL R5,R5,R13       :ORRPL R5,R5,R12
CMPPL R8,#13
LDMPLIA R14!,{R1,R9,R10,R11}:ADDMI R14,R14,#4*4
BICPL R6,R6,R9        :ORRPL R6,R6,R1
STMIA R3,{R0,R4,R5,R6}
ADD R3,R3,#320

SUBS R2,R2,#1
BNE Lospr2

B ContSprites

.lefttrunc
ADDS R8,R0,#20
BLE ContSprites

LDR R3,BASESCROLL
ADD R3,R3,R1,LSL#8
ADD R3,R3,R1,LSL#6

RSB R6,R0,#0
MOV R7,R6,LSR#2
ADD R14,R14,R7,LSL#3

ANDS R0,R6,#%11
BEQ Lospr3

.Alfa23

LDMIA R3,{R0,R4,R5,R6,R7}
LDMIA R14!,{R1,R9 ,R10,R11, R12,R13}
BIC R0,R0,R9,LSR#16   :ORR R0,R0,R1,LSR#16
CMP R8,#5
BICPL R0,R0,R11,LSL#16:ORRPL R0,R0,R10,LSL#16
BICPL R4,R4,R11,LSR#16:ORRPL R4,R4,R10,LSR#16
CMPPL R8,#9
BICPL R4,R4,R13,LSL#16:ORRPL R4,R4,R12,LSL#16
BICPL R5,R5,R13,LSR#16:ORRPL R5,R5,R12,LSR#16
LDMPLIA R14!,{R1,R9,R10,R11}:ADDMI R14,R14,#4*4
CMPPL R8,#13
BICPL R5,R5,R9,LSL#16 :ORRPL R5,R5,R1,LSL#16
BICPL R6,R6,R9,LSR#16 :ORRPL R6,R6,R1,LSR#16
CMPPL R8,#17
BICPL R6,R6,R11,LSL#16:ORRPL R6,R6,R10,LSL#16
BICPL R7,R7,R11,LSR#16:ORRPL R7,R7,R10,LSR#16
STMIA R3,{R0,R4,R5,R6,R7}
ADD R3,R3,#320

SUBS R2,R2,#1
BNE Alfa23

B ContSprites

.Lospr3

LDMIA R3,{R0,R4,R5,R6}
LDMIA R14!,{R1,R9 ,R10,R11, R12,R13}
BIC R0,R0,R9   :ORR R0,R0,R1
CMP R8,#5
BICPL R4,R4,R11:ORRPL R4,R4,R10
CMPPL R8,#9
BICPL R5,R5,R13:ORRPL R5,R5,R12
LDMPLIA R14!,{R1,R9,R10,R11}:ADDMI R14,R14,#4*4
CMPPL R8,#13
BICPL R6,R6,R9 :ORRPL R6,R6,R1
STMIA R3,{R0,R4,R5,R6}
ADD R3,R3,#320

SUBS R2,R2,#1
BNE Lospr3

B ContSprites

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;; DESSINE TOUT L'ECRAN DE JEU (BACKGROUND+BLOCKS) ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.temp14_2 EQUD 0
.GraphBAS EQUD Graph
.LandBAS EQUD Land

.SCROLL
STR R14,temp14_2

LDR R14,BASESCROLL
LDR R0,LandBAS
LDR R6,GraphBAS

LDR R1,ScrPX
LDR R2,ScrPY

ADD R0,R0,R1,LSL#2
ADD R0,R0,R2,LSL#8 ; position in land

LDRB R13,[R0],#4   ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

LDR R1,ScrFX
LDR R2,ScrFY

       ; R2*4 = number of lines to draw

ADD R7,R7,R2,LSL#6
ADD R7,R7,R2,LSL#4    ; R7=R6+R2*4*20

SUB R5,R14,R1,LSL#2:ADD R5,R5,#20

;;;;;;;;;;;;;;;;;;;;;;;;;; Draw first line

RSB R3,R2,#5       ; number of (4*)lines to draw

ADD PC,PC,R1,LSL#2
EQUS "JUMP"
B one
B two
B three
B four

.five
ADD R7,R7,#16
.loop1
 FNuno
SUBS R3,R3,#1
BNE loop1
B out1

.four
ADD R7,R7,#12
.loop2
 FNdue
SUBS R3,R3,#1
BNE loop2
B out1

.three
ADD R7,R7,#8
.loop3
 FNtre
SUBS R3,R3,#1
BNE loop3
B out1

.two
ADD R7,R7,#4
.loop4
 FNquattro
SUBS R3,R3,#1
BNE loop4
B out1

.one
.loop5
 FNcinque
SUBS R3,R3,#1
BNE loop5

.out1

MOV R4,#11
.BigLoop1

LDRB R13,[R0],#4   ; kind of graph
ADD R7,R2,R13
ADD R7,R7,R13,LSL#2
ADD R7,R7,R7,LSL#2
ADD R7,R6,R7,LSL#4

MOV R14,R5
ADD R5,R5,#20

RSB R3,R2,#5

.loop6
 FNcinque
SUBS R3,R3,#1
BNE loop6

SUBS R4,R4,#1
BNE BigLoop1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Draw last part of first line ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LDRB R13,[R0],#4*(64-12)   ; kind of graph
ADD R7,R2,R13
ADD R7,R7,R13,LSL#2
ADD R7,R7,R7,LSL#2
ADD R7,R6,R7,LSL#4

MOV R14,R5
ADD R5,R5,#20

RSB R3,R2,#5       ; number of (4*)lines to draw

ADD PC,PC,R1,LSL#2
EQUS "JUMP"
B five2
B four2
B three2
B two2

.one2
.loop7
 FNcinque
SUBS R3,R3,#1
BNE loop7
B out2

.four2
.loop8
 FNdue
SUBS R3,R3,#1
BNE loop8
B out2

.three2
.loop9
 FNtre
SUBS R3,R3,#1
BNE loop9
B out2

.two2
.loop10
 FNquattro
SUBS R3,R3,#1
BNE loop10
B out2

.five2
.loop11
 FNuno
SUBS R3,R3,#1
BNE loop11

.out2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;; Draw others lines ;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LDR R14,BASESCROLL
RSB R13,R2,#5
ADD R14,R14,R13,LSL#10
ADD R14,R14,R13,LSL#8
SUB R14,R14,#320*20
STR R14,bicoflex

MOV R2,#11

.VeryBigLoop
LDR R14,bicoflex
ADD R14,R14,#320*20
STR R14,bicoflex

LDRB R13,[R0],#4   ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

SUB R5,R14,R1,LSL#2:ADD R5,R5,#20

MOV R3,#5

ADD PC,PC,R1,LSL#2
EQUS "JUMP"
B one3
B two3
B three3
B four3

.five3
ADD R7,R7,#16
.loop12
 FNuno
SUBS R3,R3,#1
BNE loop12
B out3

.four3
ADD R7,R7,#12
.loop13
 FNdue
SUBS R3,R3,#1
BNE loop13
B out3

.three3
ADD R7,R7,#8
.loop14
 FNtre
SUBS R3,R3,#1
BNE loop14
B out3

.two3
ADD R7,R7,#4
.loop15
 FNquattro
SUBS R3,R3,#1
BNE loop15
B out3

.one3
.loop16
 FNcinque
SUBS R3,R3,#1
BNE loop16

.out3
MOV R14,R5

STR R2,temp_2

MOV R4,#11
.loop17
LDRB R13,[R0],#4   ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

 FNcinqueb
 FNcinqueb
 FNcinqueb
 FNcinqueb
 FNcinqueb

 SUB R14,R14,#320*20:ADD R14,R14,#20
 LDR R6,GraphBAS

SUBS R4,R4,#1:BNE loop17

LDR R2,temp_2

;;;;;;;;;;;;;;;;;;;;;;;;;;
; Draw last part of line ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

LDRB R13,[R0],#4*(64-12) ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

MOV R3,#5          ; 20 lines to draw

ADD PC,PC,R1,LSL#2
EQUS "JUMP"
B five4
B four4
B three4
B two4

.one4
.loop18
 FNcinque
SUBS R3,R3,#1
BNE loop18
B out4

.four4
.loop19
 FNdue
SUBS R3,R3,#1
BNE loop19
B out4

.three4
.loop20
 FNtre
SUBS R3,R3,#1
BNE loop20
B out4

.two4
.loop21
 FNquattro
SUBS R3,R3,#1
BNE loop21
B out4

.five4
.loop22
 FNuno
SUBS R3,R3,#1
BNE loop22

.out4

SUBS R2,R2,#1
BNE VeryBigLoop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;; And finally draw last line of the screen ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SUB R2,PC,#FNmb(ScrFY):LDR R2,[R2,#FNlb(ScrFY)]
MOVS R3,R2         ; number of (4*)lines to draw
BEQ quit

LDR R14,bicoflex
ADD R14,R14,#320*20

LDRB R13,[R0],#4   ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

SUB R5,R14,R1,LSL#2:ADD R5,R5,#20

ADD PC,PC,R1,LSL#2
EQUS "JUMP"
B one5
B two5
B three5
B four5

.five5
ADD R7,R7,#16
.loop23
 FNuno
SUBS R3,R3,#1
BNE loop23
B out5

.four5
ADD R7,R7,#12
.loop24
 FNdue
SUBS R3,R3,#1
BNE loop24
B out5

.three5
ADD R7,R7,#8
.loop25
 FNtre
SUBS R3,R3,#1
BNE loop25
B out5

.two5
ADD R7,R7,#4
.loop26
 FNquattro
SUBS R3,R3,#1
BNE loop26
B out5

.one5
.loop27
 FNcinque
SUBS R3,R3,#1
BNE loop27

.out5

MOV R4,#11
.BigLoop3

LDRB R13,[R0],#4   ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

MOV R14,R5
ADD R5,R5,#20

MOV R3,R2            ; number of (4*)lines to draw

.loop28
 FNcinque
SUBS R3,R3,#1
BNE loop28

SUBS R4,R4,#1
BNE BigLoop3

;;;;;;;;;;;;;;;;;;;;;;;;;;
; Draw last part of line ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

LDRB R13,[R0],#4*(64-12)   ; kind of graph
ADD R7,R6,R13,LSL#8
ADD R7,R7,R13,LSL#7
ADD R7,R7,R13,LSL#4

MOV R14,R5

MOV R3,R2          ; number of (4*)lines to draw

ADD PC,PC,R1,LSL#2
.temp_2 EQUD 0
B five6
B four6
B three6
B two6

.one6
.loop29
 FNcinque
SUBS R3,R3,#1
BNE loop29
B quit

.four6
.loop30
 FNdue
SUBS R3,R3,#1
BNE loop30
B quit

.three6
.loop31
 FNtre
SUBS R3,R3,#1
BNE loop31
B quit

.two6
.loop32
 FNquattro
SUBS R3,R3,#1
BNE loop32
B quit

.five6
.loop33
 FNuno
SUBS R3,R3,#1
BNE loop33

.quit
LDR R15,temp14_2

.bicoflex EQUD 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;; Sprite Controller (interface pour l'utilisateur) ;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.temp14_1         EQUD 0
.Memos            EQUD 0
.SprBAS           EQUD Sprite

.SpriteController         ; read list & write sprites
STR R14,temp14_1

ADR R2,ListOfSprites           ; max 20 sprites

.nextsprite
LDMIA R2!,{R0,R1,R3}      ; Structure    x,y,Spritenumber (end=&00FF0000)
CMP R0,#&00FF0000
LDREQ R15,temp14_1        ;exit

LDR R14,SprBAS
ADD R14,R14,R3,LSL#9:ADD R14,R14,R3,LSL#8:ADD R14,R14,R3,LSL#5   ; x800

STR R2,Memos
B Draw
.ContSprites
LDR R2,Memos

B nextsprite

.ListOfSprites
]
P%+=12*18+4:O%+=12*18+4
[OPT PASS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.temp14_9 EQUD 0
.LOSpr EQUD ListOfSprites
.PengDirBAS EQUD PengDir
.Remember EQUD 0

.EndOfLevel
STR R14,temp14_9

BL CountBadBlocks:CMP R0,#0:BNE noWOW
MOV R1,#35:MOV R2,#28:SWI "Trk_MakeNoise":SWI "Trk_MakeNoise"
.noWOW

BL ScoresUpDate       ; ajoute aux scores les points pas encore cumules

; premiere phase . fade screen
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BL FadeScreen
BL FadeScreen
BL FadeScreen

; deuxieme phase . affiche resultats
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BL PutLevelInString

BL CountBadBlocks
CMP R0,#0:BEQ Perfect      ; 100% decontamination!
LDR R1,NbBadBAS:LDR R1,[R1]:STR R1,TotalBadBlocks
RSB R0,R0,R1
ADD R0,R0,R0,LSL#2:ADD R0,R0,R0,LSL#2:MOV R0,R0,LSL#2      ;x100
STR R0,Remaining

MOV R1,#37:MOV R2,#12:BL PaintChars              ; print lignes de texte
MOV R0,#30:MOV R1,#30:ADR R2,Text1:BL AfficheText

MOV R1,#37:MOV R2,#34:BL PaintChars
MOV R0,#30:MOV R1,#70:ADR R2,Text2:BL AfficheText

MOV R1,#30:MOV R2,#30:BL PaintChars

MVN R0,#0:STR R0,Pourcentage    ; initialise Pourcentage

BL PutMidWindowInBuffer

.ComputePercent             ; calcule et print pourcentage decontamination
LDR R0,Pourcentage
CMP R0,#89:MOVEQ R1,#16:MOVEQ R2,R1:BLEQ PaintChars
FNwait
BL PutMidWindowOnScreen
LDR R0,Pourcentage:ADD R0,R0,#1:STR R0,Pourcentage
BL WritePourcent

LDR R0,Remaining
LDR R1,TotalBadBlocks
SUBS R0,R0,R1
STRPL R0,Remaining
BPL ComputePercent

BL CalculeBonus         ; >> R0=bonus
MOV R12,R0:BL AddScore1
SUB R1,PC,#FNmb(NbOfPlayers):LDR R1,[R1,#FNlb(NbOfPlayers)]
CMP R1,#2:BLEQ AddScore2
BL PutBonusInString

MOV R1,#37:MOV R2,#34:BL PaintChars
MOV R0,#30:MOV R1,#170:ADR R2,Text3:BL AfficheText

BL CalculeBonus
CMP R0,#0:BNE noGameOverTxt

FNwait:FNwait:FNwait:FNwait:FNwait

MOV R1,#16:MOV R2,#16:BL PaintChars
MOV R0,#30:MOV R1,#210:ADR R2,Text7:BL AfficheText

.noGameOverTxt
BL SetScoreChars
BL ScoresUpDate

MOV R10,#125         ; pause
.Lpause2
FNwait
SUBS R10,R10,#1:BNE Lpause2

LDR R15,temp14_9

;;;;;;;;;;;;;;;;;;;;;;;;;;;; CAS PARFAIT ( 100 % ) ;;;;;;;;;;;;;;;;;;;;;;;

.Perfect
BL PutTimeInString

MOV R0,#100:STR R0,Pourcentage ;100% !

MOV R1,#37:MOV R2,#34:BL PaintChars
MOV R0,#30:MOV R1,#60:ADR R2,Text5:BL AfficheText

MOV R1,#37:MOV R2,#16:BL PaintChars
MOV R0,#30:MOV R1,#30:ADR R2,Text1:BL AfficheText

MOV R1,#37:MOV R2,#10:BL PaintChars
MOV R0,#30:MOV R1,#190:ADR R2,Text4:BL AfficheText

MOV R1,#37:MOV R2,#00:BL PaintChars

BL PutMidWindowInBuffer

MOV R0,#9:STR R0,Remember
.Flash
FNwait:FNwait:FNwait:FNwait
FNwait:FNwait:FNwait:FNwait
BL PutMidWindowOnScreen
FNwait:FNwait:FNwait:FNwait
FNwait:FNwait:FNwait:FNwait

MOV R0,#30:MOV R1,#95:ADR R2,Text6:MOV R4,#0:BL WriteString
MOV R0,#30:MOV R1,#135:ADR R2,Text2:MOV R4,#0:BL WriteString

LDR R0,Remember
SUBS R0,R0,#1
STRPL R0,Remember
BPL Flash

SUB R0,PC,#FNmb(Time):LDR R0,[R0,#FNlb(Time)]
MOV R0,R0,LSR#3              ; 4 sec = 25 points
ADD R0,R0,#500
MOV R12,R0:BL AddScore1
SUB R1,PC,#FNmb(NbOfPlayers):LDR R1,[R1,#FNlb(NbOfPlayers)]
CMP R1,#2:BLEQ AddScore2
BL PutBonusInString

MOV R1,#37:MOV R2,#34:BL PaintChars
MOV R0,#30:MOV R1,#170:ADR R2,Text3:BL AfficheText

BL PutMidWindowInBuffer

BL Dancing
BL SetScoreChars
BL ScoresUpDate

LDR R15,temp14_9

.NbBadBAS EQUD NbOfBadBlocks
.Remaining EQUD 0
.TotalBadBlocks EQUD 0
.Pourcentage EQUD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Textes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.Text1 EQUS "END OF LEVEL 01"+CHR$0
.Text2 EQUS "DECONTAMINATION"+CHR$0
.Text3 EQUS " BONUS    0000 "+CHR$0
.Text4 EQUS " TIME LEFT 000 "+CHR$0
.Text5 EQUS "   VERY GOOD   "+CHR$0
.Text6 EQUS "     TOTAL "    +CHR$0
.Text7 EQUS "   GAME OVER   "+CHR$0

ALIGN

.PutLevelInString
SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
MOV R1,#ASC("0")
.nxtlStr
CMP R0,#10:SUBPL R0,R0,#10:ADDPL R1,R1,#1:BPL nxtlStr
STRB R1,Text1+13
ADD R0,R0,#ASC("0"):STRB R0,Text1+14
MOV R15,R14

.PutTimeInString
SUB R0,PC,#FNmb(Time):LDR R0,[R0,#FNlb(Time)]
MOV R3,#&1300:ADD R3,R3,#&88    ; =5000
MOV R2,#48
.csec
CMP R0,R3:SUBPL R0,R0,R3:ADDPL R2,R2,#1:BPL csec:STRB R2,Text4+11
MOV R2,#48
.dsec
CMP R0,#50*10:SUBPL R0,R0,#50*10:ADDPL R2,R2,#1:BPL dsec:STRB R2,Text4+12
MOV R2,#48
.usec
CMP R0,#50:SUBPL R0,R0,#50:ADDPL R2,R2,#1:BPL usec:STRB R2,Text4+13
MOV R15,R14

.PutBonusInString                   ; input R0 = bonus
MOV R1,#48
.bmille
CMP R0,#1000:SUBPL R0,R0,#1000:ADDPL R1,R1,#1:BPL bmille:STRB R1,Text3+10
MOV R1,#48
.bcent
CMP R0,#0100:SUBPL R0,R0,#0100:ADDPL R1,R1,#1:BPL bcent:STRB R1,Text3+11
MOV R1,#48
.bdix
CMP R0,#0010:SUBPL R0,R0,#0010:ADDPL R1,R1,#1:BPL bdix:STRB R1,Text3+12

ADD R1,R0,#48:STRB R1,Text3+13
MOV R15,R14

.CalculeBonus
LDR R0,Pourcentage
SUBS R0,R0,#90:MOVMI R0,#0
ADD R0,R0,R0,LSL#2:ADD R0,R0,R0,LSL#2         ;x25
ADDPL R0,R0,#200
MOV R15,R14

;;;;;;;;;;;;;;;;;;;;;;;; Dancing Pengo ;;;;;;;;;;;;;;;;;;;;;;;;;;

.Dancing
STR R14,temp14_17

MOV R0,#92:STR R0,Coreogr     ; avance
.FirstDance
AND R4,R0,#%11000:MOV R4,R4,LSR#3      ; cycle1
      SUBS R5,R4,#1:ADDMI R5,R5,#4     ; cycle2
LDR R1,ListBAS
RSB R0,R0,#46:MOV R0,R0,LSL#1
MOV R2,#116                            ; y
MOV R6,#&00FF0000

ADD R3,R4,#4
STMIA R1!,{R0,R2,R3}         ; pengo Nb1
ADD R0,R0,#20
ADD R3,R5,#4
STMIA R1!,{R0,R2,R3}         ; pengo Nb2
ADD R0,R0,#20
ADD R3,R4,#4
STMIA R1,{R0,R2,R3, R6}      ; pengo Nb3 + EOS

FNwait
BL PutMidWindowOnScreen
BL SpriteController

LDR R0,Coreogr
SUBS R0,R0,#1
STRPL R0,Coreogr
BPL FirstDance

BL DanceDroite
BL DanceDevant
BL DanceGauche
BL DanceDevant
BL DanceDroite

MOV R0,#100:STR R0,Coreogr     ; bye bye pengo
.LastDance
AND R4,R0,#%11000:MOV R4,R4,LSR#3      ; cycle1
      SUBS R5,R4,#1:ADDMI R5,R5,#4     ; cycle2
LDR R1,ListBAS
RSB R0,R0,#100:MOV R0,R0,LSL#1
ADD R0,R0,#92
MOV R2,#116                            ; y
MOV R6,#&00FF0000

ADD R3,R4,#4
STMIA R1!,{R0,R2,R3}         ; pengo Nb1
ADD R0,R0,#20
ADD R3,R5,#4
STMIA R1!,{R0,R2,R3}         ; pengo Nb2
ADD R0,R0,#20
ADD R3,R4,#4
STMIA R1,{R0,R2,R3, R6}      ; pengo Nb3 + EOS

FNwait
BL PutMidWindowOnScreen
BL SpriteController

LDR R0,Coreogr
SUBS R0,R0,#1
STRPL R0,Coreogr
BPL LastDance
LDR R15,temp14_17             ; end of dance

.ListBAS EQUD ListOfSprites
.Coreogr EQUD 0
.temp14_17 EQUD 0

;;;;;;;;;;;;;;;;;;;;;; Dance directions ;;;;;;;;;;;;;;;;;;;

.DanceGauche
STR R14,temp14_18

MOV R0,#20:STR R0,Coreogr
.GaucheDance
AND R4,R0,#%11000:MOV R4,R4,LSR#3
      SUBS R5,R4,#1:ADDMI R5,R5,#4
LDR R1,ListBAS
MOV R0,#92
MOV R2,#116                            ; y
MOV R6,#&00FF0000

STMIA R1!,{R0,R2,R4}         ; pengo Nb1
ADD R0,R0,#20
STMIA R1!,{R0,R2,R5}         ; pengo Nb2
ADD R0,R0,#20
STMIA R1,{R0,R2,R4, R6}      ; pengo Nb3 + EOS

FNwait
BL PutMidWindowOnScreen
BL SpriteController

LDR R0,Coreogr
SUBS R0,R0,#1
STRPL R0,Coreogr
BPL GaucheDance
LDR R15,temp14_18

.DanceDroite
STR R14,temp14_18
MOV R0,#20:STR R0,Coreogr
.DroiteDance
AND R4,R0,#%11000:MOV R4,R4,LSR#3
      SUBS R5,R4,#1:ADDMI R5,R5,#4
LDR R1,ListBAS
MOV R0,#92
MOV R2,#116                            ; y
MOV R6,#&00FF0000

ADD R3,R4,#4
STMIA R1!,{R0,R2,R3}         ; pengo Nb1
ADD R0,R0,#20
ADD R3,R5,#4
STMIA R1!,{R0,R2,R3}         ; pengo Nb2
ADD R0,R0,#20
ADD R3,R4,#4
STMIA R1,{R0,R2,R3, R6}      ; pengo Nb3 + EOS

FNwait
BL PutMidWindowOnScreen
BL SpriteController

LDR R0,Coreogr
SUBS R0,R0,#1
STRPL R0,Coreogr
BPL DroiteDance
LDR R15,temp14_18

.DanceDevant
STR R14,temp14_18
MOV R0,#20:STR R0,Coreogr
.DevantDance
AND R4,R0,#%11000:MOV R4,R4,LSR#3
      SUBS R5,R4,#1:ADDMI R5,R5,#4
LDR R1,ListBAS
MOV R0,#92
MOV R2,#116                            ; y
MOV R6,#&00FF0000

ADD R3,R4,#12
STMIA R1!,{R0,R2,R3}         ; pengo Nb1
ADD R0,R0,#20
ADD R3,R5,#12
STMIA R1!,{R0,R2,R3}         ; pengo Nb2
ADD R0,R0,#20
ADD R3,R4,#12
STMIA R1,{R0,R2,R3, R6}      ; pengo Nb3 + EOS (end of sprites)

FNwait
BL PutMidWindowOnScreen
BL SpriteController

LDR R0,Coreogr
SUBS R0,R0,#1
STRPL R0,Coreogr
BPL DevantDance
LDR R15,temp14_18

.temp14_18 EQUD 0
;;;;;;;;;;;;;;;;;;;; FadeScreen = effet special ;;;;;;;;;;;;;;;;;;;;;;;

.FadeBAS EQUD FadeTable   ; pour chaque couleur donne une moins intense
.temp14_15 EQUD 0

.LessIntensity            ; routine qui diminue un peu l'intensite du scr
LDR R7,FadeBAS

MOV R4,#240               ; R11=input,R3=output
.LfadeY
MOV R5,#61
.LfadeX
LDR R6,[R11],#4
AND R10,R6,#&FF:LDRB R9,[R7,R10]
AND R10,R6,#&FF00:LDRB R10,[R7,R10,LSR#8]:ORR R9,R9,R10,LSL#8
AND R10,R6,#&FF0000:LDRB R10,[R7,R10,LSR#16]:ORR R9,R9,R10,LSL#16
                    LDRB R10,[R7,R6,LSR#24]:ORR R9,R9,R10,LSL#24
STR R9,[R3],#4

SUBS R5,R5,#1:BNE LfadeX
ADD R3,R3,#320-244:ADD R11,R11,#320-244
SUBS R4,R4,#1:BNE LfadeY
MOV R15,R14

.FadeScreen       ; diminue un peu l'intensite de la zone de jeu
STR R14,temp14_15

FNwait
BL SwapScreens

SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]
SUB R4,PC,#FNmb(SwapPage):LDR R4,[R4,#FNlb(SwapPage)]
CMP R4,#0:SUBNE R11,R3,#80*1024:ADDEQ R11,R3,#80*1024

BL LessIntensity
BL ViewScreen

LDR R15,temp14_15

;;;;;;;;; Routine FADER (passage d'une image a' l'autre) ;;;;;;;;;;;;;;

.Fader

MOV R9,#60
.Faderlooping

SUB R11,PC,#FNmb(BASESCROLL):LDR R11,[R11,#FNlb(BASESCROLL)]
SUB R12,PC,#FNmb(SwapPage):LDR R12,[R12,#FNlb(SwapPage)]
CMP R12,#0:ADDEQ R12,R11,#80*1024:SUBNE R12,R11,#80*1024

FNwait

MOV R3,#240
.FaderLines

TST R3,#%1
BEQ FadeFromLeft
.FadeFromRight

MOV R4,#10
.FaderColmns

LDMIB R11,{R0,R1,R5,R6,R7,R8}:STMIA R11!,{R0,R1,R5,R6,R7,R8}

SUBS R4,R4,#1
BNE FaderColmns

ADD R4,R12,#240
LDR R4,[R4,-R9,LSL#2]:STR R4,[R11],#320-240

B endOfLineFade
.FadeFromLeft

ADD R11,R11,#240

MOV R4,#10
.FaderColmns2

LDMDB R11,{R0,R1,R5,R6,R7,R8}:STMDA R11!,{R0,R1,R5,R6,R7,R8}

SUBS R4,R4,#1
BNE FaderColmns2

LDR R4,[R12,R9,LSL#2]:STR R4,[R11],#320

.endOfLineFade
ADD R12,R12,#320

SUBS R3,R3,#1
BNE FaderLines

SUBS R9,R9,#1
BPL Faderlooping

MOV R15,R14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.IntermedeScr           ; passe de la presentation au jeu
STR R14,temp14_31

BL SwapScreens   ; echange ecrans,diminue l'intensite'
BL SCROLL

SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]:MOV R11,R3
BL LessIntensity
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]:MOV R11,R3
BL LessIntensity
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]:MOV R11,R3
BL LessIntensity

SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
CMP R0,#5:BPL noIntermede
SUB R0,R0,#1
BL InitInstr

MOV R13,R0,LSL#1
MOV R0,R13:MOV R1,#140:MOV R2,#116:BL PutDemoBlocks
ADD R0,R13,#1:MOV R1,#20:MOV R2,#12:BL PutDemoBlocks

BL SwapScreens
BL Fader         ; et fait apparaitre l'ecran

; Affiche two big blocks
SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
CMP R0,#1:MOVEQ R2,#10:CMP R0,#2:MOVEQ R2,#9
CMP R0,#3:MOVEQ R2,#6:CMP R0,#4:MOVPL R2,#5
MOV R0,#140:MOV R1,#12:BL ViewBigBlock

SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
CMP R0,#1:MOVEQ R2,#8:CMP R0,#2:MOVEQ R2,#4
CMP R0,#3:MOVEQ R2,#7:CMP R0,#4:MOVPL R2,#3
MOV R0,#20:MOV R1,#116:BL ViewBigBlock

MOV R1,#29:MOV R2,#28:BL PaintChars
MOV R0,#62:MOV R1,#221:ADR R2,PressFire_txt:BL WriteBlackString
MOV R0,#62:MOV R1,#221:ADR R2,PressFire_txt:MOV R4,#0:BL WriteString
MOV R1,#37:MOV R2,#37:BL PaintChars

;Affiche les infos

BL SaveTwoLines
SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
BL SaveBehindArrows                 ; sauvegarde zones d'ecran des fleches
MOV R0,#0:STR R0,flashArrows        ; pour activer les fleches

.WaitFirePressed     ; attend la touche FIRE
FNwait
SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
BL LoadBehindArrows       ; recharge zones d'ecran des fleches
LDR R0,flashArrows:ADD R0,R0,#1:STR R0,flashArrows    ; flash arrows
TST R0,#%01000:BEQ noArrows
TST R0,#%100000
SUB R0,PC,#FNmb(WhichLevel):LDR R0,[R0,#FNlb(WhichLevel)]
MOVEQ R1,#0:MOVNE R1,#1:BL PutArrows ; red or green arrows?
.noArrows
BL Instructions

BL ReadKeyJoy
ADD R0,PC,#FNmb(Player1flag):LDRB R0,[R0,#FNlb(Player1flag)]
ADD R1,PC,#FNmb(Player2flag):LDRB R1,[R1,#FNlb(Player2flag)]
AND R0,R0,R1:TST R0,#%10000:BNE WaitFirePressed

BL SwapScreens
BL SCROLL      ;draw PlayScreen
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]:MOV R11,R3
BL LessIntensity
BL SwapScreens
BL AppearPlayScreen

BL SwapScreens
.noIntermede
BL SCROLL      ;draw PlayScreen
BL SwapScreens
BL AppearPlayScreen

LDR R15,temp14_31

.temp14_31 EQUD 0

.flashArrows EQUD 0

; Pour les niveaux 1-4 il y a une presentation des blocs a' eliminer

;;;;;;; Text Levels ;;;;;;

.PressFire_txt EQUS "PRESS FIRE"+CHR$0:ALIGN

.Lev1_txtA                                   ; GreenChem & CFC
EQUS "                    "
EQUS "THROW THIS CHEMICAL SUBSTANCE AWAY              "+CHR$0:ALIGN
.Lev1_txtB
EQUS "                    "
EQUS "DESTROY CFC BY PUSHING IT FROM THE TOP          "+CHR$0:ALIGN
.Lev2_txtA                                   ; Radioactif & RedChemic
EQUS "                    "
EQUS "CRUSH THE URANIUM WHEN NOT NEAR ANOTHER ONE     "+CHR$0:ALIGN
.Lev2_txtB
EQUS "                    "
EQUS "CRUSH BUT DONT THROW THIS REACTIVE THING AWAY   "+CHR$0:ALIGN
.Lev3_txtA                                   ; BATTERY & DDT
EQUS "                    "
EQUS "CRUSH BATTERY FROM THE TOP OR FROM THE BOTTOM   "+CHR$0:ALIGN
.Lev3_txtB
EQUS "                    "
EQUS "DESTROY IT ONLY WHEN NEAR ANOTHER DDT BLOCK     "+CHR$0:ALIGN
.Lev4_txtA                                   ; Alu & Poison
EQUS "                    "
EQUS "FLING THE ALU AGAINST THE ELECTRIC BORDER       "+CHR$0:ALIGN
.Lev4_txtB
EQUS "                    "
EQUS "BREAK POISON WHEN NEAR AN ALUMINIUM BLOCK       "+CHR$0:ALIGN

.Demo_blocks
.Lev1_dmo                                    ; -1=no block
EQUB 00:EQUB 00:EQUB 00:EQUB 00
EQUB 00:EQUB -1:EQUB -1:EQUB 00
EQUB 00:EQUB 08:EQUB -1:EQUB 08
EQUB 00:EQUB 00:EQUB 00:EQUB -1

EQUB 00:EQUB 00:EQUB -1:EQUB 00
EQUB 00:EQUB -1:EQUB 10:EQUB -1
EQUB 00:EQUB -1:EQUB 00:EQUB -1
EQUB 00:EQUB 00:EQUB 00:EQUB 00

.Lev2_dmo
EQUB 00:EQUB -1:EQUB -1:EQUB -1
EQUB -1:EQUB 04:EQUB -1:EQUB 00
EQUB -1:EQUB 00:EQUB 04:EQUB -1
EQUB 00:EQUB -1:EQUB 00:EQUB 00

EQUB 00:EQUB 00:EQUB 00:EQUB 00
EQUB 00:EQUB 09:EQUB -1:EQUB 09
EQUB 00:EQUB 09:EQUB -1:EQUB -1
EQUB 00:EQUB -1:EQUB -1:EQUB 00

.Lev3_dmo
EQUB -1:EQUB -1:EQUB 00:EQUB -1
EQUB -1:EQUB -1:EQUB 07:EQUB 00
EQUB 07:EQUB 07:EQUB -1:EQUB -1
EQUB 00:EQUB 00:EQUB -1:EQUB -1

EQUB -1:EQUB -1:EQUB -1:EQUB 00
EQUB 00:EQUB -1:EQUB 06:EQUB 00
EQUB 00:EQUB 00:EQUB 06:EQUB -1
EQUB 00:EQUB 00:EQUB -1:EQUB -1

.Lev4_dmo
EQUB -1:EQUB 00:EQUB -1:EQUB 00
EQUB -1:EQUB 05:EQUB 03:EQUB -1
EQUB 03:EQUB -1:EQUB -1:EQUB 00
EQUB 00:EQUB -1:EQUB 00:EQUB 00

EQUB 22:EQUB 00:EQUB 05:EQUB -1
EQUB 22:EQUB -1:EQUB 00:EQUB -1
EQUB 22:EQUB -1:EQUB 05:EQUB -1
EQUB 22:EQUB -1:EQUB -1:EQUB -1

.ArrowsList    ; 4 rouges,4 vertes (RGHT,LEFT,UP,DOWN)
.Lev1_arr
EQUB 2:EQUB 0:EQUB 3     ; x,y (0..3) & direction (0..3)
EQUB 6+2:EQUB 5+2:EQUB 1
EQUB 6+3:EQUB 5+3:EQUB 2
EQUB 2:EQUB 0:EQUB 3

EQUB 2:EQUB 1:EQUB 0
EQUB 2:EQUB 1:EQUB 1
EQUB 6+1:EQUB 5+1:EQUB 3
EQUB 2:EQUB 1:EQUB 1
.Lev2_arr
EQUB 6+1:EQUB 5+1:EQUB 0
EQUB 6+1:EQUB 5+1:EQUB 1
EQUB 2:EQUB 1:EQUB 1
EQUB 1:EQUB 3:EQUB 2

EQUB 6+1:EQUB 5+0:EQUB 3
EQUB 6+2:EQUB 5+1:EQUB 3
EQUB 6+3:EQUB 5+2:EQUB 1
EQUB 3:EQUB 2:EQUB 2
.Lev3_arr
EQUB 1:EQUB 1:EQUB 0
EQUB 3:EQUB 2:EQUB 1
EQUB 6+2:EQUB 5+2:EQUB 2
EQUB 6+1:EQUB 5+1:EQUB 0

EQUB 2:EQUB 0:EQUB 3
EQUB 2:EQUB 3:EQUB 2
EQUB 6+0:EQUB 5+1:EQUB 3
EQUB 6+2:EQUB 5+2:EQUB 1
.Lev4_arr
EQUB 3:EQUB 0:EQUB 1
EQUB 2:EQUB 3:EQUB 2
EQUB 6+0:EQUB 5+1:EQUB 3
EQUB 6+0:EQUB 5+1:EQUB 3

EQUB 2:EQUB 2:EQUB 1
EQUB 6+3:EQUB 5+1:EQUB 1
EQUB 2:EQUB 2:EQUB 1
EQUB 2:EQUB 2:EQUB 1

.PutDemoBlocks  ; input R0=which block(0..7) , R1,R2=pos X,Y on screen
ADR R3,Demo_blocks:ADD R3,R3,R0,LSL#4
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADD R0,R0,R1:ADD R0,R0,R2,LSL#8:ADD R0,R0,R2,LSL#6
LDR R1,GraphAdress

MOV R4,#4
.DemoBlockY
MOV R5,#4
.DemoBlockX
LDRB R6,[R3],#1
CMP R6,#255:BEQ noDemoBlock
ADD R7,R1,R6,LSL#8:ADD R7,R7,R6,LSL#7:ADD R7,R7,R6,LSL#4

MOV R6,#20     ; 20 lines per every block
.DemoBlockLines
LDMIA R7!,{R8-R12}:STMIA R0,{R8-R12}:ADD R0,R0,#320
SUBS R6,R6,#1:BNE DemoBlockLines
SUB R0,R0,#320*20
.noDemoBlock
ADD R0,R0,#20
SUBS R5,R5,#1:BNE DemoBlockX
SUB R0,R0,#80:ADD R0,R0,#320*20
SUBS R4,R4,#1:BNE DemoBlockY
MOV R15,R14

.GraphAdress EQUD Graph
.ArrowsBAS EQUD Arrows

.PutArrows          ; input R0=level number(1..4) ,R1=0 or 1 (red/green)
SUB R0,R0,#1
ADR R2,ArrowsList:ADD R0,R1,R0,LSL#1:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#2
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADD R0,R0,#12*320:ADD R0,R0,#20

LDR R10,ArrowsBAS:ADD R10,R10,R1,LSL#10:ADD R10,R10,R1,LSL#9:ADD R10,R10,R1,LSL#6

MOV R3,#4 ; 4 arrows
.loopPutArrows
LDRB R4,[R2],#1:LDRB R5,[R2],#1:LDRB R6,[R2],#1       ; read x,y,direction

ADD R11,R0,R4,LSL#4:ADD R11,R11,R4,LSL#2    ; R11=destination address(scr)
ADD R11,R11,R5,LSL#12:ADD R11,R11,R5,LSL#11:ADD R11,R11,R5,LSL#8

CMP R5,#5:ADDPL R11,R11,#320*4

CMP R6,#0:ADDEQ R11,R11,#8
CMP R6,#1:SUBEQ R11,R11,#8
CMP R6,#2:SUBEQ R11,R11,#10*320
CMP R6,#3:ADDEQ R11,R11,#10*320

ADD R6,R6,R6,LSL#2:ADD R6,R6,R6,LSL#2
ADD R6,R10,R6,LSL#4

MOV R4,#20     ; plot arrow
.lPArrY
MOV R5,#5
.lPArrX
LDR R7,[R6],#4
TST R7,#&FF:STRNEB R7,[R11],#4:ADDEQ R11,R11,#4
TST R7,#&FF00:MOVNE R12,R7,LSR#8:STRNEB R12,[R11,#1-4]
TST R7,#&FF0000:MOVNE R12,R7,LSR#16:STRNEB R12,[R11,#2-4]
TST R7,#&FF000000:MOVNE R12,R7,LSR#24:STRNEB R12,[R11,#3-4]

SUBS R5,R5,#1:BNE lPArrX
ADD R11,R11,#320-20
SUBS R4,R4,#1:BNE lPArrY

SUBS R3,R3,#1:BNE loopPutArrows
MOV R15,R14

.SaveBehindArrows   ; input R0=level number(1..4)
SUB R0,R0,#1
ADR R2,ArrowsList:ADD R2,R2,R0,LSL#4:ADD R2,R2,R0,LSL#3
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADD R0,R0,#12*320:ADD R0,R0,#20

LDR R1,BufferAdress

MOV R3,#8 ; 8 arrows
.loopSaveArrows
LDRB R4,[R2],#1:LDRB R5,[R2],#1:LDRB R6,[R2],#1       ; read x,y,direction

ADD R11,R0,R4,LSL#4:ADD R11,R11,R4,LSL#2    ; R11=destination address(scr)
ADD R11,R11,R5,LSL#12:ADD R11,R11,R5,LSL#11:ADD R11,R11,R5,LSL#8

CMP R5,#5:ADDPL R11,R11,#320*4

CMP R6,#0:ADDEQ R11,R11,#8
CMP R6,#1:SUBEQ R11,R11,#8
CMP R6,#2:SUBEQ R11,R11,#10*320
CMP R6,#3:ADDEQ R11,R11,#10*320

MOV R4,#20     ; save scr
.lPArrY2
LDMIA R11,{R5-R9}:STMIA R1!,{R5-R9}:ADD R11,R11,#320
SUBS R4,R4,#1:BNE lPArrY2
SUBS R3,R3,#1:BNE loopSaveArrows
MOV R15,R14

.LoadBehindArrows   ; input R0=level number(1..4)
SUB R0,R0,#1
ADR R2,ArrowsList:ADD R2,R2,R0,LSL#4:ADD R2,R2,R0,LSL#3
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADD R0,R0,#12*320:ADD R0,R0,#20

LDR R1,BufferAdress

MOV R3,#8 ; 8 arrows
.loopLoadArrows
LDRB R4,[R2],#1:LDRB R5,[R2],#1:LDRB R6,[R2],#1       ; read x,y,direction

ADD R11,R0,R4,LSL#4:ADD R11,R11,R4,LSL#2    ; R11=destination address(scr)
ADD R11,R11,R5,LSL#12:ADD R11,R11,R5,LSL#11:ADD R11,R11,R5,LSL#8

CMP R5,#5:ADDPL R11,R11,#320*4

CMP R6,#0:ADDEQ R11,R11,#8
CMP R6,#1:SUBEQ R11,R11,#8
CMP R6,#2:SUBEQ R11,R11,#10*320
CMP R6,#3:ADDEQ R11,R11,#10*320

MOV R4,#20     ; save scr
.lPArrY3
LDMIA R1!,{R5-R9}:STMIA R11,{R5-R9}:ADD R11,R11,#320
SUBS R4,R4,#1:BNE lPArrY3
SUBS R3,R3,#1:BNE loopLoadArrows
MOV R15,R14

.BufferAdress EQUD Buffer+2*244*16

.InitInstr        ; input R0=level(0..3)
LDR R1,[PC,R0,LSL#2]
B instr1
EQUD Lev1_txtA
EQUD Lev2_txtA
EQUD Lev3_txtA
EQUD Lev4_txtA
.instr1
LDR R2,[PC,R0,LSL#2]
B instr2
EQUD Lev1_txtB
EQUD Lev2_txtB
EQUD Lev3_txtB
EQUD Lev4_txtB
.instr2
STR R1,txtA_adr
STR R2,txtB_adr
MOV R1,#0:STR R1,finA:STR R1,finB
MOV R15,R14

.txtA_adr EQUD 0
.finA     EQUD 0
.txtB_adr EQUD 0
.finB     EQUD 0

.Instructions
STR R14,temp14_14

BL LoadLine1
MOV R0,#96:ADR R1,txtA_adr:BL PutInstr  ; write 2 texts
BL LoadLine2
MOV R0,#200:ADR R1,txtB_adr:BL PutInstr

LDR R0,txtA_adr:LDR R1,finA:ADD R1,R1,#1:CMP R1,#3:MOVEQ R1,#0:ADDEQ R0,R0,#1
LDRB R2,[R0]:CMP R2,#0:SUBEQ R0,R0,#48 ; end of text?
STR R0,txtA_adr:STR R1,finA

LDR R0,txtB_adr:LDR R1,finB:ADD R1,R1,#1:CMP R1,#3:MOVEQ R1,#0:ADDEQ R0,R0,#1
LDRB R2,[R0]:CMP R2,#0:SUBEQ R0,R0,#48
STR R0,txtB_adr:STR R1,finB

LDR R15,temp14_14

.PutInstr      ; input R0=delta y from top , R1=A or B adress
SUB R2,PC,#FNmb(BASESCROLL):LDR R2,[R2,#FNlb(BASESCROLL)]
ADD R2,R2,R0,LSL#8:ADD R0,R2,R0,LSL#6

LDR R2,MarcharsAdrs

LDMIA R1,{R5,R6}

MOV R3,#61
.lPutInstr
ADD R6,R6,#1:CMP R6,#3:MOVEQ R6,#0:ADDEQ R5,R5,#1

LDRB R10,[R5] ;read char
CMP R10,#0:SUBEQ R5,R5,#48:LDREQB R10,[R5]
CMP R10,#32:BEQ nodrw:SUB R10,R10,#65:ADD R10,R10,R10,LSL#1
ADD R10,R2,R10,LSL#6
ADD R10,R10,R6,LSL#2

MOV R4,#16
.lPutYi
LDR R11,[R10],#12
TST R11,#&FF:STRNEB R11,[R0],#320:ADDEQ R0,R0,#320
TST R11,#&FF00:MOVNE R12,R11,LSR#8:STRNEB R12,[R0,#1-320]
TST R11,#&FF0000:MOVNE R12,R11,LSR#16:STRNEB R12,[R0,#2-320]
TST R11,#&FF000000:MOVNE R12,R11,LSR#24:STRNEB R12,[R0,#3-320]
SUBS R4,R4,#1:BNE lPutYi
SUB R0,R0,#320*16
.nodrw
ADD R0,R0,#4
SUBS R3,R3,#1:BNE lPutInstr
MOV R15,R14

.SaveTwoLines
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,BfrAds
ADD R0,R0,#320*96
MOV R2,#16             ; first line
.lsve1

MOV R3,#61
.lsve11
LDR R4,[R0],#4:STR R4,[R1],#4
SUBS R3,R3,#1:BNE lsve11

ADD R0,R0,#320-244
SUBS R2,R2,#1:BNE lsve1
ADD R0,R0,#320*(200-16-96)

MOV R2,#16             ; second line
.lsve2
MOV R3,#61
.lsve21
LDR R4,[R0],#4:STR R4,[R1],#4
SUBS R3,R3,#1:BNE lsve21

ADD R0,R0,#320-244
SUBS R2,R2,#1:BNE lsve2
MOV R15,R14

.LoadLine1
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,BfrAds
ADD R0,R0,#320*96
MOV R2,#16             ; first line
.llad1
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R13}:STMIA R0!,{R3-R13}

ADD R0,R0,#320-244
SUBS R2,R2,#1:BNE llad1
MOV R15,R14

.LoadLine2
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,BfrAds:ADD R1,R1,#244*16
ADD R0,R0,#320*200
MOV R2,#16             ; second line
.llad2
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R13}:STMIA R0!,{R3-R13}

ADD R0,R0,#320-244
SUBS R2,R2,#1:BNE llad2
MOV R15,R14

.BfrAds EQUD Buffer
.MarcharsAdrs EQUD Chars
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.AppearPlayScreen
SUB R0,PC,#FNmb(SwapPage):LDR R0,[R0,#FNlb(SwapPage)]
CMP R0,#0
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADDEQ R1,R0,#80*1024:SUBNE R1,R0,#80*1024

MOV R3,#30:MOV R4,#30:MOV R10,#1:MOV R11,#0:MOV R8,#1:MOV R9,#1

MOV R2,#&E40
.LoopApp2

MUL R5,R2,R2:MUL R5,R2,R2:MUL R5,R2,R2:MUL R5,R2,R2   ; little pause
MUL R5,R2,R2:MUL R5,R2,R2:MUL R5,R2,R2:MUL R5,R2,R2

ADD R5,R0,R3,LSL#2:ADD R5,R5,R4,LSL#8:ADD R5,R5,R4,LSL#10 ;write pos
ADD R6,R1,R3,LSL#2:ADD R6,R6,R4,LSL#8:ADD R6,R6,R4,LSL#10 ;read  pos

LDR R7,[R6],#320:STR R7,[R5],#320:LDR R7,[R6],#320:STR R7,[R5],#320
LDR R7,[R6],#320:STR R7,[R5],#320:LDR R7,[R6]:STR R7,[R5]

ADD R3,R3,R10:ADD R4,R4,R11

SUBS R8,R8,#1:BNE noChangeAngle
CMP R10,#0:BEQ vertChange
MOV R10,#0:MOVMI R11,#1:MVNPL R11,#0
B endOfChangeAngle
.vertChange
CMP R11,#0
MOV R11,#0:MOVPL R10,#1:MVNMI R10,#0:ADD R9,R9,#1
.endOfChangeAngle
MOV R8,R9
.noChangeAngle
SUBS R2,R2,#1
BNE LoopApp2

MOV R15,R14

;;;;;;; Routine qui affiche un bloc du jeu pour instructions ;;;;;;;;

.ViewBigBlock           ; R0,R1 = x,y ; R2 = block number

SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]
ADD R12,R3,R0:ADD R12,R12,R1,LSL#8:ADD R12,R12,R1,LSL#6 ; right pos on screen
LDR R3,GraphBAS2
ADD R3,R3,R2,LSL#8:ADD R3,R3,R2,LSL#7:ADD R11,R3,R2,LSL#4

MOV R10,#8
.lViewBlock_z
FNwait
RSB R2,R10,#19
.lViewBlock_y
RSB R3,R10,#19
.lViewBlock_x
ADD R4,R2,R3,LSL#4:ADD R4,R4,R3,LSL#2  ; read right pixel
LDRB R4,[R11,R4]
ORR R4,R4,R4,LSL#8:ORR R4,R4,R4,LSL#16    ; fill word with byte

ADD R5,R12,R2,LSL#2:ADD R5,R5,R3,LSL#10:ADD R5,R5,R3,LSL#8

STR R4,[R5,#000]:STR R4,[R5,#320]:STR R4,[R5,#640]:STR R4,[R5,#960]
SUB R3,R3,#1:CMP R3,R10:BPL lViewBlock_x
SUB R2,R2,#1:CMP R2,R10:BPL lViewBlock_y
SUBS R10,R10,#1:BPL lViewBlock_z

MOV R15,R14

.GraphBAS2 EQUD Graph
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.WriteBlackFrame                                              ;;;;;;;;;;;;
                                                              ; R0= x    ;
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]     ; R1= y    ;
ADD R3,R3,R0                                                  ; R2= char ;
ADD R3,R3,R1,LSL#8                                            ;;;;;;;;;;;;
ADD R3,R3,R1,LSL#6
ADD R3,R3,#12

LDR R13,CharBAS
ADD R13,R13,R2,LSL#7
ADD R13,R13,R2,LSL#6

MOV R4,#16
.ioda2

MOV R5,#11
.diopA2
LDRB R2,[R13],#1:CMP R2,#0:BEQ noPn

SUB R8,R3,R5

LDR R2,theFaTab

LDRB R12,[R8,#+960+3]:LDRB R12,[R2,R12]:STRB R12,[R8,#+960+3]

MOV R12,#0
STRB R12,[R8,#-1]
STRB R12,[R8,#+1]
STRB R12,[R8,#+320]
STRB R12,[R8,#-320]

.noPn
SUBS R5,R5,#1:BNE diopA2

ADD R13,R13,#1
ADD R3,R3,#320

SUBS R4,R4,#1:BNE ioda2
B MoveCursor2

.theFaTab EQUD FadeTable

.WriteFadeFrame                                               ;;;;;;;;;;;;
                                                              ; R0= x    ;
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]     ; R1= y    ;
ADD R3,R3,R0                                                  ; R2= char ;
ADD R3,R3,R1,LSL#8                                            ;;;;;;;;;;;;
ADD R3,R3,R1,LSL#6
ADD R3,R3,#12

LDR R13,CharBAS
ADD R13,R13,R2,LSL#7
ADD R13,R13,R2,LSL#6

MOV R4,#16
.ioda3

MOV R5,#11
.diopA3
LDRB R2,[R13],#1:CMP R2,#0:BEQ noPn3

SUB R8,R3,R5

LDR R2,theFaTab

LDRB R12,[R8,#1]:LDRB R12,[R2,R12]:STRB R12,[R8,#1]
LDRB R12,[R8,#-1]:LDRB R12,[R2,R12]:STRB R12,[R8,#-1]
LDRB R12,[R8,#320]:LDRB R12,[R2,R12]:STRB R12,[R8,#320]
LDRB R12,[R8,#-320]:LDRB R12,[R2,R12]:STRB R12,[R8,#-320]
LDRB R12,[R8,#2]:LDRB R12,[R2,R12]:STRB R12,[R8,#2]
LDRB R12,[R8,#-2]:LDRB R12,[R2,R12]:STRB R12,[R8,#-2]
LDRB R12,[R8,#640]:LDRB R12,[R2,R12]:STRB R12,[R8,#640]
LDRB R12,[R8,#-640]:LDRB R12,[R2,R12]:STRB R12,[R8,#-640]

.noPn3
SUBS R5,R5,#1:BNE diopA3

ADD R13,R13,#1
ADD R3,R3,#320

SUBS R4,R4,#1:BNE ioda3
B MoveCursor3

; ; ; ; ; ; ;

.CharBAS EQUD Chars
.random EQUD -1                          ; Ecrit du texte de facon etrange

.WriteRand                                                    ;;;;;;;;;;;;
                                                              ; R0= x    ;
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]     ; R1= y    ;
ADD R3,R3,R0                                                  ; R2= char ;
ADD R3,R3,R1,LSL#8                                            ;;;;;;;;;;;;
ADD R3,R3,R1,LSL#6
ADD R3,R3,#12

LDR R13,CharBAS
ADD R13,R13,R2,LSL#7
ADD R13,R13,R2,LSL#6

LDR R9,random

MOV R4,#16
.ioda

MOV R5,#11
.diopA
LDRB R2,[R13],#1:CMP R2,#0:BEQ noPs

AND R6,R9,R14
SUB R6,R6,R14,LSR#1

ADD R8,R6,R0
CMP R8,#231:BCS noPs     ; TEST X

ADD R9,R9,R9,ROR#1    ; change rnd value

AND R7,R9,R14
SUB R7,R7,R14,LSR#1
ADD R8,R7,R1
CMP R8,#222:BCS noPs     ; TEST Y

ADD R8,R6,R7,LSL#8
ADD R8,R8,R7,LSL#6
SUB R8,R8,R5

STRB R2,[R3,R8]      ; plot point

.noPs
SUBS R5,R5,#1:BNE diopA

ADD R13,R13,#1
ADD R3,R3,#320

SUBS R4,R4,#1:BNE ioda

STR R9,random
B MoveCursor

.WriteString        ; R0 = DELTAx ; R1= DELTAy
STR R14,temp14_14   ; R2= pointer to string  ; input R4=chaos
MOV R11,R2
MOV R14,R4
MOV R10,R0
.nxtLetter
LDRB R2,[R11],#1
CMP R2,#0:LDREQ R15,temp14_14    ; quit if code=0
CMP R2,#32:BEQ MoveCursor
SUBS R2,R2,#65
ADDMI R2,R2,#43
B WriteRand

.MoveCursor
ADD R10,R10,#12
MOV R0,R10
B nxtLetter

.WriteBlackString   ; R0 = DELTAx ; R1= DELTAy
STR R14,temp14_14   ; R2= pointer to string
MOV R11,R2
MOV R10,R0
.nxtLetter2
LDRB R2,[R11],#1
CMP R2,#0:LDREQ R15,temp14_14    ; quit if code=0
CMP R2,#32:BEQ MoveCursor2
SUBS R2,R2,#65
ADDMI R2,R2,#43
B WriteBlackFrame

.MoveCursor2
ADD R10,R10,#12
MOV R0,R10
B nxtLetter2

.WriteFadeString    ; R0 = DELTAx ; R1= DELTAy
STR R14,temp14_14   ; R2= pointer to string
MOV R11,R2
MOV R10,R0
.nxtLetter3
LDRB R2,[R11],#1
CMP R2,#0:LDREQ R15,temp14_14    ; quit if code=0
CMP R2,#32:BEQ MoveCursor3
SUBS R2,R2,#65
ADDMI R2,R2,#43
B WriteFadeFrame

.MoveCursor3
ADD R10,R10,#12
MOV R0,R10
B nxtLetter3

.temp14_14 EQUD 0

.BufferBAS EQUD Buffer

.PutPartInBuf           ; R4=Number Of Lines from top
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]

ADD R1,R1,R4,LSL#8
ADD R1,R1,R4,LSL#6

LDR R2,BufferBAS

MOV R13,#80
.nextLineBuf

LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDR R3,[R1],#320-240:STR R3,[R2],#4

SUBS R13,R13,#1
BNE nextLineBuf

MOV R15,R14

.PutAllInOther
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]

SUB R2,PC,#FNmb(SwapPage):LDR R2,[R2,#FNlb(SwapPage)]
CMP R2,#0:ADDEQ R2,R1,#80*1024:SUBNE R2,R1,#80*1024

MOV R13,#240
.nextLineOth2

LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
LDR R3,[R1],#320-240:STR R3,[R2],#320-240

SUBS R13,R13,#1
BNE nextLineOth2
MOV R15,R14

.CopyScreen
SUB R1,PC,#FNmb(ScreenStartAdr):LDR R1,[R1,#FNlb(ScreenStartAdr)]
ADD R2,R1,#80*1024
MOV R0,#2*1024
.lCopyScr
LDMIA R1!,{R3-R12}:STMIA R2!,{R3-R12}
SUBS R0,R0,#1:BNE lCopyScr
MOV R15,R14

.GetPartFromBuf          ; R4=Number Of Lines from top
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]

ADD R1,R1,R4,LSL#8
ADD R1,R1,R4,LSL#6

LDR R2,BufferBAS

MOV R13,#80
.nextLineBuf2

LDMIA R2!,{R3-R12}:STMIA R1!,{R3-R12}
LDMIA R2!,{R3-R12}:STMIA R1!,{R3-R12}
LDMIA R2!,{R3-R12}:STMIA R1!,{R3-R12}
LDMIA R2!,{R3-R12}:STMIA R1!,{R3-R12}
LDMIA R2!,{R3-R12}:STMIA R1!,{R3-R12}
LDMIA R2!,{R3-R12}:STMIA R1!,{R3-R12}
LDR R3,[R2],#4:STR R3,[R1],#320-240

SUBS R13,R13,#1
BNE nextLineBuf2

MOV R15,R14

.bigia14 EQUD 0

.posxText EQUD 0
.posyText EQUD 0
.poinText EQUD 0
.DeltaTop EQUD 0
.ContBin  EQUD 0

.AfficheText      ; R0=posx,R1=posy,R2=pointerStr
STR R14,bigia14

STR R0,posxText:STR R1,posyText:STR R2,poinText

BL PutAllInOther

LDR R1,posyText

SUB R4,R1,#32:CMP R4,#0:MOVMI R4,#0
CMP R4,#164:MOVPL R4,#164
STR R4,DeltaTop

BL PutPartInBuf

MOV R4,#63:STR R4,ContBin

.Hyperloop
FNwait
BL SwapScreens

LDR R4,DeltaTop:BL GetPartFromBuf
LDR R4,ContBin
LDR R0,posxText:LDR R1,posyText:LDR R2,poinText
BL WriteString

BL ViewScreen

LDR R4,ContBin
CMP R4,#0
MOVNE R4,R4,LSR#1
STRNE R4,ContBin
BNE Hyperloop

LDR R15,bigia14

;;;;;;;;; Efface l'ecran de jeu ;;;;;;;

.EraseBackGround
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]

MOV R2,#0:MOV R3,#0:MOV R4,#0:MOV R5,#0
MOV R6,#0:MOV R7,#0:MOV R8,#0:MOV R9,#0

MOV R10,#240
.Lmotif
STMIA R0!,{R2-R9}:STMIA R0!,{R2-R9}:STMIA R0!,{R2-R9}
STMIA R0!,{R2-R9}:STMIA R0!,{R2-R9}:STMIA R0!,{R2-R9}
STMIA R0!,{R2-R9}:STMIA R0!,{R2-R6}
ADD R0,R0,#320-244
SUBS R10,R10,#1
BNE Lmotif

MOV R15,R14

;;;;;;;;;;;;;;;;;;;;;;;;; Gestion middle Window ;;;;;;;;;;;;;;;;;;;;;;;;

.PutMidWindowInBuffer
MOV R4,#95:B PutPartInBuf

.PutMidWindowOnScreen
MOV R4,#95:B GetPartFromBuf

;;;;;;;;; Ecrit en grand le pourcentage de decontamination ;;;;;;;;;;;;

.WritePourcent    ; input  R0 = number
STR R14,temp14_16

MOV R2,#0   ; extraire dixaines de R0
.andAgain1
CMP R0,#10:ADDPL R2,R2,#1:SUBPL R0,R0,#10:BPL andAgain1

MOV R4,#0:BL AfficheBigNb

MOV R2,R0:MOV R4,#52:BL AfficheBigNb
MOV R2,#10:MOV R4,#52*2:BL AfficheBigNb

LDR R15,temp14_16

.temp14_16 EQUD 0
.Startnumb EQUD Chars+192*26

.AfficheBigNb    ; input   R2=code to write;R4=posX to write
LDR R3,Startnumb
ADD R3,R3,R2,LSL#7
ADD R3,R3,R2,LSL#6
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#&7B00:ADD R1,R1,#&F0:ADD R1,R1,R4

MOV R2,#16
.lOOPY
MOV R9,#12
.lOOPX
LDRB R5,[R3],#1
CMP R5,#0:BEQ noPutPixel

ORR R5,R5,R5,LSL#8:ORR R5,R5,R5,LSL#16   ; fill word with byte

STR R5,[R1,#000]:STR R5,[R1,#320]  ; plot "point"

.noPutPixel
ADD R1,R1,#4
SUBS R9,R9,#1:BNE lOOPX
ADD R1,R1,#320*3-48
SUBS R2,R2,#1:BNE lOOPY
MOV R15,R14

;;;;;;;;;;; AFFICHE HIGH SCORES SUR PAGE DE PRESENTATION ;;;;;;;;;

.temp14_20 EQUD 0
.temp14_21 EQUD 0

.CiclusY EQUD 0
.CiclusT EQUD 0

.WriteScoreTable
STR R14,temp14_21

BL PutAllInOther
BL SwapScreens

MOV R1,#88:STR R1,CiclusY
ADR R2,HiTable:STR R2,CiclusT
.MegaCiclus

LDR R1,CiclusY
LDR R2,CiclusT:ADD R3,R2,#20:STR R3,CiclusT:MOV R0,#8:BL WriteFadeString
LDR R1,CiclusY
ADD R1,R1,#19
STR R1,CiclusY
CMP R1,#226
BMI MegaCiclus

BL ViewScreen

BL CtrlFunctionKeys  ; when key F1,F2 or F4 pressed

BL PutAllInOther
Bl SwapScreens

MOV R1,#10:MOV R2,#10:BL PaintChars
ADR R2,HighScore_txt:MOV R0,#122-13*6:MOV R1,#59:BL WriteFadeString
ADR R2,HighScore_txt:MOV R0,#122-13*6:MOV R1,#60:BL WriteFadeString
ADR R2,HighScore_txt:MOV R0,#122-13*6:MOV R1,#59:MOV R4,#0:BL WriteString

MOV R1,#88:STR R1,CiclusY
ADR R2,HiTable:STR R2,CiclusT
.MegaCiclus2

LDR R1,CiclusY:MOV R1,R1,LSR#3:RSB R1,R1,#48:CMP R1,#30:MOVEQ R1,#29:CMP R1,#27:MOVMI R1,#18:MOV R2,R1:BL PaintChars

LDR R1,CiclusY
LDR R2,CiclusT:ADD R3,R2,#20:STR R3,CiclusT:MOV R0,#8:MOV R4,#0:BL WriteString

LDR R1,CiclusY
ADD R1,R1,#19
STR R1,CiclusY
CMP R1,#226:BMI MegaCiclus2

BL ViewScreen

LDR R15,temp14_21

.HighScore_txt EQUS "BEST PENGUINS"+CHR$0:ALIGN

.HiTable                    ; cree a partir de la 'RealHiScores'
EQUS "20 ARCHIMEDES 40000"+CHR$0
EQUS "16 ARC ANGELS 30000"+CHR$0
EQUS "12   ETERNA   20000"+CHR$0
EQUS "10    MARC    10000"+CHR$0
EQUS "08  ARMANIAC  05000"+CHR$0
EQUS "06 ANGELHEART 02000"+CHR$0
EQUS "05    FRED    01000"+CHR$0
EQUS "04  ACE SOFT  00500"+CHR$0

.RealHiScores                 ;  a' charger du disk (128 bytes)
EQUD 40000:EQUB 20:EQUS "ARC ANGELS"+CHR$0
EQUD 20000:EQUB 10:EQUS "  ETERNA  "+CHR$0
EQUD 10000:EQUB 05:EQUS "ARC ANGELS"+CHR$0
EQUD 08000:EQUB 04:EQUS "  ETERNA  "+CHR$0
EQUD 06000:EQUB 03:EQUS "ARC ANGELS"+CHR$0
EQUD 04000:EQUB 02:EQUS "  ETERNA  "+CHR$0
EQUD 02000:EQUB 01:EQUS "ARC ANGELS"+CHR$0
.lowestScore
EQUD 01000:EQUB 01:EQUS "  ETERNA  "+CHR$0

.TranslateHiScores       ; passe du RealHiScores(numb) au HiTable(chars)
ADR R0,RealHiScores
ADR R1,HiTable
MOV R2,#8    ; 8 scores
.LTransl
LDR R3,[R0],#4

MOV R4,#&2700:ADD R4,R4,#&10        ;=10000

MOV R5,#48  ;=ASC("0")            ;;;; SCORE ;;;;
.myLoop1
CMP R3,R4:SUBPL R3,R3,R4:ADDPL R5,R5,#1:BPL myLoop1
STRB R5,[R1,#14]     ; premier chifre

MOV R5,#48
.myLoop2
CMP R3,#1000:SUBPL R3,R3,#1000:ADDPL R5,R5,#1:BPL myLoop2
STRB R5,[R1,#15]     ; deuxieme

MOV R5,#48
.myLoop3
CMP R3,#100:SUBPL R3,R3,#100:ADDPL R5,R5,#1:BPL myLoop3
STRB R5,[R1,#16]     ; troisieme

MOV R5,#48
.myLoop4
CMP R3,#10:SUBPL R3,R3,#10:ADDPL R5,R5,#1:BPL myLoop4
STRB R5,[R1,#17]

ADD R5,R3,#48:STRB R5,[R1,#18]   ; unites

LDRB R3,[R0],#1

MOV R5,#48                        ;;;; RANK ;;;;
.myLoop5
CMP R3,#10:SUBPL R3,R3,#10:ADDPL R5,R5,#1:BPL myLoop5
STRB R5,[R1,#00]

ADD R5,R3,#48:STRB R5,[R1,#01]

LDRB R3,[R0],#1:STRB R3,[R1,#03]     ; transfer every char
LDRB R3,[R0],#1:STRB R3,[R1,#04]
LDRB R3,[R0],#1:STRB R3,[R1,#05]
LDRB R3,[R0],#1:STRB R3,[R1,#06]
LDRB R3,[R0],#1:STRB R3,[R1,#07]
LDRB R3,[R0],#1:STRB R3,[R1,#08]
LDRB R3,[R0],#1:STRB R3,[R1,#09]
LDRB R3,[R0],#1:STRB R3,[R1,#10]
LDRB R3,[R0],#1:STRB R3,[R1,#11]
LDRB R3,[R0],#2:STRB R3,[R1,#12]

ADD R1,R1,#20 ; next!

SUBS R2,R2,#1
BNE LTransl
MOV R15,R14

.InsertNewHiScore        ; R0 = score , R1 = rank , R2 = pointer to string
ADR R3,RealHiScores
MOV R5,#8
.LsearchBeast
SUBS R5,R5,#1:MOVMI R15,R14
LDR R4,[R3]
CMP R0,R4
ADDMI R3,R3,#16:BMI LsearchBeast

MOV R4,R3

LDMIA R4!,{R6-R9}
.Lexpulsion
SUBS R5,R5,#1:BMI InsertNewDatas
LDMIA R4,{R10-R13}
STMIA R4!,{R6-R9}
MOV R6,R10:MOV R7,R11:MOV R8,R12:MOV R9,R13
B Lexpulsion

.InsertNewDatas
STR R0,[R3],#4:STRB R1,[R3],#1     ; insert score & rank
MOV R5,#10                         ; 10 chars
.loopInsertString
LDRB R4,[R2],#1:STRB R4,[R3],#1    ; insert every char
SUBS R5,R5,#1:BNE loopInsertString

B TranslateHiScores

; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
.LoadScoresTable
MOV R0,#&FF
ADR R1,pointerToFilename
ADR R2,RealHiScores
MOV R3,#0
SWI "OS_File"
MOV R15,R14

.SaveScoresTable
MOV R0,#0
ADR R1,pointerToFilename
ADR R4,RealHiScores
ADD R5,R4,#128
SWI "XOS_File"
MOV R15,R14

.pointerToFilename EQUS "POI.ScoreTable"+CHR$0:ALIGN
; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;

.InsertName
STR R14,temp14_22
BL ResetTrunk

SUB R0,PC,#FNmb(TheScore1):LDR R0,[R0,#FNlb(TheScore1)]
LDR R1,lowestScore
CMP R1,R0:BGT notEnough                ; ctrl if score is good enough
STR R0,newHiScore:MOV R0,#1:STR R0,whoMoves  ; thats player 1
BL InsertHiScore

.notEnough
SUB R0,PC,#FNmb(TheScore2):LDR R0,[R0,#FNlb(TheScore2)]
LDR R1,lowestScore
CMP R1,R0:LDRGT R15,temp14_22          ; ctrl if score is good enough
STR R0,newHiScore:MOV R0,#2:STR R0,whoMoves  ; thats player 2
BL InsertHiScore
LDR R15,temp14_22

.InsertHiScore
STR R14,temp14_22b

MOV R0,#21:SWI "Trk_SetPosition"

BL SetStartScreen
BL AppearStartScr
BL FadeScreen
BL FadeScreen
BL FadeScreen

MOV R1,#10:MOV R2,#10:BL PaintChars
MOV R0,#30:MOV R1,#15:ADR R2,Text8:BL AfficheText        ; Nice score!

MOV R1,#35:MOV R2,#35:BL PaintChars
MOV R0,#30:MOV R1,#50:ADR R2,Text9:BL AfficheText
MOV R0,#30:MOV R1,#70:ADR R2,Text10:BL AfficheText

;;;;;;;;;;;;;;;;;;;;
; affiche Alphabet ;
;;;;;;;;;;;;;;;;;;;;

MOV R1,#37:MOV R2,#37:BL PaintChars  ; white chars

MOV R0,#44:MOV R1,#150:ADR R2,Text11:BL WriteBlackString
MOV R0,#44:MOV R1,#150:ADR R2,Text11:BL AfficheText

MOV R0,#44:MOV R1,#170:ADR R2,Text12:BL WriteBlackString
MOV R0,#44:MOV R1,#170:ADR R2,Text12:BL AfficheText

MOV R0,#44:MOV R1,#190:ADR R2,Text13:BL WriteBlackString
MOV R0,#44:MOV R1,#190:ADR R2,Text13:BL AfficheText

MOV R0,#44:MOV R1,#210:ADR R2,Text14:BL WriteBlackString
MOV R0,#44:MOV R1,#210:ADR R2,Text14:BL AfficheText

MOV R1,#28:MOV R2,#28:BL PaintChars

BL PutAllInOther

BL PutMidWindowInBuffer
BL ResetWinnersName

MOV R0,#0:STR R0,posOfCursor

.InputNameLoop
BL SwapScreens
BL PutMidWindowOnScreen
BL Flashing
BL WriteWinnersName
BL ReadKeyJoy
FNwait
BL EraseCursor
BL ReadMoves

TST R0,#%00010:MVNEQ R1,#0:STREQ R1,CursorDX
TST R0,#%00001:MOVEQ R1,#1:STREQ R1,CursorDX
TST R0,#%00100:MOVEQ R1,#1:STREQ R1,CursorDY
TST R0,#%01000:MVNEQ R1,#0:STREQ R1,CursorDY

BL ChangeCursor

LDR R1,SpySpace
CMP R1,#0:BNE retFromAdd

BL ReadMoves
TST R0,#%10000:MOVEQ R1,#&FF:STREQ R1,SpySpace:BEQ AddCursor
.retFromAdd

BL ViewCursor
BL ViewScreen

BL ReadMoves
TST R0,#%10000:MOVNE R1,#0:STRNE R1,SpySpace

LDR R0,posOfCursor:CMP R0,#10:BMI InputNameLoop     ; dernier char?

BL PutMidWindowOnScreen
BL EraseCursor
MOV R0,#64:MOV R1,#110:ADR R2,WinnersName:BL WriteBlackString
MOV R0,#64:MOV R1,#110:ADR R2,WinnersName:BL AfficheText

LDR R0,newHiScore:SUB R1,PC,#FNmb(WhichLevel):LDR R1,[R1,#FNlb(WhichLevel)]:ADR R2,WinnersName:BL InsertNewHiScore

MOV R10,#25 ; pause
.Lpause3
FNwait
SUBS R10,R10,#1:BNE Lpause3

LDR R15,temp14_22b

.ReadMoves
LDR R0,whoMoves
CMP R0,#1
ADDEQ R0,PC,#FNmb(Player1flag):LDREQB R0,[R0,#FNlb(Player1flag)]
ADDGT R0,PC,#FNmb(Player2flag):LDRGTB R0,[R0,#FNlb(Player2flag)]
MOV R15,R14

.whoMoves   EQUD 0
.newHiScore EQUD 0

.temp14_22 EQUD 0
.temp14_22b EQUD 0

.SpySpace EQUD 0

.Text8
EQUS "CONGRATULATIONS"+CHR$0
.Text9
EQUS " PLEASE  ENTER "+CHR$0
.Text10
EQUS "   YOUR NAME   "+CHR$0
ALIGN
.Text11
EQUS "A B C D E F G"+CHR$0
ALIGN
.Text12
EQUS "H I J K L M N"+CHR$0
ALIGN
.Text13
EQUS "O P Q R S T U"+CHR$0
ALIGN
.Text14
EQUS "V W X Y Z   s"+CHR$0
ALIGN

.WinnersReset EQUS "jjjjjjjjjj"+CHR$0
ALIGN
.WinnersName  EQUS ".........."+CHR$0
ALIGN

.ResetWinnersName
ADR R0,WinnersReset
LDMIA R0!,{R1-R3}:STMIA R0,{R1-R3}
MOV R15,R14

.WriteWinnersName
MOV R0,#64:MOV R1,#110:ADR R2,WinnersName
MOV R4,#0:B WriteString

.posOfCursor EQUD 0
.CursorX EQUD 0
.CursorY EQUD 0
.CursorFX EQUD 0
.CursorFY EQUD 0
.CursorDX EQUD 0
.CursorDY EQUD 0

.ViewCursor
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,CursorFX:LDR R2,CursorX:ADD R1,R1,R2,LSL#4:ADD R1,R1,R2,LSL#3
ADD R1,R1,#44:ADD R0,R0,R1
LDR R1,CursorFY:LDR R2,CursorY:ADD R1,R1,R2,LSL#4:ADD R1,R1,R2,LSL#2
ADD R1,R1,#147:ADD R0,R0,R1,LSL#8:ADD R0,R0,R1,LSL#6

LDR R1,colOne:MOV R2,R1:MOV R3,R1
LDR R4,colTwo:MOV R5,R4:MOV R6,R4

STMIA R0,{R1-R3}:ADD R0,R0,#320
STMIA R0,{R4-R6}:ADD R0,R0,#320*19
STMIA R0,{R4-R6}:ADD R0,R0,#320
STMIA R0,{R1-R3}
MOV R15,R14

.colOne EQUD &FFFFFFFF
.colTwo EQUD &FCFCFCFC

.EraseCursor
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,CursorFX:LDR R2,CursorX:ADD R1,R1,R2,LSL#4:ADD R1,R1,R2,LSL#3
ADD R1,R1,#44:ADD R0,R0,R1
LDR R1,CursorFY:LDR R2,CursorY:ADD R1,R1,R2,LSL#4:ADD R1,R1,R2,LSL#2
ADD R1,R1,#147:ADD R0,R0,R1,LSL#8:ADD R0,R0,R1,LSL#6

SUB R7,PC,#FNmb(SwapPage):LDR R7,[R7,#FNlb(SwapPage)]
CMP R7,#0:SUBNE R7,R0,#80*1024:ADDEQ R7,R0,#80*1024

LDMIA R0,{R10-R12}:ADD R0,R0,#320:STMIA R7,{R10-R12}:ADD R7,R7,#320
LDMIA R0,{R10-R12}:ADD R0,R0,#320*19:STMIA R7,{R10-R12}:ADD R7,R7,#320*19
LDMIA R0,{R10-R12}:ADD R0,R0,#320:STMIA R7,{R10-R12}:ADD R7,R7,#320
LDMIA R0,{R10-R12}:STMIA R7,{R10-R12}
MOV R15,R14

.ChangeCursor
LDR R0,CursorFX
LDR R1,CursorDX
LDR R2,CursorX
ADDS R0,R0,R1,LSL#2
MOVMI R0,#20
SUBMIS R2,R2,#1
MOVMI R2,#0:MOVMI R0,#0
CMP R0,#24:MOVEQ R0,#0
ADDEQ R2,R2,#1
CMP R2,#6:MOVEQ R0,#0
STR R2,CursorX
STR R0,CursorFX
CMP R0,#0:MOVEQ R1,#0
STR R1,CursorDX

LDR R0,CursorFY
LDR R1,CursorDY
LDR R2,CursorY
ADDS R0,R0,R1,LSL#2
MOVMI R0,#16
SUBMIS R2,R2,#1
MOVMI R2,#0:MOVMI R0,#0
CMP R0,#20:MOVEQ R0,#0
ADDEQ R2,R2,#1
CMP R2,#3:MOVEQ R2,#3:MOVEQ R0,#0
STR R2,CursorY
STR R0,CursorFY
CMP R0,#0:MOVEQ R1,#0
STR R1,CursorDY

MOV R15,R14

.AddCursor
LDR R0,CursorFX:CMP R0,#0:BNE retFromAdd
LDR R0,CursorFY:CMP R0,#0:BNE retFromAdd

LDR R0,CursorX
LDR R1,CursorY
ADD R0,R0,R1,LSL#3:SUB R0,R0,R1     ; lettre=X+7*Y
ADD R0,R0,#65     ; on commence avec le 'A'=CHR$(65)
CMP R0,#ASC("Z")+1:MOVEQ R0,#32     ; space
                  :BGT BackSpace    ; code special

ADR R1,WinnersName
LDR R2,posOfCursor
STRB R0,[R1,R2]
ADD R2,R2,#1
STR R2,posOfCursor

B retFromAdd

; ; ; ; ; ; ; ; ; ;

.BackSpace
LDR R2,posOfCursor
SUBS R2,R2,#1:MOVMI R2,#0
STR R2,posOfCursor
B retFromAdd

.FlashingCurs EQUD 0

.Flashing
LDR R0,FlashingCurs
ADD R0,R0,#1
STR R0,FlashingCurs
TST R0,#%1000:MOVEQ R15,R14

SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,posOfCursor
CMP R1,#10:MOVEQ R15,R14 ; end of work
ADD R0,R0,#(110*320+64) AND &FF00:ADD R0,R0,#(110*320+64) AND &FF
ADD R0,R0,R1,LSL#3:ADD R0,R0,R1,LSL#2     ; x12

MOV R4,#16
.lFlsh
LDMIA R0,{R1-R3}:MVN R1,R1:MVN R2,R2:MVN R3,R3:STMIA R0,{R1-R3}:ADD R0,R0,#320
SUBS R4,R4,#1:BNE lFlsh

MOV R15,R14

;;;;;;;;;;;;; PUT START SCREEN WITH EFFECT ;;;;;;;;;;;;;;;

.AppearStartScr
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]

LDR R1,IntroScreenAdr

MOV R3,#0:MOV R4,#0

MVN R11,#0    ; kind of pseudo-random

MOV R2,#32768
.LoopApp

ADD R5,R0,R3,LSL#2:ADD R5,R5,R4,LSL#8:ADD R5,R5,R4,LSL#10

ADD R6,R1,R3,LSL#2:ADD R6,R6,R4,LSL#10:SUB R6,R6,R4,LSL#4:SUB R6,R6,R4,LSL#5

LDR R7,[R6],#244:STR R7,[R5],#320:LDR R7,[R6],#244:STR R7,[R5],#320
LDR R7,[R6],#244:STR R7,[R5],#320:LDR R7,[R6]:STR R7,[R5]

ADD R11,R11,R11,ROR#7
EOR R11,R11,R11,ROR#3

AND R12,R11,#%111000:ADD R3,R3,R12,LSR#3
AND R12,R11,#%111:ADD R4,R4,R12

CMP R3,#61:SUBPL R3,R3,#61
CMP R4,#60:SUBPL R4,R4,#60

SUBS R2,R2,#1
BNE LoopApp

MOV R15,R14

.IntroScreenAdr EQUD Screen

;;;;;;;;;;;;;;;;;;;;; PAINT CHARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.PaintChars             ; input R1,R2   colors up & down
LDR R0,CharsBAS         ; change colours of character set
ADD R1,R1,R1,LSL#1:MOV R1,R1,LSL#2 ; x12
ADD R2,R2,R2,LSL#1:MOV R2,R2,LSL#2 ; x12
MOV R3,#11
MOV R4,#5
LDR R12,DegradesBAS

MOV R5,#51
.ChLoop

MOV R6,R3
MOV R7,R4

MOV R8,#0
.Ipsylon
MOV R9,#12

.nextPixel
LDRB R10,[R0],#1
CMP R10,#0:BEQ blackPoint

CMP R8,#7
ADDPL R10,R6,R1:ADDMI R10,R7,R2
LDRB R10,[R12,R10]

STRB R10,[R0,#-1]
.blackPoint
SUBS R9,R9,#1:BNE nextPixel

CMP R8,#7:SUBPL R6,R6,#1:ADDMI R7,R7,#1

ADD R8,R8,#1
CMP R8,#16:BNE Ipsylon

SUBS R5,R5,#1:BPL ChLoop

MOV R15,R14       ; { end of PaintChars }

.DegradesBAS EQUD Degrades

;;;;;;;;;;;;;;;;;;;;; PASSWORDS ( 1 tous les 5 niveaux = 10 passwords)

.CtrlPassWord           ; output R0=level number
ADR R0,CurrentPassWord
LDMIA R0,{R4,R5}  ; this is the password
MOV R6,#%10000000:ORR R6,R6,R6,LSL#8:ORR R6,R6,R6,LSL#16 ; mask
ORR R4,R4,R6:ORR R5,R5,R6                                ; encode PW

ADR R8,PassWords
MOV R2,#1
MOV R0,#1
.nextPassWord
LDMIA R8!,{R6,R7}
CMP R6,R4:CMPEQ R7,R5:MOVEQ R0,R2   ; ok,right password
ADD R2,R2,#5
CMP R2,#51:BMI nextPassWord         ; try next one
MOV R15,R14
]
Adr_passWords=O%
[OPT PASS

.PassWords
EQUS "nopsword" ; not used (for level 1 no PW)
EQUS "MAGNETIC"
EQUS "MARSUPIL"
EQUS "COPERNIC"
EQUS "PRINTING"
EQUS "UNIVERSE"
EQUS "SEQUENCE"
EQUS "MEPHISTO"
EQUS "SOFTCAKE"
EQUS "METAPSYS"

.CurrentPassWord EQUS "hhhhhhhh  ":ALIGN
.FadeBAS2 EQUD FadeTable

.RequestPassWord        ; Insert a Password
STR R14,temp14_13       ;;;;;;;;;;;;;;;;;;;;;

MOV R0,#15:SWI "OS_Byte" ; flush keyboard buffer

.waitF3Released
MOV R0,#129:MVN R1,#NOT-116:MOV R2,#&FF:SWI "OS_Byte":CMP R1,#&FF:BEQ waitF3Released

LDR R5,FadeBAS2

MOV R6,#18           ; efface fenetre avec bord degrade'
.clsWindow
FNwait
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#160*320:ADD R1,R1,#44
ADD R1,R1,R6:ADD R1,R1,R6,LSL#8:ADD R1,R1,R6,LSL#6
MOV R2,#44:SUB R2,R2,R6,LSL#1
.RequestY
MOV R3,#156:SUB R3,R3,R6,LSL#1
.RequestX
LDRB R4,[R1]
LDRB R4,[R5,R4]   ; read faded colour (diminue intensite' du pixel)
STRB R4,[R1],#1   ; and plot new pixel
SUBS R3,R3,#1:BNE RequestX
ADD R1,R1,#320-156:ADD R1,R1,R6,LSL#1
SUBS R2,R2,#1:BNE RequestY
SUBS R6,R6,#1:BNE clsWindow

MOV R1,#11:MOV R2,#18:BL PaintChars
MOV R0,#60:MOV R1,#165:ADR R2,PW_txt1:BL PrintString
MOV R1,#37:MOV R2,#37:BL PaintChars

MOV R0,#0:STR R0,PointerToPW

.cycleReadPW
MOV R0,#72:MOV R1,#182:ADR R2,CurrentPassWord:BL PrintString

SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#180*320:ADD R1,R1,#320:ADD R1,R1,#72
LDR R2,PointerToPW:ADD R1,R1,R2,LSL#3:ADD R1,R1,R2,LSL#2 ;position cursor

BL CtrlPassWord ; if its a right PW then light chars

CMP R0,#1:MVNNE R2,#0:MOVEQ R2,#&FF:ORR R2,R2,R2,LSL#16

MOV R3,R2:MOV R4,R2
STMIA R1,{R2-R4}:ADD R1,R1,#320*17:STMIA R1,{R2-R4}   ; set cursor

FNwait

SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#180*320:ADD R1,R1,#320:ADD R1,R1,#72
LDR R2,PointerToPW:ADD R1,R1,R2,LSL#3:ADD R1,R1,R2,LSL#2 ;position cursor
MOV R2,#0:MOV R3,#0:MOV R4,#0

STMIA R1,{R2-R4}:ADD R1,R1,#320*17:STMIA R1,{R2-R4}   ; unset cursor

MOV R0,#129:MOV R1,#1:MOV R2,#0:SWI "OS_Byte":CMP R2,#0:BNE notread
MOV R0,R1

CMP R0,#8:BNE noBackSpace:LDR R1,PointerToPW:SUBS R1,R1,#1:MOVMI R1,#0:STR R1,PointerToPW:B cycleReadPW
.noBackSpace
BIC R0,R0,#32
CMP R0,#ASC("A"):BMI cycleReadPW
CMP R0,#ASC("Z"):BGT cycleReadPW

LDR R1,PointerToPW:ADR R2,CurrentPassWord:STRB R0,[R2,R1]
ADD R1,R1,#1:AND R1,R1,#%111
STR R1,PointerToPW  ; next char

.notread
MOV R0,#129:MVN R1,#NOT-114:MOV R2,#&FF:SWI "OS_Byte"   ; start when F1/F2
CMP R1,#&FF:MOVEQ R0,#1:BEQ startGame
            MVN R1,#NOT-115:MOV R2,#&FF:SWI "OS_Byte"
CMP R1,#&FF:MOVEQ R0,#2:BEQ startGame
            MVN R1,#NOT-116:MOV R2,#&FF:SWI "OS_Byte"   ; quit when F3
CMP R1,#&FF:BNE cycleReadPW
.quitRequest
MOV R0,#129:MVN R1,#NOT-116:MOV R2,#&FF:SWI "OS_Byte"
CMP R1,#&FF:BEQ quitRequest
LDR R15,temp14_13

.PW_txt1 EQUS " PASSWORD ":ALIGN
.PointerToPW EQUD 0

;;;;;;;;;;;;;  REVEALING THE PASSWORD after every block of 5 levels

.RevealPassWord
STR R14,temp14_13

BL FadeScreen:BL FadeScreen
BL FadeScreen:BL FadeScreen

SUB R1,PC,#FNmb(WhichLevel):LDR R1,[R1,#FNlb(WhichLevel)]
CMP R1,#50:LDRPL R15,temp14_13 ; end of game!
MOV R12,#0
.nxtReveal
CMP R1,#6:ADDPL R12,R12,#1:SUBPL R1,R1,#5:BPL nxtReveal

ADR R1,PassWords+8:ADD R1,R1,R12,LSL#3:LDMIA R1,{R2,R3}
MOV R6,#%10000000:ORR R6,R6,R6,LSL#8:ORR R6,R6,R6,LSL#16 ; mask
BIC R2,R2,R6:BIC R3,R3,R6 ; decode
ADR R1,PW_txt4+4:STMIA R1,{R2,R3}

MOV R1,#27:MOV R2,#27:BL PaintChars

MOV R0,#8:MOV R1,#050:ADR R2,PW_txt2:MOV R4,#0:BL WriteString
MOV R0,#8:MOV R1,#090:ADR R2,PW_txt3:MOV R4,#0:BL WriteString
MOV R1,#17:MOV R2,#17:BL PaintChars
MOV R0,#8+18:MOV R1,#130:ADR R2,PW_txt4:MOV R4,#0:BL AfficheText
MOV R1,#35:MOV R2,#35:BL PaintChars
MOV R0,#8:MOV R1,#180:ADR R2,PW_txt5:MOV R4,#0:BL WriteString

.waitFirePress
BL ReadKeyJoy
ADD R0,PC,#FNmb(Player1flag):LDRB R0,[R0,#FNlb(Player1flag)]
ADD R1,PC,#FNmb(Player2flag):LDRB R1,[R1,#FNlb(Player2flag)]
AND R0,R0,R1:TST R0,#%10000:BNE waitFirePress

BL FadeScreen:BL FadeScreen
BL FadeScreen:BL FadeScreen

LDR R15,temp14_13

.PW_txt2 EQUS "    REALLY NICE"   +CHR$0:ALIGN
.PW_txt3 EQUS " THE NEXT PASSWORD"+CHR$0:ALIGN
.PW_txt4 EQUS "                  "+CHR$0:ALIGN
.PW_txt5 EQUS "    PRESS  FIRE"   +CHR$0:ALIGN

.TextChallenge
STR R14,temp14_13

BL FadeScreen:BL FadeScreen:BL FadeScreen

MOV R1,#12:MOV R2,#12:BL PaintChars
MOV R0,#20:MOV R1,#50:ADR R2,CH_txt1:MOV R4,#0:BL WriteString

MOV R1,#37:MOV R2,#27:BL PaintChars
MOV R0,#20:MOV R1,#90:ADR R2,CH_txt2:MOV R4,#0:BL WriteString
MOV R0,#20:MOV R1,#120:ADR R2,CH_txt3:MOV R4,#0:BL WriteString

MOV R1,#5:MOV R2,#5:BL PaintChars
MOV R0,#8:MOV R1,#204:ADR R2,PW_txt5:MOV R4,#0:BL WriteString

.waitFirePress2
BL ReadKeyJoy
ADD R0,PC,#FNmb(Player1flag):LDRB R0,[R0,#FNlb(Player1flag)]
ADD R1,PC,#FNmb(Player2flag):LDRB R1,[R1,#FNlb(Player2flag)]
AND R0,R0,R1:TST R0,#%10000:BNE waitFirePress2

BL FadeScreen:BL FadeScreen:BL FadeScreen:BL FadeScreen

LDR R15,temp14_13

.CH_txt1 EQUS "  REVENGE  ZONE"  +CHR$0:ALIGN
.CH_txt2 EQUS " CRUSH  ALL  THE "+CHR$0:ALIGN
.CH_txt3 EQUS "NAUGHTIES YOU CAN"+CHR$0:ALIGN

.IntroChallenge
STR R14,temp14_13
BL SwapScreens
BL SCROLL
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]:MOV R11,R3
BL LessIntensity
BL SwapScreens
BL AppearPlayScreen

BL SwapScreens
BL SCROLL
BL SwapScreens
BL AppearPlayScreen
LDR R15,temp14_13

.Congratulations
STR R14,temp14_13

MOV R0,#27:SWI "Trk_SetPosition" ; complete Jingle

BL FadeScreen:BL FadeScreen:BL FadeScreen

MOV R1,#17:MOV R2,#17:BL PaintChars
MOV R0,#8:MOV R1,#050:ADR R2,CO_txt1:MOV R4,#0:BL WriteString

MOV R1,#7:MOV R2,#5:BL PaintChars
MOV R0,#8:MOV R1,#090:ADR R2,CO_txt2:MOV R4,#0:BL WriteString
MOV R0,#8:MOV R1,#120:ADR R2,CO_txt3:MOV R4,#0:BL WriteString
MOV R0,#8:MOV R1,#150:ADR R2,CO_txt4:MOV R4,#0:BL WriteString

MOV R1,#21:MOV R2,#21:BL PaintChars
MOV R0,#8:MOV R1,#190:ADR R2,PW_txt5:MOV R4,#0:BL WriteString

.waitFirePress3
BL ReadKeyJoy
ADD R0,PC,#FNmb(Player1flag):LDRB R0,[R0,#FNlb(Player1flag)]
ADD R1,PC,#FNmb(Player2flag):LDRB R1,[R1,#FNlb(Player2flag)]
AND R0,R0,R1:TST R0,#%10000:BNE waitFirePress3

BL FadeScreen:BL FadeScreen:BL FadeScreen:BL FadeScreen
LDR R15,temp14_13

.CO_txt1 EQUS " ITS  UNBELIEVABLE"+CHR$0:ALIGN
.CO_txt2 EQUS " YOU HAVE FINISHED"+CHR$0:ALIGN
.CO_txt3 EQUS " THE GAMEjjj BUT I"+CHR$0:ALIGN
.CO_txt4 EQUS " THINK YOU CHEATED"+CHR$0:ALIGN

;;;;;;;;;;;;;;;;;;;;;;;  PAUSE & DEMO MODE

.PutPlaque                          ; input R0 = delta in sprites
LDR R1,PlaquetteBAS
ADD R0,R1,R0

SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#20*320:ADD R1,R1,#92

MOV R2,#20     ; 20 lines
.LoopPlaquette
LDMIA R0!,{R3-R12}:STMIA R1!,{R3-R12}:LDMIA R0!,{R3-R7}:STMIA R1!,{R3-R7}
ADD R1,R1,#320-60
SUBS R2,R2,#1:BNE LoopPlaquette
MOV R15,R14

.PlaquetteBAS EQUD Plaquette
;;;;;;;;;;;;;;;;;; S'occupe de l'option PAUSE ;;;;;;;;;;;;;;;;;;;;;;

.PausedGame
STR R14,temp14_13
MOV R0,#129:MVN R1,#NOT-30:MOV R2,#&FF:SWI "OS_Byte"     ; scan for F12
CMP R1,#&FF:BEQ PausedGame

BL SwapScreens
MOV R0,#3*400:BL PutPlaque
BL SwapScreens

.DownPausedKey
SWI "OS_Mouse"        ; cheat
CMP R2,#%101:MOVEQ R1,#16384:SUBEQ R2,PC,#FNmb(Time):STREQ R1,[R2,#FNlb(Time)]
MOV R0,#129:MVN R1,#NOT-30:MOV R2,#&FF:SWI "OS_Byte"
CMP R1,#&FF:BNE DownPausedKey
.UpPausedKey
MOV R0,#129:MVN R1,#NOT-30:MOV R2,#&FF:SWI "OS_Byte"
CMP R1,#&FF:BEQ UpPausedKey
LDR R15,temp14_13

;;;;;;;; write time sur le tableau de bord  ;;;;;;;;
;;;;; ( routine 'WriteNumber' is at the end ) ;;;;;;

.temp14_13 EQUD 0

.col1 EQUD &FCFCFCFC
      EQUD &FDFDFDFD
      EQUD &FEFEFEFE
      EQUD &FFFFFFFF
.colGold EQUD &F4F4F4F4
         EQUD &F5F5F5F5
         EQUD &F6F6F6F6
         EQUD &F7F7F7F7

.WriteTime
STR R14,temp14_13

BL eraseTime

ADR R4,col1:LDMIA R4,{R4-R7}

BL RefreshTime    ; R8=time

CMP R8,#50*5:CMPNE R8,#50*4:CMPNE R8,#50*3:CMPNE R8,#50*2:CMPNE R8,#50*1:CMPNE R8,#50:CMPNE R8,#0:MOVEQ R1,#27:MOVEQ R2,#40:SWIEQ "Trk_MakeNoise"

MOV R9,#&BB0:ADD R9,R9,#8  ; =3000 ( VSYNC dans une minute = 60*50 )

MOV R0,#0
.moreThan1minute
CMP R8,R9
SUBPL R8,R8,R9
ADDPL R0,R0,#1
BPL moreThan1minute

SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#320*156:ADD R1,R1,#260

BL WriteNumber

MOV R0,#15:ADD R1,R1,#4:TST R8,#%11000:BLNE WriteNumber

MOV R0,#0
.moreThan10secs
CMP R8,#500
SUBPL R8,R8,#500
ADDPL R0,R0,#1
BPL moreThan10secs

ADD R1,R1,#8:BL WriteNumber

MOV R0,#0
.moreThan1sec
CMP R8,#50
SUBPL R8,R8,#50
ADDPL R0,R0,#1
BPL moreThan1sec

ADD R1,R1,#12:BL WriteNumber
LDR R15,temp14_13

.WritePerc
STR R14,temp14_13

BL erasePerc

BL CountBadBlocks
ADD R3,PC,#FNmb(NbOfBadBlocks):LDR R3,[R3,#FNlb(NbOfBadBlocks)]
SUB R2,R3,R0      ; R2=blocks destroyed,R3=total toxic blocs
ADD R2,R2,R2,LSL#2:ADD R2,R2,R2,LSL#2:MOV R2,R2,LSL#3    ; x200

MOV R9,#0
]

FOR a=6 TO 0 STEP -1
[OPT PASS
MOVS R2,R2,LSL#1:CMPCC R2,R3,LSL#8:SUBCS R2,R2,R3,LSL#8:ADDCS R9,R9,#1<<a
]
NEXT a

[OPT PASS

LDR R4,pacer:ADDS R4,R4,#1<<30:STR R4,pacer:MOVNE R9,#0
LDR R8,currentPerc:CMP R8,R9:ADDMI R8,R8,#1:STRMI R8,currentPerc

ADR R4,colGold:LDMIA R4,{R4-R7}

SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#320*128:ADD R1,R1,#260

MOV R0,#0
.moreThan10p
SUBS R8,R8,#10:ADDPL R0,R0,#1:BPL moreThan10p

BL WriteNumber
ADD R0,R8,#10:ADD R1,R1,#12
BL WriteNumber
MOV R0,#14:ADD R1,R1,#12:BL WriteNumber
LDR R15,temp14_13

.pacer EQUD 0
.currentPerc EQUD 0

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;; Routines qui s'occupent d'afficher le score pendant le jeu ;;;;;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.CharsBAS EQUD Chars

.Write                                                       ;;;;;;;;;;;;
                                                             ; R0= x    ;
SUB R3,PC,#FNmb(BASESCROLL):LDR R3,[R3,#FNlb(BASESCROLL)]    ; R1= y    ;
ADD R3,R3,R0                                                 ; R2= char ;
ADD R3,R3,R1,LSL#8                                           ;;;;;;;;;;;;
ADD R3,R3,R1,LSL#6

LDR R0,CharsBAS
ADD R0,R0,R2,LSL#7
ADD R0,R0,R2,LSL#6

LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0!,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}:ADD R3,R3,#320
LDMIA R0,{R4,R5,R6, R7,R8,R9}
STMIA R3,{R4,R5,R6}:ADD R3,R3,#320:STMIA R3,{R7,R8,R9}
MOV R15,R14

;;;; Write a string (without mask) ;;;;

.PrintString         ; input R0,R1=x,y;R2=pointer to str  (max 10 chars)
STR R14,temp14_28

MOV R10,R0:MOV R11,R2:MOV R12,#10

.nxtOne
SUBS R12,R12,#1:LDRMI R15,temp14_28
LDRB R2,[R11],#1:CMP R2,#0:LDREQ R15,temp14_28
CMP R2,#32:MOVEQ R2,#ASC("u")   ; space
MOV R0,R10:ADD R10,R10,#12:SUBS R2,R2,#65:ADDMI R2,R2,#43
BL Write
B nxtOne

.temp14_28 EQUD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.SetScoreChars
 MOV R1,#14:MOV R2,R1:B PaintChars ; set green chars

.temp14_0 EQUD 0          ; Display Score of player 1 / 2 ;
                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.WriteScore
STR R14,temp14_0
 SUB R10,PC,#FNmb(TheScore1):LDR R10,[R10,#FNlb(TheScore1)]
 MOV R1,#37  ; dy from top screen
 BL AfficheScore

 SUB R10,PC,#FNmb(TheScore2):LDR R10,[R10,#FNlb(TheScore2)]
 MOV R1,#180
 BL AfficheScore
LDR R15,temp14_0

.AfficheScore                             ; input R1=dy,R10=score
STR R14,temp14_41
MOV R0,#&2700:ADD R0,R0,#&10  ;=10000

MOV R2,#26
.dixmille
SUBS R10,R10,R0:ADDPL R2,R2,#1:BGT dixmille
ADDNE R10,R10,R0
MOV R0,#248:BL Write

MOV R2,#26
.mille
SUBS R10,R10,#1000:ADDPL R2,R2,#1:BGT mille
ADDNE R10,R10,#1000
MOV R0,#260:BL Write

MOV R2,#26
.cent
SUBS R10,R10,#100:ADDPL R2,R2,#1:BGT cent
ADDNE R10,R10,#100
MOV R0,#272:BL Write

MOV R2,#26
.dix
SUBS R10,R10,#10:ADDPL R2,R2,#1:BGT dix
ADDNE R10,R10,#10
MOV R0,#284:BL Write

ADD R2,R10,#26
MOV R0,#296:BL Write

LDR R15,temp14_41

.temp14_41 EQUD 0

;;;;;;;;;;;;;;;;;;;;;;;;

.ScoresUpDate
STR R14,temp14_30
 BL TotalRefresh
 BL WriteScore:BL SwapScreens:BL WriteScore:BL SwapScreens
LDR R15,temp14_30

.temp14_30 EQUD 0

.inkeyTable
]
Adr_inkey=O%
P%+=1260:O%+=1260
[OPT PASS

.BoundingBox   DCD 1:DCB 0:DCB 0:DCB 0:DCB 0:DCB 3
.MouseMultiply DCB 2:DCB 1:DCB 2
.MousePosition DCB 3:DCB 0:DCB 0:DCB 0:DCB 3:ALIGN

;;;;;;;;;;; Redefine Keys ;;;;;;;;;;;;
.RedefineKeys
STR R14,temp14_26

MOV R0,#21:ADR R1,BoundingBox:  SWI "OS_Word"    ; set mouse
MOV R0,#21:ADR R1,MouseMultiply:SWI "OS_Word"
MOV R0,#21:ADR R1,MousePosition:SWI "OS_Word"

.endOfF4
MOV R0,#129:MVN R1,#NOT(-21):MOV R2,#&FF:SWI "OS_Byte"    ; keyboard scan
CMP R1,#&FF:BEQ endOfF4    ; wait for F4 not pressed

BL EraseBackGround

MOV R1,#37:MOV R2,#34:BL PaintChars

MOV R0,#32:MOV R1,#2:ADR R2,RedText1:BL PrintString
MOV R0,#32:MOV R1,#122:ADR R2,RedText2:BL PrintString

MOV R1,#27:MOV R2,#14:BL PaintChars

MOV R0,#48:MOV R1,#020:ADR R2,RedText3:BL PrintString
MOV R0,#48:MOV R1,#040:ADR R2,RedText4:BL PrintString
MOV R0,#48:MOV R1,#060:ADR R2,RedText5:BL PrintString
MOV R0,#48:MOV R1,#080:ADR R2,RedText6:BL PrintString
MOV R0,#48:MOV R1,#100:ADR R2,RedText7:BL PrintString

MOV R0,#48:MOV R1,#140:ADR R2,RedText3:BL PrintString
MOV R0,#48:MOV R1,#160:ADR R2,RedText4:BL PrintString
MOV R0,#48:MOV R1,#180:ADR R2,RedText5:BL PrintString
MOV R0,#48:MOV R1,#200:ADR R2,RedText6:BL PrintString
MOV R0,#48:MOV R1,#220:ADR R2,RedText7:BL PrintString

BL PutAllInOther

MOV R1,#7:MOV R2,#5:BL PaintChars

;;;Write The Keys
.continueMouse
FNwait
BL SwapScreens

LDR R0,leftKey:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#20:BL PrintString
LDR R0,rightKey:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#40:BL PrintString
LDR R0,upKey:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#60:BL PrintString
LDR R0,downKey:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#80:BL PrintString
LDR R0,pushKey:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#100:BL PrintString

LDR R0,leftKey2:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#140:BL PrintString
LDR R0,rightKey2:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#160:BL PrintString
LDR R0,upKey2:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#180:BL PrintString
LDR R0,downKey2:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#200:BL PrintString
LDR R0,pushKey2:LDR R2,inkeyAdr:MVN R0,R0:ADD R2,R2,R0,LSL#3:ADD R2,R2,R0,LSL#1:MOV R0,#120:MOV R1,#220:BL PrintString

SWI "OS_Mouse"
MOV R1,R1,LSR#6:CMP R1,#9:MOVPL R1,#9:RSB R1,R1,#9:MOV R11,R1 ;mouse Y

SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADD R0,R0,#320*20:ADD R0,R0,#120

CMP R1,#5:ADDPL R1,R1,#1

ADD R1,R1,R1,LSL#2   ;x5

ADD R0,R0,R1,LSL#10
ADD R0,R0,R1,LSL#8

MOV R1,#16        ; HighLight current line
.LoopLight
MOV R5,#10
.LoopHigh
LDMIA R0,{R2-R4}:MVN R2,R2:MVN R3,R3:MVN R4,R4:STMIA R0!,{R2-R4}
SUBS R5,R5,#1:BNE LoopHigh
ADD R0,R0,#320-120
SUBS R1,R1,#1:BNE LoopLight

BL ViewScreen

MOV R0,#121:MOV R1,#3:SWI "OS_Byte" ; keyboard scan
CMP R1,#20:LDREQ R15,temp14_26      ; quit when F4
CMP R1,#255:BEQ continueMouse       ; no key pressed
LDR R2,inkeyAdr:ADD R2,R2,R1,LSL#3:LDRB R2,[R2,R1,LSL#1]
CMP R2,#255:BEQ continueMouse       ; key not acceptable

MVN R1,R1

LDR R2,leftKeyAddr
MOV R3,#9
.LoopCtrlKey
LDR R4,[R2,R3,LSL#2]:CMP R4,R1:BEQ continueMouse ; key not acceptable
SUBS R3,R3,#1:BPL LoopCtrlKey

STR R1,[R2,R11,LSL#2]   ; ok,set key
B continueMouse

.leftKeyAddr EQUD leftKey

.RedText1 EQUS "PLAYER 1"+CHR$0
ALIGN
.RedText2 EQUS "PLAYER 2"+CHR$0
ALIGN
.RedText3 EQUS "LEFT"+CHR$0
ALIGN
.RedText4 EQUS "RIGHT"+CHR$0
ALIGN
.RedText5 EQUS "UP"+CHR$0
ALIGN
.RedText6 EQUS "DOWN"+CHR$0
ALIGN
.RedText7 EQUS "PUSH"+CHR$0
ALIGN

.inkeyAdr EQUD inkeyTable

;;;;;;; Fait une seconde de pause ;;;;;;;
.Wait1Second
STR R14,temp14_26
MOV R4,#3072
.LWait1Second
BL CtrlFunctionKeys
SUBS R4,R4,#1:BNE LWait1Second
LDR R15,temp14_26

.temp14_26 EQUD 0

     \ \ Ctrl if F1,F2 or F4 pressed \ \

.CtrlFunctionKeys
MOV R0,#129:MVN R1,#NOT-114:MOV R2,#&FF:SWI "OS_Byte"      ;F1 (1 player)
CMP R1,#&FF:MOVEQ R0,#1:BEQ quitPresentation
            MVN R1,#NOT-115:MOV R2,#&FF:SWI "OS_Byte"      ;F2 (2 players)
CMP R1,#&FF:MOVEQ R0,#2:BEQ quitPresentation
            MVN R1,#NOT-116:MOV R2,#&FF:SWI "OS_Byte"      ;F3 (password)
CMP R1,#&FF:MOVEQ R0,#3:BEQ quitPresentation
            MVN R1,#NOT-021:MOV R2,#&FF:SWI "OS_Byte"      ;F4 (redefine)
CMP R1,#&FF:MOVEQ R0,#4:BEQ quitPresentation
            MVN R1,#NOT-031:MOV R2,#&FF:SWI "OS_Byte"      ; MUSIC ON  F10
CMP R1,#&FF:SWIEQ "Trk_PlayMusic"
            MVN R1,#NOT-029:MOV R2,#&FF:SWI "OS_Byte"      ; MUSIC OFF F11
CMP R1,#&FF:SWIEQ "Trk_PauseMusic"
MOV R15,R14

;;;;;;;;;;;;;;;;;;;;;; PRESENTATION  ;;;;;;;;;;;;;;;;;;;;
;;;;; cycle * Page de presentation + effet avec titre   ;
;;;;;;;;;   *         "              avec HiScores      ;
;;;;;;;;;;; * Automatic demo mode   ;;;;;;;;;;;;;;;;;;;;;

.temp14_23 EQUD 0

.PresentationInitiale
STR R14,temp14_23

.forever
BL SetStartScreen

BL AppearStartScr
BL AppearTitle
BL ScrollText
BL FadeScreen
BL FadeScreen
BL WriteScoreTable
BL Wait1Second
BL Wait1Second
BL Wait1Second
BL Wait1Second
BL Wait1Second
BL Wait1Second
BL Wait1Second
BL Wait1Second
BL DemoMode
B forever

.quitPresentation   ; output R0 = 1,2 or 4 (function Key)
LDR R15,temp14_23

.ScrollText             ;;;;;;;;;; Petit message d'info
STR R14,temp14_24

MOV R0,#0:STR R0,ContaS:STR R0,Finer       ; init

MOV R4,#160:BL PutPartInBuf
MOV R1,#13:MOV R2,#13:BL PaintChars

.loopTextScroll
FNwait

BL CtrlFunctionKeys

MOV R4,#160:BL GetPartFromBuf    ; rewrite background

BL SinPrint

LDR R1,ContaS
LDR R0,Finer
ADD R0,R0,#4
CMP R0,#16:MOVEQ R0,#0:ADDEQ R1,R1,#1
STR R0,Finer:STR R1,ContaS
CMP R1,#120                   ; Nb of chars
BMI loopTextScroll

LDR R15,temp14_24

.Sinus
]
Adr_sinus=O%
P%+=244*2:O%+=244*2
[OPT PASS

.ContaS EQUD 0      ;0-len(string)
.Finer  EQUD 0      ;0-12
.MoveS  EQUD 0

.SinPrint
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#196*320

LDR R4,MarcharsBABAS
ADR R5,Sinus
ADR R9,TextToScroll

LDR R7,ContaS
LDR R8,Finer

LDR R0,MoveS
ADD R5,R5,R0
ADD R0,R0,#6                  ; speed of change
CMP R0,#244:SUBPL R0,R0,#244
STR R0,MoveS

MOV R3,#0
.loopx

CMP R8,#11
BPL nodraw

LDRB R12,[R5,R3]

ADD R6,R1,R3
ADD R6,R6,R12,LSL#8
ADD R6,R6,R12,LSL#6

LDRB R10,[R9,R7]
CMP R10,#32:BEQ nodraw:SUBNE R10,R10,#65
ADD R10,R10,R10,LSL#1:ADD R10,R8,R10,LSL#6     ; x192
ADD R10,R10,R4

MOV R2,#0

MOV R12,#8
.SinLoop
LDRB R11,[R10],#12:CMP R11,#0:STRNEB R11,[R6],#320:STRNEB R2,[R6,#320]:ADDEQ R6,R6,#320
LDRB R11,[R10],#12:CMP R11,#0:STRNEB R11,[R6],#320:STRNEB R2,[R6,#320]:ADDEQ R6,R6,#320
SUBS R12,R12,#1
BNE SinLoop

.nodraw
ADD R8,R8,#1
CMP R8,#16:MOVEQ R8,#0:ADDEQ R7,R7,#1

ADD R3,R3,#1
CMP R3,#244
BMI loopx

MOV R15,R14

.MarcharsBABAS EQUD Chars

.TextToScroll EQUS "                   HELP ZOZO TO DESTROY AT LEAST d[e OF THE TOXIC BLOCKS AND IF POSSIBLE TO ASSEMBLE THE MAGIC DIAMONDS                   "
ALIGN
;;;;;;;;;;;;;;;;;;;; Fait apparaitre le titre du jeu ;;;;;;;;;;;;;;;;;;
.AppearTitle
STR R14,temp14_26

LDR R0,TitleComp     ; first decompress title
LDR R1,TitleAdr
LDR R2,BufferAds
MOV R3,#0
SWI "LZWD_Decompress"

LDR R5,FadeADR                   ; Iere phase # ombre du titre

MOV R10,#4
.LAppTitle1

FNwait:FNwait

LDR R0,TitleAdr
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]:ADD R1,R1,#320*2:ADD R1,R1,#(244-208)/2
MOV R2,#52   ;lines
.LAppTitle2
MOV R3,#208
.LAppTitle3
LDRB R4,[R0],#1:CMP R4,#0:BEQ dontFadeThat
LDRB R4,[R1]:LDRB R4,[R5,R4]:STRB R4,[R1]:STRB R4,[R1,#320*2+2]
.dontFadeThat
ADD R1,R1,#1
SUBS R3,R3,#1:BNE LAppTitle3
ADD R1,R1,#320-208
SUBS R2,R2,#1:BNE LAppTitle2

BL CtrlFunctionKeys

SUBS R10,R10,#1
BNE LAppTitle1
                                  ; IIeme phase # ecrit titre
MVN R5,#111 ; random

MOV R10,#32
.LAppTitle4

LDR R0,TitleAdr
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]:ADD R1,R1,#320*2:ADD R1,R1,#(244-208)/2
MOV R2,#52
.LAppTitle5
MOV R3,#208
.LAppTitle6
LDRB R4,[R0],#1:CMP R4,#0:BEQ dontPutThat
TST R5,#%11:STREQB R4,[R1]      ; plot point (random)
.dontPutThat
ADD R1,R1,#1
ADD R5,R5,R5,ROR#1     ;change rnd value
SUBS R3,R3,#1:BNE LAppTitle6
ADD R1,R1,#320-208
SUBS R2,R2,#1:BNE LAppTitle5

BL CtrlFunctionKeys

SUBS R10,R10,#1
BNE LAppTitle4

LDR R15,temp14_26

.TitleComp EQUD TitleDat
.TitleAdr EQUD Screen
.FadeADR EQUD FadeTable
;;;;;;;;;;;;;;;;;;;;;;; { end of AppearTitle } ;;;;;;;;;;;;;;;;;;;;;;;;

.DataBAS EQUD DataDEMO
.DataBASbck EQUD DataDEMO
.SchDmoBAS EQUD SchemeDemo
.SchDestin EQUD Scheme
.BufferAds EQUD Buffer
.CycleLands EQUD 5

.Minuterie EQUD 0       ; pour que la demo dure pas trop longtemps

.DemoMode
STR R14,temp14_24

LDR R0,SchDmoBAS        ; select scheme demo
LDR R1,SchDestin
LDR R2,BufferAds
MOV R3,#0
SWI "LZWD_Decompress"

MOV R0,#1:SUB R1,PC,#FNmb(NbOfPlayers):STR R0,[R1,#FNlb(NbOfPlayers)]

LDR R0,CycleLands:ADD R0,R0,#1:CMP R0,#6:MOVPL R0,#1:STR R0,CycleLands
BL SetLevelGraphLand
MOV R0,#&FF000:ADD R1,PC,#FNmb(Random):STR R0,[R1,#FNlb(Random)]
BL ResetGameVariables

MOV R0,#20:SUB R1,PC,#FNmb(WhichLevel):STR R0,[R1,#FNlb(WhichLevel)]

BL PrepareGame
BL SetScoreChars

MOV R0,#1600:STR R0,Minuterie     ; init to 32 sec

LDR R0,DataBASbck:STR R0,DataBAS   ; init demo path

.continueDemo
FNwait
BL SwapScreens
LDR R4,DataBAS:LDRB R1,[R4],#1:STR R4,DataBAS:STRB R1,Player1flag
BL AnimBackGround
BL MovePengi1
BL CalculeDeltas
BL CtrlScrollScreen
BL SCROLL

MOV R11,#1:BL CreateAllSprites
BL SpriteController
BL Arbitre
BL WriteScore
MOV R0,#0:BL PutPlaque    ; put plaquette 'DEMO'
BL ViewScreen

BL CtrlFunctionKeys

LDR R0,Minuterie:SUBS R0,R0,#1:STR R0,Minuterie:BPL continueDemo

BL ScoresUpDate

LDR R15,temp14_24

.temp14_24 EQUD 0

;;;;;;;;;;;;;;;;; TEST IF RTFM JOYSTICK CARD FITTED ;;;;;;;;;;;;;;;;;

.BoardAddr EQUD &33A0000
.CheckPort
SWI "OS_EnterOS":LDR R10,BoardAddr:MOV R0,#&F8:STRB R0,[R10,#0]
MOV R0,#&7F:STRB R0,[R10,#4]:LDRB R1,[R10,#0]:TST R1,#&ED:BNE NoEconet
MOV R0,#&7F:STRB R0,[R10,#4]:LDRB R2,[R10,#4]:TST R2,#&DB:BNE NoEconet
MOV R0,#0:STR R0,[R10,#12]:LDRB R0,[R10,#0]:LDRB R1,[R10,#4]
TEQ R0,R1:BNE Econet:LDRB R1,[R10,#8]:TEQ R0,R1:BNE Econet
LDRB R1,[R10,#12]:TEQ R0,R1:BNE Econet:TEQ R0,#0:BNE NoEconet
MOV R0,#&82:STRB R0,[R10,#0]:MOV R0,#&E5:STRB R0,[R10,#4]:MOV R0,#&1000
.Jloop SUBS R0,R0,#1:BNE Jloop:LDRB R1,[R10,#0]:TST R1,#&ED:BNE Econet
LDRB R2,[R10,#4]:TST R0,#&DB:BEQ NoEconet
.Econet MOV R0,#128:B finished:.NoEconet
LDR R0,[R10,#4]:AND R0,R0,#&0C:CMP R0,#&C:MOVEQ R0,#255:BEQ finished
LDR R0,[R10,#4]:AND R0,R0,#&03:CMP R0,#&3:MOVEQ R0,#255:BEQ finished
LDR R0,[R10,#8]:AND R0,R0,#&C0:CMP R0,#&C0:MOVEQ R0,#255:BEQ finished
LDR R0,[R10,#8]:AND R0,R0,#&28:CMP R0,#&28:MOVEQ R0,#255:BEQ finished
MOV R8,#10:MOV R9,#255
.mainloop MOV R0,#30:.Jloop1 MOV R1,#&1000
LDRB R2,[R10,#4]:AND R2,R2,#&0F:LDRB R5,[R10,#8]:AND R5,R5,#&E8
.Jloop2 LDRB R3,[R10,#4]:AND R3,R3,#&0F:LDRB R6,[R10,#8]:AND R6,R6,#&E8
CMP R3,R2:BNE fail:CMP R5,R6:BNE fail:SUBS R1,R1,#1:BNE Jloop2
MOV R0,#0:B next:.fail SUBS R0,R0,#1:BNE Jloop1:MOV R0,#255
.next CMP R0,#0:MOVEQ R9,#0:MOVEQ R8,#1:SUBS R8,R8,#1:BNE mainloop
MOV R0,R9:.finished STRB R0,result:TEQP PC,#0:MOVNV R0,R0:MOV PC,R14
.result EQUB 255:ALIGN

        ;;;;;;;;;;;;;; READ JOYSTICKS STATUS ;;;;;;;;;;;;

.ReadPorts LDRB R0,result     ; Check result of test routine
           CMP  R0,#0
           MOVNE R0,#0        ; If board not present then return
           STRNEB R0,port1    ; from routine, setting directions
           STRNEB R0,port2    ; etc. to zero.
           MOVNE PC,R14
           SWI "OS_EnterOS"   ; Enter supervisor mode
           LDR R0,BoardAddr   ; Get the address of the joystick board
           LDRB R1,[R0,#4]    ; Read from port 1
           AND R1,R1,#&1F     ; Mask out redundant bits
           STRB R1,port1      ; Store the result
           LDRB R0,[R0,#8]    ; Read from port 2
           MOV R1,R0,LSR#4    ; }
           BIC R1,R1,#1       ; } Shuffle the bits so as they are
           TST R0,#&10        ; } in the same order as for port 1
           ORRNE R1,R1,#&10   ; }
           TST R0,#&08        ; }   (%FUDLR)
           ORRNE R1,R1,#&01   ; }
           STRB R1,port2      ; Store the result
           TEQP PC,#0         ; Return to user mode
           MOVNV R0,R0        ; Delay to allow ARM to change modes
           MOV PC,R14         ; Exit routine

.port1     EQUB 0
.port2     EQUB 0:ALIGN

        ;;;;;;;;;;; END OF JOYSTICK ROUTINES ;;;;;;;;;;

.temp14_25 EQUD 0

.ReadKeyJoy
STR R14,temp14_25

BL ReadPorts
LDRB R0,port1:MVN R0,R0:STRB R0,Player1flag
LDRB R0,port2:MVN R0,R0:STRB R0,Player2flag

MOV R0,#129:MVN R4,#0   ; R4=keyboard status %000FUDLR
MVN R2,#0:LDR R1,leftKey: SWI   "OS_Byte":CMP R1,#&FF: BICEQ R4,R4,#%00010
MVN R2,#0:LDR R1,rightKey:SWINE "OS_Byte":CMP R1,#&FF: BICEQ R4,R4,#%00001
MVN R2,#0:LDR R1,upKey:   SWI   "OS_Byte":CMP R1,#&FF: BICEQ R4,R4,#%01000
MVN R2,#0:LDR R1,downKey: SWINE "OS_Byte":CMP R1,#&FF: BICEQ R4,R4,#%00100
MVN R2,#0:LDR R1,pushKey: SWI   "OS_Byte":CMP R1,#&FF: BICEQ R4,R4,#%10000
CMN R4,#1:STRNEB R4,Player1flag

MOV R0,#129:MVN R4,#0
MVN R2,#0:LDR R1,leftKey2: SWI   "OS_Byte":CMP R1,#&FF:BICEQ R4,R4,#%00010
MVN R2,#0:LDR R1,rightKey2:SWINE "OS_Byte":CMP R1,#&FF:BICEQ R4,R4,#%00001
MVN R2,#0:LDR R1,upKey2:   SWI   "OS_Byte":CMP R1,#&FF:BICEQ R4,R4,#%01000
MVN R2,#0:LDR R1,downKey2: SWINE "OS_Byte":CMP R1,#&FF:BICEQ R4,R4,#%00100
MVN R2,#0:LDR R1,pushKey2: SWI   "OS_Byte":CMP R1,#&FF:BICEQ R4,R4,#%10000
CMN R4,#1:STRNEB R4,Player2flag

;;;;; Inverse directions when trunk ;;;;;
LDRB R0,trunk1
CMP R0,#0:BEQ noInv1
LDRB R4,Player1flag
AND R0,R4,#%10000
AND R7,R4,#%0101:ORR R0,R0,R7,LSL#1
AND R7,R4,#%1010:ORR R0,R0,R7,LSR#1
STRB R0,Player1flag
.noInv1
LDRB R0,trunk2
CMP R0,#0:BEQ noInv2
LDRB R4,Player2flag
AND R0,R4,#%10000
AND R7,R4,#%0101:ORR R0,R0,R7,LSL#1
AND R7,R4,#%1010:ORR R0,R0,R7,LSR#1
STRB R0,Player2flag
.noInv2
LDR R15,temp14_25
                    ;  Keys PENGO1  ;
                     ;;;;;;;;;;;;;;;
.leftKey  EQUD -98
.rightKey EQUD -67
.upKey    EQUD -55
.downKey  EQUD -71
.pushKey  EQUD -99
                    ;  Keys PENGO2  ;
                     ;;;;;;;;;;;;;;;
.leftKey2  EQUD -108
.rightKey2 EQUD -125
.upKey2    EQUD -60
.downKey2  EQUD -27
.pushKey2  EQUD -107

.trunk1    EQUB 0   ; 0=ok,1=Pengo1 a bu
.trunk2    EQUB 0   ; 0=ok,1=Pengo2 a bu
ALIGN

;;;; Reverse Keys directions (for alcohol block) ;;;;

.ReversePl1 LDRB R4,trunk1:RSB R4,R4,#1:STRB R4,trunk1:MOV R15,R14
.ReversePl2 LDRB R4,trunk2:RSB R4,R4,#1:STRB R4,trunk2:MOV R15,R14

.ResetTrunk1 MOV R4,#0:STRB R4,trunk1:MOV R15,R14
.ResetTrunk2 MOV R4,#0:STRB R4,trunk2:MOV R15,R14
.ResetTrunk  MOV R4,#0:STRB R4,trunk1:STRB R4,trunk2:MOV R15,R14

;;;;;;;;;    Left - Right - Up - Down - Fire flags     ;;;;;;;;
.Player1flag EQUB 0   ; %xxxFUDLR
.Player2flag EQUB 0
ALIGN

.CtrlFuncKeys        ; Controle si le joueur veut PAUSE,STOP MUSIC OU QUIT
MOV R0,#129:MVN R1,#NOT-30:MOV R2,#&FF:SWI "OS_Byte"      ; PAUSE     F12
CMP R1,#&FF:BEQ PausedGame
            MVN R1,#NOT-31:MOV R2,#&FF:SWI "OS_Byte"      ; MUSIC ON  F10
CMP R1,#&FF:SWIEQ "Trk_PlayMusic"
            MVN R1,#NOT-29:MOV R2,#&FF:SWI "OS_Byte"      ; MUSIC OFF F11
CMP R1,#&FF:SWIEQ "Trk_PauseMusic"

            MVN R1,#NOT-113:MOV R2,#&FF:SWI "OS_Byte"     ; ESCAPE=ABORT
CMP R1,#&FF:STREQ R1,abortGame

MOV R15,R14

.abortGame EQUD 0       ; 0 = game not aborted
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.temp14_3 EQUD 0

.LandRel EQUD Land
.OccTBAS EQUD OccTable

.MovePengi1
STR R14,temp14_3

SUB R7,PC,#FNmb(Deadly):LDR R7,[R7,#FNlb(Deadly)]
CMP R7,#0:BNE mourant

SUB R9,PC,#FNmb(PosX):LDR R8,[R9,#FNlb(PosX)]!:LDR R9,[R9,#4]

SUB R6,PC,#FNmb(PengDir):LDR R6,[R6,#FNlb(PengDir)]

LDR R7,LandRel
ADD R7,R7,R8,LSL#2
ADD R7,R7,R9,LSL#8 ; pos in land of pengi

SUB R11,PC,#FNmb(FinX):LDR R10,[R11,#FNlb(FinX)]!:LDR R11,[R11,#4]

SUB R13,PC,#FNmb(DirX):LDR R12,[R13,#FNlb(DirX)]!:LDR R13,[R13,#4]

CMP R10,#0:MOVEQ R12,#0
CMP R11,#0:MOVEQ R13,#0

MOV R14,R10

SUB R10,PC,#FNmb(Pushing):LDR R10,[R10,#FNlb(Pushing)]
CMP R10,#0
SUBGTS R10,R10,#1
BGT FinishReadKey

LDR R0,OccTBAS:ADD R0,R0,R8:ADD R0,R0,R9,LSL#6

MOV R4,#&3000

LDRB R1,Player1flag
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TST R1,#%00010:CMPEQ R13,#0:BNE noleft                 ; LEFT     ;
                                                                  ;
MOV R6,#0                                                         ;
                                                                  ;
CMP R14,#0:MVNGT R12,#0:BGT FinishReadKey                         ;
                                                                  ;
LDRB R0,[R0,#-1]                                                  ;
TST R0,#%10                                                       ;
BNE FinishReadKey                                                 ;
CMP R11,#0:LDRB R3,[R7,#4*(-1)]!:BEQ okSelect1                    ;
CMP R3,#24:LDRPLB R3,[R7,#4*(-1+64)-4*(-1)]                       ;
CMPPL R3,#24:BMI FinishReadKey                                    ;
.okSelect1                                                        ;
CMP R3,#24                                                        ;
MVNPL R12,#0                                                      ;
BPL FinishReadKey                                                 ;
                                                                  ;
CMP R14,#0:TSTEQ R1,#%10000:BNE FinishReadKey          ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#-4]                                                  ;
CMP R0,#24                                                        ;
BPL noStra1            ;;;;;;;;;                                  ;
MOV R10,#4             ; Casse ;                                  ;
CMP R3,#23:BLEQ Electr ;;;;;;;;;                                  ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey    ; on peut pas casser ce bloc                 ;
B unset1                                                          ;
                                                                  ;
.noStra1                                                          ;
SUB R5,PC,#FNmb(movwhat):LDR R5,[R5,#FNlb(movwhat)] ;;;;;;;;;     ;
CMN R5,#1:BNE FinishReadKey                         ; Lance ;     ;
                                                    ;;;;;;;;;     ;
MOV R10,#6                                                        ;
.unset1                                                           ;
LDR R5,[R7,-R4]:STR R5,[R7]             ; unset block             ;
                                                                  ;
CMP R0,#24:BMI NewCrash                                           ;
SUB R0,PC,#FNmb(movwhat)                                          ;
             STR R3,[R0,#FNlb(movwhat)]!        ; movwhat         ;
SUB R1,R8,#1:MOV R2,R9                                            ;
MVN R5,#0:MOV R11,#0                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx,movby,movbdx,movbdy               ;
                                                                  ;
BL ArbitreStartBlk1                                               ;
B FinishReadKey                                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.noleft                                                           ;
TST R1,#%00001:CMPEQ R13,#0:BNE noright           ; RIGHT         ;
                                                                  ;
MOV R6,#4                                                         ;
                                                                  ;
LDRB R0,[R0,#1]                                                   ;
TST R0,#%10                                                       ;
BNE FinishReadKey                                                 ;
CMP R11,#0:LDRB R3,[R7,#4*(+1)]!:BEQ okSelect2                    ;
CMP R3,#24:LDRPLB R3,[R7,#4*(+1+64)-4*(+1)]                       ;
CMPPL R3,#24:BMI FinishReadKey                                    ;
.okSelect2                                                        ;
CMP R3,#24                                                        ;
MOVPL R12,#1                                                      ;
BPL FinishReadKey                                                 ;
                                                                  ;
CMP R14,#0:TSTEQ R1,#%10000:BNE FinishReadKey          ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#+4]                                                  ;
CMP R0,#24                                                        ;
BPL noStra2                                                       ;
MOV R10,#4                                                        ;
CMP R3,#23:BLEQ Electr                                            ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey    ; on peut pas casser                         ;
B unset2                                                          ;
                                                                  ;
.noStra2                                                          ;
SUB R5,PC,#FNmb(movwhat):LDR R5,[R5,#FNlb(movwhat)]               ;
CMN R5,#1:BNE FinishReadKey                                       ;
                                                                  ;
MOV R10,#6                                                        ;
                                                                  ;
.unset2                                                           ;
LDR R5,[R7,-R4]:STR R5,[R7]                                       ;
                                                                  ;
CMP R0,#24:BMI NewCrash                                           ;
SUB R0,PC,#FNmb(movwhat)                                          ;
             STR R3,[R0,#FNlb(movwhat)]!        ; movwhat         ;
ADD R1,R8,#1:MOV R2,R9                                            ;
MOV R5,#1:MOV R11,#0                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx,movby,movbdx,movbdy               ;
                                                                  ;
BL ArbitreStartBlk1                                               ;
B FinishReadKey                                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.noright                                                          ;
TST R1,#%01000:CMPEQ R12,#0:BNE noup                   ; UP       ;
                                                                  ;
MOV R6,#8                                                         ;
                                                                  ;
CMP R11,#0:MVNGT R13,#0:BGT FinishReadKey                         ;
                                                                  ;
LDRB R0,[R0,#-64]                                                 ;
TST R0,#%10                                                       ;
BNE FinishReadKey                                                 ;
CMP R14,#0:LDRB R3,[R7,#4*(-64)]!:BEQ okSelect3                   ;
CMP R3,#24:LDRPLB R3,[R7,#4*(-64+1)-4*(-64)]                      ;
CMPPL R3,#24:BMI FinishReadKey                                    ;
.okSelect3                                                        ;
CMP R3,#24                                                        ;
MVNPL R13,#0                                                      ;
BPL FinishReadKey                                                 ;
                                                                  ;
CMP R11,#0:TSTEQ R1,#%10000:BNE FinishReadKey          ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#-256]                                                ;
CMP R0,#24                                                        ;
BPL noStra3                                                       ;
MOV R10,#4                                                        ;
CMP R3,#23:BLEQ Electr                                            ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey    ; on peut pas casser                         ;
B unset3                                                          ;
                                                                  ;
.noStra3                                                          ;
SUB R5,PC,#FNmb(movwhat):LDR R5,[R5,#FNlb(movwhat)]               ;
CMN R5,#1:BNE FinishReadKey                                       ;
                                                                  ;
MOV R10,#6                                                        ;
                                                                  ;
.unset3                                                           ;
LDR R5,[R7,-R4]:STR R5,[R7]                                       ;
                                                                  ;
CMP R0,#24:BMI NewCrash                                           ;
SUB R0,PC,#FNmb(movwhat)                                          ;
             STR R3,[R0,#FNlb(movwhat)]!        ; movwhat         ;
MOV R1,R8:SUB R2,R9,#1                                            ;
MOV R5,#0:MVN R11,#0                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx,movby,movbdx,movbdy               ;
                                                                  ;
BL ArbitreStartBlk1                                               ;
B FinishReadKey                                                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.noup                                                             ;
TST R1,#%00100:CMPEQ R12,#0:BNE nodown                 ; DOWN     ;
                                                                  ;
MOV R6,#12                                                        ;
                                                                  ;
LDRB R0,[R0,#64]                                                  ;
TST R0,#%10                                                       ;
BNE FinishReadKey                                                 ;
CMP R14,#0:LDRB R3,[R7,#4*(+64)]!:BEQ okSelect4                   ;
CMP R3,#24:LDRPLB R3,[R7,#4*(+64+1)-4*(+64)]                      ;
CMPPL R3,#24:BMI FinishReadKey                                    ;
.okSelect4                                                        ;
CMP R3,#24                                                        ;
MOVPL R13,#1                                                      ;
BPL FinishReadKey                                                 ;
                                                                  ;
CMP R11,#0:TSTEQ R1,#%10000:BNE FinishReadKey          ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#+256]                                                ;
CMP R0,#24                                                        ;
BPL noStra4                                                       ;
MOV R10,#4                                                        ;
CMP R3,#23:BLEQ Electr                                            ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey    ; on peut pas casser                         ;
B unset4                                                          ;
                                                                  ;
.noStra4                                                          ;
SUB R5,PC,#FNmb(movwhat):LDR R5,[R5,#FNlb(movwhat)]               ;
CMN R5,#1:BNE FinishReadKey                                       ;
                                                                  ;
MOV R10,#6                                                        ;
                                                                  ;
.unset4                                                           ;
LDR R5,[R7,-R4]:STR R5,[R7]                                       ;
                                                                  ;
CMP R0,#24:BMI NewCrash                                           ;
SUB R0,PC,#FNmb(movwhat)                                          ;
             STR R3,[R0,#FNlb(movwhat)]!        ; movwhat         ;
MOV R1,R8:ADD R2,R9,#1                                            ;
MOV R5,#0:MOV R11,#1                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx,movby,movbdx,movbdy               ;
                                                                  ;
BL ArbitreStartBlk1                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.nodown
BL AbortElectric
.FinishReadKey
SUB R0,PC,#FNmb(Pushing)
STR R10,[R0,#FNlb(Pushing)]

SUB R11,PC,#FNmb(FinX):LDR R10,[R11,#FNlb(FinX)]!:LDR R11,[R11,#4]

ADDS R10,R10,R12
             ADDMI R10,R10,#5:SUBMI R8,R8,#1
CMPPL R10,#5:SUBPL R10,R10,#5:ADDPL R8,R8,#1

ADDS R11,R11,R13
             ADDMI R11,R11,#5:SUBMI R9,R9,#1
CMPPL R11,#5:SUBPL R11,R11,#5:ADDPL R9,R9,#1

SUB R0,PC,#FNmb(PengDir):STR R6,[R0,#FNlb(PengDir)]

BL CtrlCollision1

SUBPL R6,PC,#FNmb(PosX):STRPL R8,[R6,#FNlb(PosX)]!:STRPL R9,[R6,#4]
SUBPL R6,PC,#FNmb(FinX):STRPL R10,[R6,#FNlb(FinX)]!:STRPL R11,[R6,#4]

SUB R0,PC,#FNmb(DirX)
STR R12,[R0,#FNlb(DirX)]!
STR R13,[R0,#4]                         ; DirY

.mourant
LDR R15,temp14_3

; *************************** Now Pengo Nb 2 ***************************

.MovePengi2
STR R14,temp14_3

SUB R7,PC,#FNmb(Deadly2):LDR R7,[R7,#FNlb(Deadly2)]
CMP R7,#0
BNE mourant2

SUB R6,PC,#FNmb(PengDir2):LDR R6,[R6,#FNlb(PengDir2)]

SUB R9,PC,#FNmb(PosX2):LDR R8,[R9,#FNlb(PosX2)]!:LDR R9,[R9,#4]

LDR R7,LandRel
ADD R7,R7,R8,LSL#2
ADD R7,R7,R9,LSL#8 ; pos in land of pengi

SUB R11,PC,#FNmb(FinX2):LDR R10,[R11,#FNlb(FinX2)]!:LDR R11,[R11,#4]

SUB R13,PC,#FNmb(DirX2):LDR R12,[R13,#FNlb(DirX2)]!:LDR R13,[R13,#4]

CMP R10,#0:MOVEQ R12,#0
CMP R11,#0:MOVEQ R13,#0

MOV R14,R10

SUB R10,PC,#FNmb(Pushing2):LDR R10,[R10,#FNlb(Pushing2)]
CMP R10,#0
SUBGTS R10,R10,#1
BGT FinishReadKey2

MOV R4,#&3000

LDR R0,OccTBAS:ADD R0,R0,R8:ADD R0,R0,R9,LSL#6

LDRB R1,Player2flag
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TST R1,#%00010:CMPEQ R13,#0:BNE noleft2               ; LEFT      ;
                                                                  ;
MOV R6,#0                                                         ;
                                                                  ;
CMP R14,#0:MVNGT R12,#0:BGT FinishReadKey2                        ;
                                                                  ;
LDRB R0,[R0,#-1]                                                  ;
TST R0,#%10                                                       ;
BNE FinishReadKey2                                                ;
CMP R11,#0:LDRB R3,[R7,#4*(-1)]!:BEQ okSelect12                   ;
CMP R3,#24:LDRPLB R3,[R7,#4*(-1+64)-4*(-1)]                       ;
CMPPL R3,#24:BMI FinishReadKey2                                   ;
.okSelect12                                                       ;
CMP R3,#24                                                        ;
MVNPL R12,#0                                                      ;
BPL FinishReadKey2                                                ;
                                                                  ;
CMP R14,#0:TSTEQ R1,#%10000:BNE FinishReadKey2         ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#-4]                                                  ;
CMP R0,#24                                                        ;
BPL noStra12          ;;;;;;;;;                                   ;
MOV R10,#4            ; Casse ;                                   ;
CMP R3,#23:BLEQ Electr ;;;;;;;;                                   ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey2   ; on peut pas casser ce bloc                 ;
B unset12                                                         ;
                                                                  ;
.noStra12                                                         ;
SUB R5,PC,#FNmb(movwhat2):LDR R5,[R5,#FNlb(movwhat2)] ;;;;;;;;;   ;
CMN R5,#1:BNE FinishReadKey2                          ; Lance ;   ;
                                                      ;;;;;;;;;   ;
MOV R10,#6                                                        ;
.unset12                                                          ;
LDR R5,[R7,-R4]:STR R5,[R7]             ; unset block             ;
                                                                  ;
CMP R0,#24:BMI NewCrash2                                          ;
SUB R0,PC,#FNmb(movwhat2)                                         ;
             STR R3,[R0,#FNlb(movwhat2)]!       ; movwhat2        ;
SUB R1,R8,#1:MOV R2,R9                                            ;
MVN R5,#0:MOV R11,#0                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx2,movby2,movbdx2,movbdy2           ;
                                                                  ;
BL ArbitreStartBlk2                                               ;
B FinishReadKey2                                                  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.noleft2                                                          ;
TST R1,#%00001:CMPEQ R13,#0:BNE noright2        ; RIGHT           ;
                                                                  ;
MOV R6,#4                                                         ;
                                                                  ;
LDRB R0,[R0,#1]                                                   ;
TST R0,#%10                                                       ;
BNE FinishReadKey2                                                ;
CMP R11,#0:LDRB R3,[R7,#4*(+1)]!:BEQ okSelect22                   ;
CMP R3,#24:LDRPLB R3,[R7,#4*(+1+64)-4*(+1)]                       ;
CMPPL R3,#24:BMI FinishReadKey2                                   ;
.okSelect22                                                       ;
CMP R3,#24                                                        ;
MOVPL R12,#1                                                      ;
BPL FinishReadKey2                                                ;
                                                                  ;
CMP R14,#0:TSTEQ R1,#%10000:BNE FinishReadKey2         ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#+4]                                                  ;
CMP R0,#24                                                        ;
BPL noStra22                                                      ;
MOV R10,#4                                                        ;
CMP R3,#23:BLEQ Electr                                            ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey2   ; on peut pas casser                         ;
B unset22                                                         ;
                                                                  ;
.noStra22                                                         ;
SUB R5,PC,#FNmb(movwhat2):LDR R5,[R5,#FNlb(movwhat2)]             ;
CMN R5,#1:BNE FinishReadKey2                                      ;
                                                                  ;
MOV R10,#6                                                        ;
                                                                  ;
.unset22                                                          ;
LDR R5,[R7,-R4]:STR R5,[R7]                                       ;
                                                                  ;
CMP R0,#24:BMI NewCrash2                                          ;
SUB R0,PC,#FNmb(movwhat2)                                         ;
             STR R3,[R0,#FNlb(movwhat2)]!       ; movwhat         ;
ADD R1,R8,#1:MOV R2,R9                                            ;
MOV R5,#1:MOV R11,#0                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx2,movby2,movbdx2,movbdy2           ;
                                                                  ;
BL ArbitreStartBlk2                                               ;
B FinishReadKey2                                                  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.noright2                                                         ;
TST R1,#%01000:CMPEQ R12,#0:BNE noup2                 ; UP        ;
                                                                  ;
MOV R6,#8                                                         ;
                                                                  ;
CMP R11,#0:MVNGT R13,#0:BGT FinishReadKey2                        ;
                                                                  ;
LDRB R0,[R0,#-64]                                                 ;
TST R0,#%10                                                       ;
BNE FinishReadKey2                                                ;
CMP R14,#0:LDRB R3,[R7,#4*(-64)]!:BEQ okSelect32                  ;
CMP R3,#24:LDRPLB R3,[R7,#4*(-64+1)-4*(-64)]                      ;
CMPPL R3,#24:BMI FinishReadKey2                                   ;
.okSelect32                                                       ;
CMP R3,#24                                                        ;
MVNPL R13,#0                                                      ;
BPL FinishReadKey2                                                ;
                                                                  ;
CMP R11,#0:TSTEQ R1,#%10000:BNE FinishReadKey2         ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#-256]                                                ;
CMP R0,#24                                                        ;
BPL noStra32                                                      ;
MOV R10,#4                                                        ;
CMP R3,#23:BLEQ Electr                                            ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey2   ; on peut pas casser                         ;
B unset32                                                         ;
                                                                  ;
.noStra32                                                         ;
SUB R5,PC,#FNmb(movwhat2):LDR R5,[R5,#FNlb(movwhat2)]             ;
CMN R5,#1:BNE FinishReadKey2                                      ;
                                                                  ;
MOV R10,#6                                                        ;
                                                                  ;
.unset32                                                          ;
LDR R5,[R7,-R4]:STR R5,[R7]                                       ;
                                                                  ;
CMP R0,#24:BMI NewCrash2                                          ;
SUB R0,PC,#FNmb(movwhat2)                                         ;
             STR R3,[R0,#FNlb(movwhat2)]!       ; movwhat2        ;
MOV R1,R8:SUB R2,R9,#1                                            ;
MOV R5,#0:MVN R11,#0                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx2,movby2,movbdx2,movbdy2           ;
                                                                  ;
BL ArbitreStartBlk2                                               ;
B FinishReadKey2                                                  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.noup2                                                            ;
TST R1,#%00100:CMPEQ R12,#0:BNE nodown2            ; DOWN         ;
                                                                  ;
MOV R6,#12                                                        ;
                                                                  ;
LDRB R0,[R0,#64]                                                  ;
TST R0,#%10                                                       ;
BNE FinishReadKey2                                                ;
CMP R14,#0:LDRB R3,[R7,#4*(+64)]!:BEQ okSelect42                  ;
CMP R3,#24:LDRPLB R3,[R7,#4*(+64+1)-4*(+64)]                      ;
CMPPL R3,#24:BMI FinishReadKey2                                   ;
.okSelect42                                                       ;
CMP R3,#24                                                        ;
MOVPL R13,#1                                                      ;
BPL FinishReadKey2                                                ;
                                                                  ;
CMP R11,#0:TSTEQ R1,#%10000:BNE FinishReadKey2         ; SPACE ;  ;
                                                                  ;
LDRB R0,[R7,#+256]                                                ;
CMP R0,#24                                                        ;
BPL noStra42                                                      ;
MOV R10,#4                                                        ;
CMP R3,#23:BLEQ Electr                                            ;
                                                                  ;
CMP R3,#12                                                        ;
BPL FinishReadKey2   ; on peut pas casser                         ;
B unset42                                                         ;
                                                                  ;
.noStra42                                                         ;
SUB R5,PC,#FNmb(movwhat2):LDR R5,[R5,#FNlb(movwhat2)]             ;
CMN R5,#1:BNE FinishReadKey2                                      ;
                                                                  ;
MOV R10,#6                                                        ;
                                                                  ;
.unset42                                                          ;
LDR R5,[R7,-R4]:STR R5,[R7]                                       ;
                                                                  ;
CMP R0,#24:BMI NewCrash2                                          ;
MOV R5,#1                                                         ;
SUB R0,PC,#FNmb(movwhat2)                                         ;
             STR R3,[R0,#FNlb(movwhat2)]!       ; movwhat2        ;
MOV R1,R8:ADD R2,R9,#1                                            ;
MOV R5,#0:MOV R11,#1                                              ;
STMIB R0,{R1,R2,R5,R11}  ;movbx2,movby2,movbdx2,movbdy2           ;
                                                                  ;
BL ArbitreStartBlk2                                               ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.nodown2
BL AbortElectric
.FinishReadKey2
SUB R0,PC,#FNmb(Pushing2)
STR R10,[R0,#FNlb(Pushing2)]

SUB R11,PC,#FNmb(FinX2):LDR R10,[R11,#FNlb(FinX2)]!:LDR R11,[R11,#4]

ADDS R10,R10,R12
             ADDMI R10,R10,#5:SUBMI R8,R8,#1
CMPPL R10,#5:SUBPL R10,R10,#5:ADDPL R8,R8,#1

ADDS R11,R11,R13
             ADDMI R11,R11,#5:SUBMI R9,R9,#1
CMPPL R11,#5:SUBPL R11,R11,#5:ADDPL R9,R9,#1

SUB R0,PC,#FNmb(PengDir2):STR R6,[R0,#FNlb(PengDir2)]

BL CtrlCollision2

SUBPL R6,PC,#FNmb(PosX2):STRPL R8,[R6,#FNlb(PosX2)]!:STRPL R9,[R6,#4]
SUBPL R6,PC,#FNmb(FinX2):STRPL R10,[R6,#FNlb(FinX2)]!:STRPL R11,[R6,#4]

SUB R0,PC,#FNmb(DirX2)
STR R12,[R0,#FNlb(DirX2)]!
STR R13,[R0,#4]                         ; DirY

.mourant2
LDR R15,temp14_3

.CrashesBAS EQUD Crashes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.NewCrash
ADD R1,PC,#FNmb(NbOfCrash):LDR R1,[R1,#FNlb(NbOfCrash)]
LDR R2,CrashesBAS

LDR R0,[R2,R1,LSL#2]:ANDS R4,R0,#&FF000000:LDRNE R4,OAdr:MOVNE R0,R0,LSL#16:MOVNE R11,#0:STRNEB R11,[R4,R0,LSR#16]         ; to erase precedent

MOV R0,#16<<24
ORR R0,R0,R3,LSL#16
LDR R4,LandRel:SUB R7,R7,R4
ORR R0,R0,R7,LSR#2
STR R0,[R2,R1,LSL#2]    ; met NewCrash dans table (bonne position(R1))

RSB R1,R1,#1:ADD R2,PC,#FNmb(NbOfCrash):STR R1,[R2,#FNlb(NbOfCrash)]

MOV R1,#25:MOV R2,#24:SWI "Trk_MakeNoise"
MOV R11,#1:BL ArbitreCrash    ;R11=1 >> first player
B FinishReadKey
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.NewCrash2
ADD R1,PC,#FNmb(NbOfCrash):LDR R1,[R1,#FNlb(NbOfCrash)]
LDR R2,CrashesBAS

LDR R0,[R2,R1,LSL#2]:ANDS R4,R0,#&FF000000:LDRNE R4,OAdr:MOVNE R0,R0,LSL#16:MOVNE R11,#0:STRNEB R11,[R4,R0,LSR#16]         ; to erase precedent

MOV R0,#16<<24
ORR R0,R0,R3,LSL#16
LDR R4,LandRel:SUB R7,R7,R4
ORR R0,R0,R7,LSR#2
STR R0,[R2,R1,LSL#2]    ; met NewCrash dans table (bonne position(R1))

RSB R1,R1,#1:STR R1,NbOfCrash

MOV R1,#25:MOV R2,#24:SWI "Trk_MakeNoise"
MOV R11,#2:BL ArbitreCrash    ; R11=2 >> second player
B FinishReadKey2

.MonsterList

; X,Y,FX,FY,KIND,COUNTER

; COUNTER = 010 - 4800     etourdi
;         = -32767 .. -1   pas encore ne' ( -32 .. -1   naissance )
;         = 0 .. 9         vivant (phases d'animation)

EQUD 10:EQUD 44:EQUD 0:EQUD 0:EQUD 148+24:EQUD -1-RND(2200)
EQUD 20:EQUD 30:EQUD 0:EQUD 0:EQUD 148+00:EQUD -1-RND(2200)
EQUD 30:EQUD 50:EQUD 0:EQUD 0:EQUD 148+24:EQUD -1-RND(2200)
EQUD 20:EQUD 30:EQUD 0:EQUD 0:EQUD 148+00:EQUD -1-RND(2200)
EQUD 50:EQUD 43:EQUD 0:EQUD 0:EQUD 148+24:EQUD -1-RND(2200)
EQUD 10:EQUD 34:EQUD 0:EQUD 0:EQUD 148+00:EQUD -1-RND(2200)
EQUD 20:EQUD 25:EQUD 0:EQUD 0:EQUD 148+24:EQUD -1-RND(2200)
EQUD 30:EQUD 16:EQUD 0:EQUD 0:EQUD 148+00:EQUD -1-RND(2200)
EQUD 30:EQUD 16:EQUD 0:EQUD 0:EQUD 148+24:EQUD -1-RND(2200)
EQUD 30:EQUD 16:EQUD 0:EQUD 0:EQUD 148+00:EQUD -1-RND(2200)

.badwhat EQUD -1 ; -1=pas de bloc
.badbx   EQUD 0
.badby   EQUD 0
.badbdx  EQUD 0
.badbdy  EQUD 0

.temp14_4 EQUD 0
.LandRel2 EQUD Land
.OAdr EQUD OccTable
.PointerSpr EQUD ListOfSprites

.Baddie EQUD 8 ; (0..8  =number of dangerous monsters)

.MoveMonsters
STR R14,temp14_4

SUB R1,PC,#FNmb(ItsChallenge):LDR R1,[R1,#FNlb(ItsChallenge)]
CMP R1,#1:MOVNE R0,#8:MOVEQ R0,#10  ; if challenge then 10 monsters

LDR R1,PointerSpr
ADR R2,MonsterList

SUB R12,PC,#FNmb(ScrPX):LDR R9,[R12,#FNlb(ScrPX)]!:LDR R10,[R12,#8]:ADD R10,R10,R9,LSL#2:ADD R10,R10,R9:MOV R12,R10,LSL#2   ; = (5*!ScrPX+ScrFX)*4
SUB R13,PC,#FNmb(ScrPY):LDR R9,[R13,#FNlb(ScrPY)]!:LDR R11,[R13,#8]:ADD R11,R11,R9,LSL#2:ADD R11,R11,R9:MOV R13,R11,LSL#2   ; = (5*!ScrPY+ScrFY)*4

LDR R11,Random

.LmM
LDMIA R2,{R3,R4, R5,R6, R7,R8}

CMP R8,#10:BPL Etourdi  ; etourdi
CMN R8,#31
BMI Limbo
CMP R8,#0
BMI BlurpNait
SUBGT R8,R8,#1
BGT noChange

MOV R8,#9      ; reset counter

LDR R10,LandRel2
ADD R9,R3,R4,LSL#6
ADD R9,R10,R9,LSL#2
LDR R10,OAdr:ADD R10,R10,R3
MOV R14,#0:STRB R14,[R10,R4,LSL#6]!    ; erase occ monster

TST R11,#1<<12   ; choose way (oriz or vert)
BEQ oriz
.vert
SUB R14,PC,#FNmb(NbOfPlayers):LDR R14,[R14,#FNlb(NbOfPlayers)]
CMP R14,#1     ; s'il y a deux players,les monstres se divisent la tache
TSTNE R0,#%1
SUBEQ R14,PC,#FNmb(PosY):LDREQ R14,[R14,#FNlb(PosY)]
SUBNE R14,PC,#FNmb(PosY2):LDRNE R14,[R14,#FNlb(PosY2)]
RSB R14,R14,R4:TST R11,#%11<<3:EOREQ R14,R11,#%1<<31

TST R14,#%1<<31
BEQ up

LDRB R14,[R9,#256]
CMP R14,#24:LDRPLB R14,[R10,#64]:TSTPL R14,#1:ADDEQ R4,R4,#1:MVNEQ R6,#19
BEQ noChange
LDRB R14,[R9,#-256]
CMP R14,#24:LDRPLB R14,[R10,#-64]:TSTPL R14,#1:SUBEQ R4,R4,#1:MOVEQ R6,#20
BEQ noChange

LDR R14,Baddie:CMP R14,R0:BGT danger
B noChange

.up
LDRB R14,[R9,#-256]
CMP R14,#24:LDRPLB R14,[R10,#-64]:TSTPL R14,#1:SUBEQ R4,R4,#1:MOVEQ R6,#20
BEQ noChange
LDRB R14,[R9,#256]
CMP R14,#24:LDRPLB R14,[R10,#64]:TSTPL R14,#1:ADDEQ R4,R4,#1:MVNEQ R6,#19
BEQ noChange

LDR R14,Baddie:CMP R14,R0:BGT danger
B noChange

.oriz
SUB R14,PC,#FNmb(NbOfPlayers):LDR R14,[R14,#FNlb(NbOfPlayers)]
CMP R14,#1     ; s'il y a deux players,les monstres se divisent la tache
TSTNE R0,#%1
SUBEQ R14,PC,#FNmb(PosX):LDREQ R14,[R14,#FNlb(PosX)]
SUBNE R14,PC,#FNmb(PosX2):LDRNE R14,[R14,#FNlb(PosX2)]
RSB R14,R14,R3:TST R11,#%11<<3:EOREQ R14,R11,#%1<<31

TST R14,#1<<31
BEQ left

LDRB R14,[R9,#4]
CMP R14,#24:LDRPLB R14,[R10,#1]:TSTPL R14,#1:ADDEQ R3,R3,#1:MVNEQ R5,#19
BEQ noChange
LDRB R14,[R9,#-4]
CMP R14,#24:LDRPLB R14,[R10,#-1]:TSTPL R14,#1:SUBEQ R3,R3,#1:MOVEQ R5,#20
BEQ noChange

LDR R14,Baddie:CMP R14,R0:BGT danger
B noChange

.left
LDRB R14,[R9,#-4]
CMP R14,#24:LDRPLB R14,[R10,#-1]:TSTPL R14,#1:SUBEQ R3,R3,#1:MOVEQ R5,#20
BEQ noChange
LDRB R14,[R9,#4]
CMP R14,#24:LDRPLB R14,[R10,#1]:TSTPL R14,#1:ADDEQ R3,R3,#1:MVNEQ R5,#19
BEQ noChange

LDR R14,Baddie:CMP R14,R0:BGT danger

.noChange
LDR R10,OAdr
ADD R10,R10,R3
MOV R14,#1:STRB R14,[R10,R4,LSL#6]    ; restore occ monster

AND R9,R8,#7:ADD R9,R7,R9,LSR#1     ; animation phase

CMP R6,#0:SUBGT R6,R6,#2:ADDLT R6,R6,#2   :ADDMI R9,R9,#12:ADDGT R9,R9,#16
CMPEQ R5,#0:ADDEQ R9,R9,#12 ; dont move
CMP R5,#0:SUBGT R5,R5,#2:ADDLT R5,R5,#2   :ADDMI R9,R9,#4  ; direction

.retEtour
SUB R10,PC,#FNmb(movwhat):LDR R10,[R10,#FNlb(movwhat)] ;bloc en mouvement?
CMN R10,#1
BEQ nokill1

SUB R14,PC,#FNmb(movbx):LDR R14,[R14,#FNlb(movbx)]
                     ; test o-collision with launched block
SUB R14,R14,R3:ADD R14,R14,R14,LSL#2
RSBS R14,R5,R14,LSL#2:RSBMI R14,R14,#0
CMP R14,#20:BPL nokill1                   ; orizonally killed

SUB R10,PC,#FNmb(movby):LDR R10,[R10,#FNlb(movby)]
                     ; test v-collision with launched block
SUB R10,R10,R4:ADD R10,R10,R10,LSL#2
RSBS R10,R6,R10,LSL#2:RSBMI R10,R10,#0
CMP R10,#20:BPL nokill1
CMP R10,#15:CMPMI R14,#15:ADDPL R8,R8,#4800:BMI MonsterDead1     ; etourdi
                                                                 ; ou mort
; IDEM pour bloc Nb2

.nokill1
SUB R10,PC,#FNmb(movwhat2):LDR R10,[R10,#FNlb(movwhat2)] ;mouvement bloc?
CMN R10,#1
BEQ nokill2

SUB R14,PC,#FNmb(movbx2):LDR R14,[R14,#FNlb(movbx2)]
                     ; test o-collision with launched block nb2
SUB R14,R14,R3:ADD R14,R14,R14,LSL#2
RSBS R14,R5,R14,LSL#2:RSBMI R14,R14,#0
CMP R14,#20:BPL nokill2                   ; orizonally killed

SUB R10,PC,#FNmb(movby2):LDR R10,[R10,#FNlb(movby2)]
                     ; test v-collision with launched block nb2
SUB R10,R10,R4:ADD R10,R10,R10,LSL#2
RSBS R10,R6,R10,LSL#2:RSBMI R10,R10,#0
CMP R10,#20:BPL nokill2
CMP R10,#15:CMPMI R14,#15:ADDPL R8,R8,#4800:BMI MonsterDead2     ; etourdi
                                                                 ; ou mort
.nokill2
SUB R10,PC,#FNmb(badwhat):LDR R10,[R10,#FNlb(badwhat)] ;mouvement bloc?
CMN R10,#1
BEQ nokill3                      ; idem pour badbloc

SUB R14,PC,#FNmb(badbx):LDR R14,[R14,#FNlb(badbx)]
                     ; test o-collision with launched block nb3
SUB R14,R14,R3:ADD R14,R14,R14,LSL#2
RSBS R14,R5,R14,LSL#2:RSBMI R14,R14,#0
CMP R14,#18:BPL nokill3                   ; orizonally killed

SUB R10,PC,#FNmb(badby):LDR R10,[R10,#FNlb(badby)]
                     ; test v-collision with launched block nb3
SUB R10,R10,R4:ADD R10,R10,R10,LSL#2
RSBS R10,R6,R10,LSL#2:RSBMI R10,R10,#0
CMP R10,#18:BPL nokill3

CMP R10,#15:CMPMI R14,#15:ADDPL R8,R8,#4800:BMI MonsterDead3     ; etourdi
                                                                 ; ou mort
.nokill3

CMP R8,#4864
BPL noPossibleChok
ADD R10,PC,#FNmb(ElectroChok):LDR R10,[R10,#FNlb(ElectroChok)]                                                      ; Teste si monstre electrifie' ;
CMP R10,#0:BEQ noPossibleChok             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CMP R5,#0
BNE noTestX
CMP R3,#3
CMPNE R3,#44
ADDEQ R8,R8,#4800    ; monstre tare' apres coup de foudre (electric)

.noTestX
CMP R6,#0
BNE noTestY
CMP R4,#3
CMPNE R4,#44
ADDEQ R8,R8,#4800    ; monstre tare' (ou doublement tare') apres foudre
.noTestY

.noPossibleChok
STMIA R2!,{R3,R4, R5,R6, R7,R8}

ADD R3,R3,R3,LSL#2:ADD R3,R5,R3,LSL#2:SUB R3,R3,R12
ADD R4,R4,R4,LSL#2:ADD R4,R6,R4,LSL#2:SUB R4,R4,R13

STMIA R1!,{R3,R4,R9}

; Pengo No1 touche' par monstre?

SUB R7,PC,#FNmb(Unreal):LDR R7,[R7,#FNlb(Unreal)]   ;Pengi est immortel
CMP R7,#0:BNE noMortel1

SUB R7,PC,#FNmb(Deadly):LDR R7,[R7,#FNlb(Deadly)]
CMP R7,#0:BNE noMortel1 ; si Pengo mort,ne le tue pas une deuxieme fois

SUB R9,PC,#FNmb(DeltaX):LDR R9,[R9,#FNlb(DeltaX)]:SUB R5,R3,R9,LSL#2
SUB R9,PC,#FNmb(DeltaY):LDR R9,[R9,#FNlb(DeltaY)]:SUB R6,R4,R9,LSL#2

CMN R5,#16
CMNPL R6,#16
BMI noMortel1
CMP R5,#16
CMPMI R6,#16
MOVMI R7,#1:SUBMI R5,PC,#FNmb(Deadly):STRMI R7,[R5,#FNlb(Deadly)]
                                           ; allarm flag ( collision )
MOV R7,R1:MOV R9,R2:MOVMI R1,#33:MOVMI R2,#44:SWIMI "Trk_MakeNoise":MOV R1,R7:MOV R2,R9
; Pengo No2 touche' par monstre?
.noMortel1
SUB R7,PC,#FNmb(Unreal2):LDR R7,[R7,#FNlb(Unreal2)]  ;Pengi est immortel
CMP R7,#0:BNE noMortel2

SUB R7,PC,#FNmb(Deadly2):LDR R7,[R7,#FNlb(Deadly2)]
CMP R7,#0:BNE noMortel2 ; si Pengo mort,ne le tue pas une deuxieme fois

SUB R9,PC,#FNmb(DeltaX2):LDR R9,[R9,#FNlb(DeltaX2)]:SUB R5,R3,R9,LSL#2
SUB R9,PC,#FNmb(DeltaY2):LDR R9,[R9,#FNlb(DeltaY2)]:SUB R6,R4,R9,LSL#2

CMN R5,#16
CMNPL R6,#16
BMI noMortel2
CMP R5,#16
CMPMI R6,#16
MOVMI R7,#1:SUBMI R5,PC,#FNmb(Deadly2):STRMI R7,[R5,#FNlb(Deadly2)]

MOV R7,R1:MOV R9,R2:MOVMI R1,#33:MOVMI R2,#44:SWIMI "Trk_MakeNoise":MOV R1,R7:MOV R2,R9

.noMortel2
.NextMonst
ADD R11,R11,R11,ROR#1:EOR R11,R11,R11,ROR#7   ; change rnd value
SUBS R0,R0,#1
BNE LmM

STR R11,Random
STR R1,PointerSpr
LDR R15,temp14_4

; ; ; ; ; ; ; ; ;

.danger
LDR R14,badwhat
CMN R14,#1:BNE noChange ;deja un bloc en mouvement

LDRB R14,[R9,#256] :CMP R14,#0:BEQ downBad
LDRB R14,[R9,#-256]:CMP R14,#0:BEQ   upBad
LDRB R14,[R9,#-4]  :CMP R14,#0:BEQ leftBad
LDRB R14,[R9,#4]   :CMP R14,#0:BEQ rightBad
B noChange

; ; ; ; ; ; ; ; ; ; ; ;

.downBad
ADD R4,R4,#1:MVN R6,#19
LDRB R14,[R9,#512]:CMP R14,#24:ADD R14,R9,#256:BMI crackIt
MOV R9,#1:STR R9,badbdy:MOV R9,#0:STR R9,badbdx
B okMoveBlock

.upBad
SUB R4,R4,#1:MOV R6,#20
LDRB R14,[R9,#-512]:CMP R14,#24:SUB R14,R9,#256:BMI crackIt

MVN R9,#0:STR R9,badbdy:MOV R9,#0:STR R9,badbdx
B okMoveBlock

.leftBad
SUB R3,R3,#1:MOV R5,#20
LDRB R14,[R9,#-8]:CMP R14,#24:SUB R14,R9,#4:BMI crackIt

MVN R9,#0:STR R9,badbdx:MOV R9,#0:STR R9,badbdy
B okMoveBlock

.rightBad
ADD R3,R3,#1:MVN R5,#19
LDRB R14,[R9,#+8]:CMP R14,#24:ADD R14,R9,#4:BMI crackIt

MOV R9,#1:STR R9,badbdx:MOV R9,#0:STR R9,badbdy

.okMoveBlock
MOV R10,#&3000:LDR R10,[R14,-R10]:STR R10,[R14]  ; unset block
MOV R14,#0:STR R14,badwhat  ; move now!
STR R3,badbx:STR R4,badby

MOV R9,R1:MOV R10,R2:MOV R1,#24:MOV R2,#20:SWI "Trk_MakeNoise":MOV R1,R9:MOV R2,R10
B noChange

;;;;;;;;;;;;;;;;;;;
.crackIt
LDR R9,LandAdr
MOV R10,#&3000:LDR R10,[R14,-R10]:STR R10,[R14],-R9  ; unset block

ADR R9,reserv:STMIA R9,{R0,R4}

LDR R10,NbOfCrash
LDR R9,CrashesBAS

LDR R0,[R9,R10,LSL#2]!:ANDS R4,R0,#&FF000000:LDRNE R4,OAdr:MOVNE R0,R0,LSL#16:ADDNE R0,R4,R0,LSR#16:MOVNE R4,#0:STRNEB R4,[R0]  ; to erase precedent

RSB R10,R10,#1:STR R10,NbOfCrash

MOV R10,#16<<24
ORR R10,R10,R14,LSR#2
STR R10,[R9]    ; met NewCrash dans table (bonne position)

MOV R9,R1:MOV R10,R2:MOV R1,#25:MOV R2,#24:SWI "Trk_MakeNoise":MOV R1,R9:MOV R2,R10

ADR R9,reserv:LDMIA R9,{R0,R4}
B noChange

.reserv EQUD 0:EQUD 0
;;;;;;;;;;;;;;;;;;;

.MonsterDead1
SUB R14,PC,#FNmb(movcrsh)
LDR R10,[R14,#FNlb(movcrsh)]!:ADD R10,R10,#1:STR R10,[R14]
                                                    ; pour s'en souvenir
B MonsterDead3

.MonsterDead2                        ; idem pour Pengo Nb2
SUB R14,PC,#FNmb(movcrsh2)
LDR R10,[R14,#FNlb(movcrsh2)]!:ADD R10,R10,#1:STR R10,[R14]

.MonsterDead3
LDR R10,OAdr:ADD R10,R10,R3
MOV R14,#0:STRB R14,[R10,R4,LSL#6]

BL SetDayOfBirth

MOV R7,R1:MOV R9,R2:MOV R1,#28:MOV R2,#42:SWI "Trk_MakeNoise":MOV R1,R7:MOV R2,R9
B NextMonst

.Limbo       ; le monstre va bientot naitre
ADD R8,R8,#1
STR R8,[R2,#20]

CMN R8,#31:BLEQ MonsterGenesis

ADD R2,R2,#24
B NextMonst

.BlurpNait
ADD R9,R7,R8,ASR#3:ADD R9,R9,#4
ADD R8,R8,#1
CMP R7,#148:ADDNE R9,R9,#4*12+4-24:ADDEQ R9,R9,#4*12
B retEtour

.Etourdi
SUB R8,R8,#16                  ; sub counter

AND R9,R8,#255:ADD R9,R7,R9,LSR#7     ; animation phase
CMP R6,#0:ADDMI R9,R9,#12+8:ADDGT R9,R9,#16+6
CMPEQ R5,#0:ADDEQ R9,R9,#12+8
CMP R5,#0:ADDMI R9,R9,#4+6:ADDGT R9,R9,#8
B retEtour
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.SetSpeedOfBirth  ; input R0=0..13 (slow..fast)
MVN R1,#0:MOV R1,R1,LSL R0:MOV R1,R1,LSR R0:STR R1,MaskForSpeed
MOV R15,R14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.SetDayOfBirth    ; input R2=monsterlist
LDR R6,MaskForSpeed
LDR R8,Random
ADD R8,R8,R8,ROR#1   ; change rnd
AND R6,R8,R6:MVN R6,R6,LSR#19:CMN R6,#47:MVNPL R6,#47 ; minimum
STR R6,[R2,#20]:ADD R2,R2,#24
STR R8,Random
MOV R15,R14

.MaskForSpeed EQUD (%1111111111111)<<19

.MonsterGenesis     ; R2=position in MonsterList
LDR R8,Random

SUB R7,PC,#FNmb(ItsChallenge):LDR R7,[R7,#FNlb(ItsChallenge)]
CMP R7,#1:BEQ MonsterChallenge

LDR R7,LandRel2     ; =Land

SUB R6,PC,#FNmb(PosX):LDR R6,[R6,#FNlb(PosX)]
SUB R9,PC,#FNmb(PosX2):LDR R9,[R9,#FNlb(PosX2)]

.TRYanother
ADD R8,R8,R8,ROR#1   ; change rnd value
                                   ; intervalle = R3 et R4 (0..47)
AND R3,R8,#%11111:AND R4,R8,#%1111<<24:ADD R3,R3,R4,LSR#24
ADD R3,R3,#3

SUB R10,R3,R6:CMP R10,#2:BCC TRYanother ;pas trop pres du pengo
SUB R10,R3,R9:CMP R10,#2:BCC TRYanother

AND R4,R8,#(%11111)<<15:MOV R4,R4,LSR#15:ADD R4,R4,R8,LSR#28
ADD R4,R4,#3

ADD R5,R3,R4,LSL#6
LDRB R5,[R7,R5,LSL#2]
CMP R5,#24:BMI TRYanother

MOV R6,#0:MOV R7,#0
STMIA R2,{R3,R4,R6,R7}

STR R8,Random

MOV R15,R14

.MonsterChallenge   ; R2=position in MonsterList

LDR R7,LandRel2     ; =Land
SUB R9,PC,#FNmb(ChallPos):LDR R9,[R9,#FNlb(ChallPos)]
ADD R7,R7,R9

.TRYanother2
ADD R8,R8,R8,ROR#1   ; change rnd value
                             ; intervalle = R3 (0..11) et R4 (0..11)
AND R3,R8,#%111:AND R4,R8,#%11<<5:ADD R3,R3,R4,LSR#5
AND R4,R8,#(%111)<<15:MOV R4,R4,LSR#15:ADD R4,R4,R8,LSR#30
ADD R3,R3,#1:ADD R4,R4,#1

ADD R5,R3,R4,LSL#6
LDRB R5,[R7,R5,LSL#2]
CMP R5,#24:BMI TRYanother2

ADD R4,R4,R9,LSR#8
AND R9,R9,#%11111100
ADD R3,R3,R9,LSR#2
MOV R6,#0:MOV R7,#0
STMIA R2,{R3,R4,R6,R7}

STR R8,Random

MOV R15,R14
;;;;;;;;;;;;;;

.GenerateAllMonsters             ; Cree tous les monstres
STR R14,temp14_6

MOV R0,#9
LDR R2,MonsterListAdr

.ForEveryMonster
 BL SetDayOfBirth
SUBS R0,R0,#1
BPL ForEveryMonster

LDR R15,temp14_6

.MonsterListAdr EQUD MonsterList

.Random EQUD -1      ; RANDOM NUMBERS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.Crashes EQUB 0:EQUB 0:EQUB 0:EQUB 0     ; x,y,kind,counter
         EQUB 0:EQUB 0:EQUB 0:EQUB 0

.cycle EQUD 0
.LSprCnt EQUD ListOfSprites
.temp14_6 EQUD 0
.LandAdr EQUD Land

.CreateAllSprites     ; input R11 = 1 or 2  (nb of pengos)
STR R14,temp14_6                 ; FIRST PENGI 1
LDR R0,LSprCnt

LDR R2,cycle:ADD R2,R2,#1:AND R2,R2,#15:STR R2,cycle  ; cycle mouvement

TST R2,#%11
BNE Apparence

SUB R1,PC,#FNmb(Unreal):LDR R7,[R1,#FNlb(Unreal)]!
CMP R7,#0
SUBNE R7,R7,#1
STRNE R7,[R1]
BNE noPengo

.Apparence
SUB R3,PC,#FNmb(DeltaX):LDR R3,[R3,#FNlb(DeltaX)]
MOV R3,R3,LSL#2
STR R3,[R0],#4

SUB R3,PC,#FNmb(DeltaY):LDR R3,[R3,#FNlb(DeltaY)]
MOV R3,R3,LSL#2
STR R3,[R0],#4

SUB R1,PC,#FNmb(PengDir):LDR R1,[R1,#FNlb(PengDir)]

SUB R3,PC,#FNmb(Deadly):LDR R7,[R3,#FNlb(Deadly)]!
CMP R7,#0
BEQ dontWorry

CMN R7,#1:BEQ Reincarnation1     ; Pengo renait apres son assassinat
.EndOfReincarnation1
CMP R7,#0    ; <0 = assassine'?
SUBMI R0,R0,#8   ; alors pas de sprite!
ADDMI R7,R7,#1
SUBMI R1,PC,#FNmb(Deadly):STRMI R7,[R1,#FNlb(Deadly)]
BMI noPengo

CMP R7,#32
ADDMI R1,R1,#16:ADDMI R1,R1,R7,LSR#4
ADDPL R1,R1,#18:ADDPL R1,R1,R2,LSR#3
ADD R7,R7,#1
STR R7,[R3]   ; Deadly
B Worry

.dontWorry
SUB R7,PC,#FNmb(DirX):LDR R7,[R7,#FNlb(DirX)]:CMP R7,#0:ADDNE R1,R1,R2,LSR#2:BNE endofmov
SUB R7,PC,#FNmb(DirY):LDR R7,[R7,#FNlb(DirY)]:CMP R7,#0:ADDNE R1,R1,R2,LSR#2:BNE endofmov

SUB R7,PC,#FNmb(Pushing):LDR R7,[R7,#FNlb(Pushing)]
CMP R7,#0:MOVGT R1,R1,LSR#2:ADDGT R1,R1,#32    ; pengi pousse le bloc

.endofmov
.Worry
STR R1,[R0],#4

; now pengo Nb 2
;;;;;;;;;;;;;;;;;;;
.noPengo
CMP R11,#2:BMI noPengo2  ; un seul joueur

TST R2,#%11
BNE Apparence2

SUB R1,PC,#FNmb(Unreal2):LDR R7,[R1,#FNlb(Unreal2)]!
CMP R7,#0
SUBNE R7,R7,#1
STRNE R7,[R1]
BNE noPengo2

.Apparence2
SUB R3,PC,#FNmb(DeltaX2):LDR R3,[R3,#FNlb(DeltaX2)]
MOV R3,R3,LSL#2
STR R3,[R0],#4

SUB R3,PC,#FNmb(DeltaY2):LDR R3,[R3,#FNlb(DeltaY2)]
MOV R3,R3,LSL#2
STR R3,[R0],#4

SUB R1,PC,#FNmb(PengDir2):LDR R1,[R1,#FNlb(PengDir2)]

SUB R3,PC,#FNmb(Deadly2)
LDR R7,[R3,#FNlb(Deadly2)]!
CMP R7,#0
BEQ dontWorry2

CMN R7,#1:BEQ Reincarnation2     ; Pengo renait apres son assassinat
.EndOfReincarnation2
CMP R7,#0    ; <0 = assassine'?
SUBMI R0,R0,#8   ; alors pas de sprite
ADDMI R7,R7,#1
SUBMI R1,PC,#FNmb(Deadly2):STRMI R7,[R1,#FNlb(Deadly2)]
BMI noPengo2

CMP R7,#32
ADDMI R1,R1,#16:ADDMI R1,R1,R7,LSR#4
ADDPL R1,R1,#18:ADDPL R1,R1,R2,LSR#3
ADD R7,R7,#1
STR R7,[R3]        ; Deadly2
B Worry2

.dontWorry2
SUB R7,PC,#FNmb(DirX2):LDR R7,[R7,#FNlb(DirX2)]:CMP R7,#0:ADDNE R1,R1,R2,LSR#2:BNE endofmov2
SUB R7,PC,#FNmb(DirY2):LDR R7,[R7,#FNlb(DirY2)]:CMP R7,#0:ADDNE R1,R1,R2,LSR#2:BNE endofmov2

SUB R7,PC,#FNmb(Pushing2):LDR R7,[R7,#FNlb(Pushing2)]
CMP R7,#0:MOVGT R1,R1,LSR#2:ADDGT R1,R1,#32    ; pengi pousse le bloc

.endofmov2
.Worry2
ADD R1,R1,#36:STR R1,[R0],#4

.noPengo2
ADR R2,Crashes       ; then Crash ( max 2 )

LDR R1,[R2]:TST R1,#&FF000000:BLNE DoCrash
LDR R1,[R2,#4]!:TST R1,#&FF000000:BLNE DoCrash

STR R0,PointerSpr
BL MoveMonsters                  ; then MONSTER

                                 ; then Blocs
LDR R10,PointerSpr

SUB R8,PC,#FNmb(movwhat):LDR R0,[R8,#FNlb(movwhat)]!
CMN R0,#1:BEQ EndOfCreation

EOR R0,R0,#%1<<31:STR R0,[R8],#12   ; MostSignificantBit ( alternance )

LDMIA R8,{R8,R9}     ; movbdx,movbdy

TST R0,#%1<<31       ;;;;;;;;;;;;;;;;;;
                                       ;

SUB R6,PC,#FNmb(movbx):LDR R0,[R6,#FNlb(movbx)]!:LDR R1,[R6,#4] ;movby

SUB R6,PC,#FNmb(ScrCoords):SUB R6,R6,#-FNlb(ScrCoords)
LDMIA R6,{R2,R3,R4,R5}      ; ScrPX,ScrPY,ScrFX,ScrFY

SUB R2,R0,R2       ; movbx-ScrPX       ;
ADD R2,R2,R2,LSL#2 ; x5                ;
SUB R2,R2,R4       ; - ScrFX
MOV R2,R2,LSL#2    ; *4                ;
SUBEQ R2,R2,R8,LSL#3
SUBEQ R2,R2,R8,LSL#1                   ;
                                       ;
SUB R3,R1,R3       ; movby-ScrPY       ;
ADD R3,R3,R3,LSL#2 ; x5
SUB R3,R3,R5       ; - ScrFY           ;
MOV R3,R3,LSL#2    ; *4                ;
SUBEQ R3,R3,R9,LSL#3                   ;
SUBEQ R3,R3,R9,LSL#1
                                       ;
SUB R4,PC,#FNmb(movwhat):LDR R4,[R4,#FNlb(movwhat)]

MOV R4,R4,LSL#2                        ;
ADD R4,R4,#84
STMIA R10!,{R2,R3,R4}                  ;
                                   ;   ;
BEQ EndOfCreation                 ;;;;;;
                                   ;
ADD R0,R0,R8
ADD R1,R1,R9

LDR R4,LandAdr
ADD R5,R0,R1,LSL#6
LDRB R6,[R4,R5,LSL#2]  ;(mx+64*my%)*4+Land
CMP R6,#24
BPL EndOfCreationBut

SUB R0,R0,R8
SUB R1,R1,R9

STR R0,scoreX
STR R1,scoreY
SUB R12,PC,#FNmb(movcrsh):LDR R11,[R12,#FNlb(movcrsh)]!
MOV R3,#0:STR R3,[R12]      ; reset movcrsh to 0
MOV R3,#72+3                                               ; ----------
CMP R11,#1:MOVEQ R3,#0+72 : MOVEQ R12,#20:MOVMI R12,#0     ; 0 ou 20
CMP R11,#2:MOVEQ R3,#1+72 : MOVEQ R12,#50                  ; 50
CMP R11,#3:MOVEQ R3,#2+72 : MOVEQ R12,#100:MOVGT R12,#200  ; 100 ou 200
STR R3,scoreS
CMP R11,#0:MOVGT R11,#40:STR R11,scoreT ;si tue' monstres,alors view score

BL AddScore1            ; +R12 points pour avoir tue' des monstres

MVN R11,#0:SUB R12,PC,#FNmb(movwhat)
LDR R3,[R12,#FNlb(movwhat)]!:STR R11,[R12] ; read movwhat & stop bloc

BIC R3,R3,#%1<<31
ORR R12,R3,R3,LSL#8:ORR R12,R12,R12,LSL#16   ; byte >> word
ADD R5,R0,R1,LSL#6     ;(mx+64*my%)*4+Land
.occupe1
LDRB R11,[R4,R5,LSL#2]
CMP R11,#24:SUBMI R5,R5,R8:SUBMI R5,R5,R9,LSL#6:BMI occupe1
STR R12,[R4,R5,LSL#2]!       ; set bloc on screen

MOV R11,#1:BL ArbitreEndBlk   ; R11=1 indique que c'est player1
B EndOfCreation

.EndOfCreationBut
SUB R12,PC,#FNmb(movbx):STR R0,[R12,#FNlb(movbx)]!:STR R1,[R12,#4] ;movby

.EndOfCreation
       ;**************** IDEM but for pengo 2 ****************;

SUB R8,PC,#FNmb(movwhat2):LDR R0,[R8,#FNlb(movwhat2)]!
CMN R0,#1:BEQ EndOfCreation2

EOR R0,R0,#%1<<31:STR R0,[R8],#12   ; MostSignificantBit ( alternance )

LDMIA R8,{R8,R9}     ; movbdx2,movbdy2

TST R0,#%1<<31       ;;;;;;;;;;;;;;;;;;
                                       ;

SUB R6,PC,#FNmb(movbx2):LDR R0,[R6,#FNlb(movbx2)]!:LDR R1,[R6,#4] ;movby2

SUB R6,PC,#FNmb(ScrCoords):SUB R6,R6,#-FNlb(ScrCoords)
LDMIA R6,{R2,R3,R4,R5}      ; ScrPX,ScrPY,ScrFX,ScrFY

SUB R2,R0,R2       ; movbx-ScrPX       ;
ADD R2,R2,R2,LSL#2 ; x5                ;
SUB R2,R2,R4       ; - ScrFX
MOV R2,R2,LSL#2    ; *4                ;
SUBEQ R2,R2,R8,LSL#3
SUBEQ R2,R2,R8,LSL#1                   ;
                                       ;
SUB R3,R1,R3       ; movby-ScrPY       ;
ADD R3,R3,R3,LSL#2 ; x5
SUB R3,R3,R5       ; - ScrFY           ;
MOV R3,R3,LSL#2    ; *4                ;
SUBEQ R3,R3,R9,LSL#3                   ;
SUBEQ R3,R3,R9,LSL#1
                                       ;
SUB R4,PC,#FNmb(movwhat2):LDR R4,[R4,#FNlb(movwhat2)]

MOV R4,R4,LSL#2                        ;
ADD R4,R4,#84
STMIA R10!,{R2,R3,R4}                  ;
                                   ;   ;
BEQ EndOfCreation2                ;;;;;;
                                   ;
ADD R0,R0,R8
ADD R1,R1,R9

LDR R4,LandAdr
ADD R5,R0,R1,LSL#6
LDRB R6,[R4,R5,LSL#2]  ;(mx+64*my%)*4+Land
CMP R6,#24
BPL EndOfCreationBut2

SUB R0,R0,R8
SUB R1,R1,R9

STR R0,scoreX
STR R1,scoreY
SUB R12,PC,#FNmb(movcrsh2):LDR R11,[R12,#FNlb(movcrsh2)]!
MOV R3,#0:STR R3,[R12]      ; reset movcrsh to 0
MOV R3,#72+3                                               ; ----------
CMP R11,#1:MOVEQ R3,#0+72 : MOVEQ R12,#20:MOVMI R12,#0     ; 0 ou 20
CMP R11,#2:MOVEQ R3,#1+72 : MOVEQ R12,#50                  ; 50
CMP R11,#3:MOVEQ R3,#2+72 : MOVEQ R12,#100:MOVGT R12,#200  ; 100 ou 200
STR R3,scoreS
CMP R11,#0:MOVGT R11,#40:STR R11,scoreT ;si tue' monstres,alors view score

BL AddScore2            ; +R12 points pour avoir tue' des monstres

MVN R11,#0:SUB R12,PC,#FNmb(movwhat2)
LDR R3,[R12,#FNlb(movwhat2)]!:STR R11,[R12]  ; read movwhat & stop bloc

BIC R3,R3,#%1<<31
ORR R12,R3,R3,LSL#8:ORR R12,R12,R12,LSL#16   ; byte >> word

ADD R5,R0,R1,LSL#6     ;(mx+64*my%)*4+Land
.occupe2
LDRB R11,[R4,R5,LSL#2]
CMP R11,#24:SUBMI R5,R5,R8:SUBMI R5,R5,R9,LSL#6:BMI occupe2

STR R12,[R4,R5,LSL#2]!       ; set bloc on screen

MOV R11,#2:BL ArbitreEndBlk  ;R11=2 indique que c'est player2
B EndOfCreation2

.EndOfCreationBut2
SUB R12,PC,#FNmb(movbx2):STR R0,[R12,#FNlb(movbx2)]!:STR R1,[R12,#4] ;movby2

.EndOfCreation2

       ;**************** IDEM but for block BAD **************;

SUB R8,PC,#FNmb(badwhat):LDR R0,[R8,#FNlb(badwhat)]!
CMN R0,#1:BEQ EndOfCreation3

EOR R0,R0,#%1<<31:STR R0,[R8],#12   ; MostSignificantBit ( alternance )

LDMIA R8,{R8,R9}     ; badbdx,badbdy

TST R0,#%1<<31       ;;;;;;;;;;;;;;;;;;
                                       ;

SUB R6,PC,#FNmb(badbx):LDR R0,[R6,#FNlb(badbx)]!:LDR R1,[R6,#4] ;badby

SUB R6,PC,#FNmb(ScrCoords):SUB R6,R6,#-FNlb(ScrCoords)
LDMIA R6,{R2,R3,R4,R5}      ; ScrPX,ScrPY,ScrFX,ScrFY

SUB R2,R0,R2       ; movbx-ScrPX       ;
ADD R2,R2,R2,LSL#2 ; x5                ;
SUB R2,R2,R4       ; - ScrFX
MOV R2,R2,LSL#2    ; *4                ;
SUBEQ R2,R2,R8,LSL#3
SUBEQ R2,R2,R8,LSL#1                   ;
                                       ;
SUB R3,R1,R3       ; movby-ScrPY       ;
ADD R3,R3,R3,LSL#2 ; x5
SUB R3,R3,R5       ; - ScrFY           ;
MOV R3,R3,LSL#2    ; *4                ;
SUBEQ R3,R3,R9,LSL#3                   ;
SUBEQ R3,R3,R9,LSL#1
                                       ;
MOV R4,#84  ; normal block
STMIA R10!,{R2,R3,R4}                  ;
                                   ;   ;
BEQ EndOfCreation3                ;;;;;;
                                   ;
ADD R0,R0,R8
ADD R1,R1,R9

LDR R4,LandAdr
ADD R5,R0,R1,LSL#6
LDRB R6,[R4,R5,LSL#2]  ;(mx+64*my%)*4+Land
CMP R6,#24
BPL EndOfCreationBut3

SUB R0,R0,R8
SUB R1,R1,R9

MVN R11,#0:SUB R12,PC,#FNmb(badwhat)
STR R11,[R12,#FNlb(badwhat)]  ; read badwhat & stop bloc

ADD R5,R0,R1,LSL#6     ;(mx+64*my%)*4+Land
LDRB R12,[R4,R5,LSL#2]
CMP R12,#24
MOVPL R12,#0
STRPL R12,[R4,R5,LSL#2] ; set bloc on screen if there is not another block

.EndOfCreationBut3
SUB R12,PC,#FNmb(badbx):STR R0,[R12,#FNlb(badbx)]!:STR R1,[R12,#4] ;badby

.EndOfCreation3
;;;;;;;;;;;;;;;;;;; Now sprite score ;;;;;;;;;;;;;;

LDR R11,scoreT
CMP R11,#0:BEQ noLittleScore

SUB R11,R11,#1:STR R11,scoreT

LDR R0,scoreX
LDR R1,scoreY

SUB R6,PC,#FNmb(ScrCoords):SUB R6,R6,#-FNlb(ScrCoords)
LDMIA R6,{R2,R3,R4,R5}      ; ScrPX,ScrPY,ScrFX,ScrFY

SUB R2,R0,R2       ; (movbx-ScrPX)*5-ScrFX
ADD R2,R2,R2,LSL#2
SUB R2,R2,R4
MOV R2,R2,LSL#2    ; *4

SUB R3,R1,R3       ; (movby-ScrPY)*5-ScrFY
ADD R3,R3,R3,LSL#2
SUB R3,R3,R5
MOV R3,R3,LSL#2    ; *4

LDR R4,scoreS

STMIA R10!,{R2,R3,R4}

.noLittleScore

LDR R11,bombT
CMP R11,#0
BEQ noBomb

SUB R11,R11,#1:STR R11,bombT

LDR R0,bombX
LDR R1,bombY

SUB R6,PC,#FNmb(ScrCoords):SUB R6,R6,#-FNlb(ScrCoords)
LDMIA R6,{R2,R3,R4,R5}      ; ScrPX,ScrPY,ScrFx,ScrFY

SUB R2,R0,R2
ADD R2,R2,R2,LSL#2
SUB R2,R2,R4
MOV R2,R2,LSL#2    ; *4

SUB R3,R1,R3
ADD R3,R3,R3,LSL#2
SUB R3,R3,R5
MOV R3,R3,LSL#2    ; *4

RSB R11,R11,#31
MOV R11,R11,LSR#2
ADD R4,R11,#76

STMIA R10!,{R2,R3,R4}

.noBomb
MOV R11,#&FF0000:STR R11,[R10]       ; Sentinel
LDR R15,temp14_6


.NbOfCrash EQUD 0                        ; max 2 crashes

.scoreX EQUD 0
.scoreY EQUD 0
.scoreT EQUD 0
.scoreS EQUD 0

.bombX EQUD 0
.bombY EQUD 0
.bombT EQUD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.OccTablBAS EQUD OccTable

.DoCrash    ; Affiche bloc casse' (infos=R1)
MOV R8,R1,LSR#24
SUBS R8,R8,#1:BIC R1,R1,#&FF<<24:ORR R1,R1,R8,LSL#24   ; decrement counter

AND R4,R1,#&FF0000
MOV R4,R4,LSR#14:ADD R4,R4,#84+3:SUB R4,R4,R8,LSR#2

SUB R6,PC,#FNmb(ScrCoords):SUB R6,R6,#-FNlb(ScrCoords)
LDMIA R6,{R6,R7,R9,R10}      ; ScrPX,ScrPY,ScrFx,ScrFY

AND R3,R1,#%111111
RSB R6,R6,R3
ADD R6,R6,R6,LSL#2   ;x5
SUB R6,R6,R9
MOV R6,R6,LSL#2

AND R9,R1,#%111111<<6
RSB R7,R7,R9,LSR#6
ADD R7,R7,R7,LSL#2   ;x5
SUB R7,R7,R10
MOV R7,R7,LSL#2

ADD R3,R3,R9
LDR R9,OccTablBAS
ORRGT R8,R8,#%11
STRB R8,[R9,R3]      ; save wall on OccTable

STMIA R0!,{R6,R7} ;x,y
STR R4,[R0],#4    ;sprnumb

STR R1,[R2]
MOV R15,R14

.Assassin          ; for 2 players mode > ctrl if Pengo killed by partner

; Cas Pengo1

SUB R0,PC,#FNmb(Deadly):LDR R0,[R0,#FNlb(Deadly)]
CMP R0,#0:BMI casPengo2       ; Pengo1 deja mort! plus la peine d'enqueter
SUB R0,PC,#FNmb(movwhat2):LDR R0,[R0,#FNlb(movwhat2)]
CMN R0,#1:BEQ casPengo2                            ; pas de crime possible

SUB R0,PC,#FNmb(PenCoords):SUB R0,R0,#-FNlb(PenCoords)
LDMIA R0,{R3,R4,R5,R6}
SUB R0,PC,#FNmb(movbx2):LDR R0,[R0,#FNlb(movbx2)]
SUB R0,R0,R3:ADD R0,R0,R0,LSL#2
RSBS R0,R5,R0:RSBMI R0,R0,#0
CMP R0,#3:BGT casPengo2

SUB R0,PC,#FNmb(movby2):LDR R0,[R0,#FNlb(movby2)]
SUB R0,R0,R4:ADD R0,R0,R0,LSL#2
RSBS R0,R6,R0:RSBMI R0,R0,#0
CMP R0,#4:BGT casPengo2

MVN R0,#255:SUB R3,PC,#FNmb(Deadly):STR R0,[R3,#FNlb(Deadly)] ; crime!

MOV R1,#30:MOV R2,#16:SWI "Trk_MakeNoise"

MOV R15,R14    ; ok,c'est regle'

.casPengo2
SUB R0,PC,#FNmb(Deadly2):LDR R0,[R0,#FNlb(Deadly2)]
CMP R0,#0:MOVMI R15,R14       ; Pengo2 deja mort! plus la peine d'enqueter
SUB R0,PC,#FNmb(movwhat):LDR R0,[R0,#FNlb(movwhat)]
CMN R0,#1:MOVEQ R15,R14                            ; pas de crime possible

SUB R0,PC,#FNmb(PenCoords2):SUB R0,R0,#-FNlb(PenCoords2)
LDMIA R0,{R3,R4,R5,R6}
SUB R0,PC,#FNmb(movbx):LDR R0,[R0,#FNlb(movbx)]
SUB R0,R0,R3:ADD R0,R0,R0,LSL#2
RSBS R0,R5,R0:RSBMI R0,R0,#0
CMP R0,#3:MOVGT R15,R14

SUB R0,PC,#FNmb(movby):LDR R0,[R0,#FNlb(movby)]
SUB R0,R0,R4:ADD R0,R0,R0,LSL#2
RSBS R0,R6,R0:RSBMI R0,R0,#0
CMP R0,#4:MOVGT R15,R14

MVN R0,#255:SUB R3,PC,#FNmb(Deadly2):STR R0,[R3,#FNlb(Deadly2)] ; crime!

MOV R1,#30:MOV R2,#16:SWI "Trk_MakeNoise"

MOV R15,R14

.CtrlMonsterBlock_P2
SUB R0,PC,#FNmb(badwhat):LDR R0,[R0,#FNlb(badwhat)]
CMN R0,#1:MOVEQ R15,R14           ; pas de crime possible
SUB R0,PC,#FNmb(Deadly2):LDR R0,[R0,#FNlb(Deadly2)]
CMP R0,#0:BMI CtrlMonsterBlock_P1 ; plus la peine d'enqueter

SUB R0,PC,#FNmb(PenCoords2):SUB R0,R0,#-FNlb(PenCoords2)
LDMIA R0,{R3,R4,R5,R6}
SUB R0,PC,#FNmb(badbx):LDR R0,[R0,#FNlb(badbx)]
SUB R0,R0,R3:ADD R0,R0,R0,LSL#2
RSBS R0,R5,R0:RSBMI R0,R0,#0
CMP R0,#3:BGT CtrlMonsterBlock_P1

SUB R0,PC,#FNmb(badby):LDR R0,[R0,#FNlb(badby)]
SUB R0,R0,R4:ADD R0,R0,R0,LSL#2
RSBS R0,R6,R0:RSBMI R0,R0,#0
CMP R0,#4:BGT CtrlMonsterBlock_P1

MVN R0,#255:SUB R3,PC,#FNmb(Deadly2):STR R0,[R3,#FNlb(Deadly2)] ; crime!

MOV R1,#30:MOV R2,#20:SWI "Trk_MakeNoise"

.CtrlMonsterBlock_P1
SUB R0,PC,#FNmb(badwhat):LDR R0,[R0,#FNlb(badwhat)]
CMN R0,#1:MOVEQ R15,R14                            ; pas de crime possible
SUB R0,PC,#FNmb(Deadly):LDR R0,[R0,#FNlb(Deadly)]
CMP R0,#0:MOVMI R15,R14       ; Pengo1 deja mort! plus la peine d'enqueter

SUB R0,PC,#FNmb(PenCoords):SUB R0,R0,#-FNlb(PenCoords)
LDMIA R0,{R3,R4,R5,R6}
SUB R0,PC,#FNmb(badbx):LDR R0,[R0,#FNlb(badbx)]
SUB R0,R0,R3:ADD R0,R0,R0,LSL#2
RSBS R0,R5,R0:RSBMI R0,R0,#0
CMP R0,#3:MOVGT R15,R14

SUB R0,PC,#FNmb(badby):LDR R0,[R0,#FNlb(badby)]
SUB R0,R0,R4:ADD R0,R0,R0,LSL#2
RSBS R0,R6,R0:RSBMI R0,R0,#0
CMP R0,#4:MOVGT R15,R14

MVN R0,#255:SUB R3,PC,#FNmb(Deadly):STR R0,[R3,#FNlb(Deadly)] ; crime!

MOV R1,#30:MOV R2,#20:SWI "Trk_MakeNoise" ;ha!
MOV R15,R14

\ \ \ \ \ \ \ \ \ \ \ \                 \ \ \ \ \ \ \ \ \ \ \ \ \

.LandOADr EQUD Land

.Reincarnation1              ; Pengo (ecrase' par bloc) renait
LDR R3,Random

MVN R7,#1   ; pengo pas encore vivant

SUB R4,PC,#FNmb(ScrPX):LDR R4,[R4,#FNlb(ScrPX)]
AND R6,R3,#%11:ADD R4,R4,R6:ADD R4,R4,#4
SUB R5,PC,#FNmb(ScrPY):LDR R5,[R5,#FNlb(ScrPY)]
AND R6,R3,#%1100:ADD R5,R5,R6,LSR#2:ADD R5,R5,#4

LDR R3,LandOADr
ADD R3,R3,R4,LSL#2
LDRB R3,[R3,R5,LSL#8]
CMP R3,#24:BMI EndOfReincarnation1  ; pas trouve' de place

SUB R3,PC,#FNmb(PosX2):LDR R3,[R3,#FNlb(PosX2)]
SUBS R3,R3,R4:RSBMI R3,R3,#0:CMP R3,#2  ; ctrl si pas trop pres de l'autre
BMI EndOfReincarnation1
SUB R3,PC,#FNmb(PosX):STR R4,[R3,#FNlb(PosX)]!:STR R5,[R3,#4]!  ; new life
MOV R4,#0:STR R4,[R3,#4]!:STR R4,[R3,#4]  ; FinX,Y = 0

MVN R7,#0   ; maintenant pengo vivant

MOV R4,R1:MOV R5,R2:MOV R1,#30:MOV R2,#40:SWI "Trk_MakeNoise":MOV R1,R4:MOV R2,R5 ;hihi
B EndOfReincarnation1

.Reincarnation2
LDR R3,Random

MVN R7,#1

SUB R4,PC,#FNmb(ScrPX):LDR R4,[R4,#FNlb(ScrPX)]
AND R6,R3,#%11:ADD R4,R4,R6:ADD R4,R4,#4
SUB R5,PC,#FNmb(ScrPY):LDR R5,[R5,#FNlb(ScrPY)]
AND R6,R3,#%1100:ADD R5,R5,R6,LSR#2:ADD R5,R5,#4

LDR R3,LandOADr
ADD R3,R3,R4,LSL#2
LDRB R3,[R3,R5,LSL#8]
CMP R3,#24:BMI EndOfReincarnation2

SUB R3,PC,#FNmb(PosX):LDR R3,[R3,#FNlb(PosX)]
SUBS R3,R3,R4:RSBMI R3,R3,#0:CMP R3,#2:BMI EndOfReincarnation2

SUB R3,PC,#FNmb(PosX2):STR R4,[R3,#FNlb(PosX2)]!:STR R5,[R3,#4]! ;new life (but only if distant from other pengo)
MOV R4,#0:STR R4,[R3,#4]!:STR R4,[R3,#4]  ; FinX,Y = 0

MVN R7,#0

MOV R4,R1:MOV R5,R2:MOV R1,#30:MOV R2,#40:SWI "Trk_MakeNoise":MOV R1,R4:MOV R2,R5
B EndOfReincarnation2

              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;; et voici l'impitoyable ARBITRE du jeu ;;;;;;;;;;;;;;;;
              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.temp14_11 EQUD 0
.CanTransfer EQUD 0   ; flag
.LandSBAS EQUD Land

.Arbitre               ; Ctrl Transporter/Score/...
STR R14,temp14_11

;;;;;;;;;;;;;;;
; TRANSPORTER ;
;;;;;;;;;;;;;;;

SUB R0,PC,#FNmb(FinX):LDR R0,[R0,#FNlb(FinX)]
SUB R1,PC,#FNmb(FinY):LDR R1,[R1,#FNlb(FinY)]

CMP R0,#0         ; Pengi est-il arrete'?
CMPEQ R1,#0
MOVNE R2,#0
BNE endTransport

LDR R2,CanTransfer
CMP R2,#0
BNE endTransport

LDR R3,LandSBAS

SUB R0,PC,#FNmb(PosX):LDR R0,[R0,#FNlb(PosX)]
SUB R1,PC,#FNmb(PosY):LDR R1,[R1,#FNlb(PosY)]

LDR R4,TraDta:CMP R0,R4:LDREQ R4,TraDta+4:CMPEQ R1,R4:BEQ FirstTransport
LDR R4,TraDta+8:CMP R0,R4:LDREQ R4,TraDta+12:CMPEQ R1,R4:BEQ SeconTransport
LDR R4,TraDta+16:CMP R0,R4:LDREQ R4,TraDta+20:CMPEQ R1,R4:BEQ ThirdTransport

.endTransport
STR R2,CanTransfer

;;;;;;; Cyclone ;;;;;;;;;;

ADR R0,CycloneList

LDR R1,PaceMaker
ADD R1,R1,#1
AND R1,R1,#%1111
STR R1,PaceMaker

TST R1,#%1:BNE noTurn   ; pour ralentir

LDR R0,[R0,R1,LSL#1] ; select right cyclone
CMP R0,#0:BEQ noTurn

; turn
;;;;;;;

SUB R0,R0,#65*4   ; corner left up

LDMIA R0,{R1,R2,R3}:ADD R0,R0,#64*4
LDMIA R0,{R4,R5,R6}:ADD R0,R0,#64*4
LDMIA R0,{R7,R8,R9}:SUB R0,R0,#63*4

MOV R10,#16       ; bad block
MOV R12,#14:ORR R12,R12,R12,LSL#8:ORR R12,R12,R12,LSL#16  ; The Cyclone

CMP R1,R12:BEQ noB1:TST R1,#%111<<4:MOVEQ R10,R1:SUBEQ R11,R0,#4*65
.noB1
CMP R2,R12:BEQ noB2:TST R2,#%111<<4:BNE noB2:TST R10,#%111<<4:STREQ R10,[R0,#-4*64]:MOV R10,R2:SUBNE R11,R0,#4*64
.noB2
CMP R3,R12:BEQ noB3:TST R3,#%111<<4:BNE noB3:TST R10,#%111<<4:STREQ R10,[R0,#-4*63]:MOV R10,R3:SUBNE R11,R0,#4*63
.noB3
CMP R6,R12:BEQ noB4:TST R6,#%111<<4:BNE noB4:TST R10,#%111<<4:STREQ R10,[R0,#+4*01]:MOV R10,R6:ADDNE R11,R0,#4*01
.noB4
CMP R9,R12:BEQ noB5:TST R9,#%111<<4:BNE noB5:TST R10,#%111<<4:STREQ R10,[R0,#+4*65]:MOV R10,R9:ADDNE R11,R0,#4*65
.noB5
CMP R8,R12:BEQ noB6:TST R8,#%111<<4:BNE noB6:TST R10,#%111<<4:STREQ R10,[R0,#+4*64]:MOV R10,R8:ADDNE R11,R0,#4*64
.noB6
CMP R7,R12:BEQ noB7:TST R7,#%111<<4:BNE noB7:TST R10,#%111<<4:STREQ R10,[R0,#+4*63]:MOV R10,R7:ADDNE R11,R0,#4*63
.noB7
CMP R4,R12:BEQ noB8:TST R4,#%111<<4:BNE noB8:TST R10,#%111<<4:STREQ R10,[R0,#-4*01]:MOV R10,R4:SUBNE R11,R0,#4*01
.noB8
TST R10,#%111<<4:STREQ R10,[R11]  ;loop cyclone
.noTurn

BL RefreshScore

LDR R15,temp14_11
;;;;;;; Cyclone Datas (list . Land+x+y*64 ) ;;;;;;;;;;;

.PaceMaker EQUD 0    ; pour passer d'un cyclone a' l'autre

.CycloneList         ; maximum 8 cyclones
EQUD 10
EQUD 08
EQUD 33
EQUD 40
EQUD 00
EQUD 00
EQUD 00
EQUD 00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.Offst1 EQUD 4*(0+0*64)             ; =0 >> noTransporter
.Offst2 EQUD 4*(0+0*64)
.Offst3 EQUD 4*(0+0*64)

.FirstTransport
LDR R4,Offst2
LDRB R4,[R3,R4]
CMP R4,#24
BMI noFUno

MOV R1,#28:MOV R2,#10:SWI "Trk_MakeNoise"
LDR R0,TraDta+8:LDR R1,TraDta+12
SUB R2,PC,#FNmb(PosX):STR R0,[R2,#FNlb(PosX)]!:STR R1,[R2,#4]
MOV R2,#1
B endTransport
.noFUno
LDR R4,Offst3
LDRB R4,[R3,R4]
CMP R4,#24
BMI endTransport

MOV R1,#28:MOV R2,#10:SWI "Trk_MakeNoise"
LDR R0,TraDta+16:LDR R1,TraDta+20
SUB R2,PC,#FNmb(PosX):STR R0,[R2,#FNlb(PosX)]!:STR R1,[R2,#4]
MOV R2,#1
B endTransport

.SeconTransport
LDR R4,Offst3
LDRB R4,[R3,R4]
CMP R4,#24
BMI noFDue

MOV R1,#28:MOV R2,#10:SWI "Trk_MakeNoise"
LDR R0,TraDta+16:LDR R1,TraDta+20
SUB R2,PC,#FNmb(PosX):STR R0,[R2,#FNlb(PosX)]!:STR R1,[R2,#4]
MOV R2,#1
B endTransport
.noFDue
LDR R4,Offst1
LDRB R4,[R3,R4]
CMP R4,#24
BMI endTransport

MOV R1,#28:MOV R2,#10:SWI "Trk_MakeNoise"
LDR R0,TraDta:LDR R1,TraDta+4
SUB R2,PC,#FNmb(PosX):STR R0,[R2,#FNlb(PosX)]!:STR R1,[R2,#4]
MOV R2,#1
B endTransport

.ThirdTransport
LDR R4,Offst1
LDRB R4,[R3,R4]
CMP R4,#24
BMI noFTre

MOV R1,#28:MOV R2,#10:SWI "Trk_MakeNoise"
LDR R0,TraDta:LDR R1,TraDta+4
SUB R2,PC,#FNmb(PosX):STR R0,[R2,#FNlb(PosX)]!:STR R1,[R2,#4]
MOV R2,#1
B endTransport
.noFTre
LDR R4,Offst2
LDRB R4,[R3,R4]
CMP R4,#24
BMI endTransport

MOV R1,#28:MOV R2,#10:SWI "Trk_MakeNoise"
LDR R0,TraDta+8:LDR R1,TraDta+12
SUB R2,PC,#FNmb(PosX):STR R0,[R2,#FNlb(PosX)]!:STR R1,[R2,#4]
MOV R2,#1
B endTransport

; ; ; ; ; ; ; ; ;
.TraDta     EQUD 0:EQUD 0  ; x,y pos of Transporters
            EQUD 0:EQUD 0
            EQUD 0:EQUD 0
.MakeOffsts
ADR R0,TraDta
LDMIA R0,{R1,R2, R3,R4, R5,R6}

ADD R7,R1,R2,LSL#6:MOV R7,R7,LSL#2:STR R7,Offst1
ADD R7,R3,R4,LSL#6:MOV R7,R7,LSL#2:STR R7,Offst2
ADD R7,R5,R6,LSL#6:MOV R7,R7,LSL#2:STR R7,Offst3

MOV R15,R14

; Arbitre teste le bloc casse' + sa position
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.ArbitreCrash        ; R7=pos in land , R3=Kind Of Block    ; R11 player

ADD PC,PC,R3,LSL#2
EQUS "JUMP"
MOV R15,R14    ; Normal
B TheBeer      ; Drink (Alcol)
B TheBomb      ; Bomb
B Poison
B OneLess
B Aluminium
B Batterie
B DDT
B CFC
B Radioactivity
B Chemical

\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.Magic
SUB R7,PC,#FNmb(Unreal):SUB R7,R7,#-FNlb(Unreal)
CMP R11,#1:MOV R3,#160:STREQ R3,[R7]:STRNE R3,[R7,#4]
MOV R1,#28:MOV R2,#20:SWI "Trk_MakeNoise"
MOV R15,R14      ; Bloc qui rend invincible pendant ~15 seconds

\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.TheBeer                ; Inverse directions
MOV R1,#32:MOV R2,#10:SWI "Trk_MakeNoise"
CMP R11,#2:BEQ ReversePl2:B ReversePl1
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.TheBomb
MOV R3,#1
CMP R11,#1                ; quel joueur a fait la betise?
SUBEQ R4,PC,#FNmb(Deadly):STREQ R3,[R4,#FNlb(Deadly)]
SUBNE R4,PC,#FNmb(Deadly2):STRNE R3,[R4,#FNlb(Deadly2)]

MOV R3,#32:STR R3,bombT

AND R3,R7,#63<<2:MOV R3,R3,LSR#2:STR R3,bombX
MOV R3,R7,LSR#8:STR R3,bombY
MOV R1,#26:MOV R2,#20:SWI "Trk_MakeNoise"
MOV R15,R14
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.Poison           ; should be in contact with aluminium
LDR R4,LandSBAS
ADD R7,R4,R7

LDRB R4,[R7,#-4]:CMP R4,#5:BEQ OneLess
LDRB R4,[R7,#+4]:CMP R4,#5:BEQ OneLess
LDRB R4,[R7,#-256]:CMP R4,#5:BEQ OneLess
LDRB R4,[R7,#+256]:CMP R4,#5:BEQ OneLess

B YoureDead
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.CFC
CMP R6,#12        ; Pengo mort si CFC pas casse' depuis le haut
BNE YoureDead
B OneLess
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.Aluminium
B YoureDead
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.Radioactivity            ; RADIOACTIVITE ;
LDR R4,LandSBAS
ADD R7,R4,R7

LDRB R4,[R7,#-4]:CMP R4,#9:BEQ YoureDead
LDRB R4,[R7,#+4]:CMP R4,#9:BEQ YoureDead
LDRB R4,[R7,#-256]:CMP R4,#9:BEQ YoureDead
LDRB R4,[R7,#+256]:CMP R4,#9:BEQ YoureDead
B OneLess
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.Batterie
CMP R6,#8        ; m'indique direction du pengo R6<8 = left&right
BMI YoureDead
B OneLess
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.DDT
LDR R4,LandSBAS
ADD R7,R4,R7

LDRB R4,[R7,#-4]:CMP R4,#7:BEQ OneLess
LDRB R4,[R7,#+4]:CMP R4,#7:BEQ OneLess
LDRB R4,[R7,#-256]:CMP R4,#7:BEQ OneLess
LDRB R4,[R7,#+256]:CMP R4,#7:BEQ OneLess

B YoureDead
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.Chemical
;B YoureDead
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \
.YoureDead
CMP R11,#1
MOV R7,#1
SUBEQ R4,PC,#FNmb(Deadly):STREQ R7,[R4,#FNlb(Deadly)]
SUBNE R4,PC,#FNmb(Deadly2):STRNE R7,[R4,#FNlb(Deadly2)]

MOV R1,#31:MOV R2,#22:SWI "Trk_MakeNoise"
B OneLess

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Arbitre teste le bloc qui s'arrete
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.ArbitreEndBlk     ; R3=Kind Of Block ; R4= pos In Land
CMP R3,#15:BNE endDiamond
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LDRB R3,[R4,#-256]               ; Controle si quadruple diamond ;
CMP R3,#15:BNE noDiamUP          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LDRB R3,[R4,#4]
CMP R3,#15:BEQ noDiamLeft1

LDRB R3,[R4,#-4]
CMP R3,#15:BNE endDiamond
LDRB R3,[R4,#-260]
CMP R3,#15:BNE endDiamond
B Diamond

.noDiamLeft1
LDRB R3,[R4,#-252]
CMP R3,#15:BEQ Diamond
B endDiamond

.noDiamUP
LDRB R3,[R4,#256]
CMP R3,#15:BNE endDiamond
LDRB R3,[R4,#4]
CMP R3,#15:BEQ noDiamLeft2

LDRB R3,[R4,#-4]
CMP R3,#15:BNE endDiamond
LDRB R3,[R4,#252]
CMP R3,#15:BNE endDiamond
B Diamond

.noDiamLeft2
LDRB R3,[R4,#260]
CMP R3,#15:BEQ Diamond

.endDiamond
CMP R3,#10            ; controle si c'est un chemical
BNE noChem
                     ; si chemical alors crash it

MOV R2,#&3000
LDR R1,[R4,-R2]:STR R1,[R4]

LDR R1,NbOfCrash
SUB R2,PC,#FNmb(Crashes):SUB R2,R2,#-FNlb(Crashes)

LDR R0,[R2,R1,LSL#2]:ANDS R7,R0,#&FF000000:LDRNE R7,OAdr2:MOVNE R0,R0,LSL#16:ADDNE R0,R7,R0,LSR#16:MOVNE R7,#0:STRNEB R7,[R0]   ; to erase precedent

MOV R0,#16<<24
ORR R0,R0,R3,LSL#16
LDR R7,LandSBAS:SUB R4,R4,R7
ORR R0,R0,R4,LSR#2
STR R0,[R2,R1,LSL#2]    ; met NewCrash dans table (bonne position(R1))

RSB R1,R1,#1:STR R1,NbOfCrash

MOV R1,#34:MOV R2,#24:SWI "Trk_MakeNoise"
B OneLess

.noChem
CMP R3,#05            ; controle si c'est aluminium
BNE noAlu

LDRB R2,[R4,#4]:CMP R2,#23:LDRNEB R2,[R4,#-4]:CMPNE R2,#23:LDRNEB R2,[R4,#256]:CMPNE R2,#23:LDRNEB R2,[R4,#-256]:CMPNE R2,#23:BNE noAlu

MOV R2,#&3000                    ;crash alu when in contact with electric
LDR R1,[R4,-R2]:STR R1,[R4]

LDR R1,NbOfCrash
SUB R2,PC,#FNmb(Crashes):SUB R2,R2,#-FNlb(Crashes)

LDR R0,[R2,R1,LSL#2]:ANDS R7,R0,#&FF000000:LDRNE R7,OAdr2:MOVNE R0,R0,LSL#16:ADDNE R0,R7,R0,LSR#16:MOVNE R7,#0:STRNEB R7,[R0]   ; to erase precedent

MOV R0,#16<<24
ORR R0,R0,R3,LSL#16
LDR R7,LandSBAS:SUB R4,R4,R7
ORR R0,R0,R4,LSR#2
STR R0,[R2,R1,LSL#2]    ; met NewCrash dans table (bonne position(R1))

RSB R1,R1,#1:STR R1,NbOfCrash
B OneLess
.noAlu

; Cyclone
;;;;;;;;;

CMP R3,#14
BNE noCycl
                      ; save new cyclone in list
LDR R3,CycloneListAdr
.tryNextCyclo
LDR R2,[R3],#4:CMP R2,#0:STREQ R4,[R3,#-4]:BNE tryNextCyclo

.noCycl
MOV R15,R14

.OAdr2 EQUD OccTable

; ; ; ; ; ; ;

.Diamond
STR R14,temp14_12
LDR R1,alreadyDiamond:CMP R1,#0:BNE endDiamond:STR R15,alreadyDiamond
MOV R12,#500:CMP R11,#1:BLEQ AddScore1:BLNE AddScore2 ; bonus de 500 pts
MOV R1,#29:MOV R2,#36:SWI "Trk_MakeNoise"
LDR R14,temp14_12
B endDiamond

.alreadyDiamond EQUD 0    ; pour ne pas faire deux fois un diamond

.temp14_12 EQUD 0

; Arbitre teste le bloc qui part
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.ArbitreStartBlk1  ; R3=Kind Of Block
CMP R3,#4
MOVEQ R3,#1:SUBEQ R4,PC,#FNmb(Deadly):STREQ R3,[R4,#FNlb(Deadly)]                                                             ; DONT launch chemical
MOVNE R1,#24:MOVEQ R1,#31:MOV R2,#20:SWI "Trk_MakeNoise"
CMP R3,#14:BEQ moveCyclone
MOV R15,R14

.ArbitreStartBlk2  ; idem for pengo2
CMP R3,#4
MOVEQ R3,#1:SUBEQ R4,PC,#FNmb(Deadly2):STREQ R3,[R4,#FNlb(Deadly2)]

MOVNE R1,#24:MOVEQ R1,#31:MOV R2,#20:SWI "Trk_MakeNoise"
CMP R3,#14:BEQ moveCyclone
MOV R15,R14

.moveCyclone      ; si on bouge un cyclone alors efface-le dans la liste
MOV R2,#0
LDR R3,CycloneListAdr
.tryNextCycl
LDR R4,[R3],#4:CMP R4,R7:STREQ R2,[R3,#-4]:BNE tryNextCycl
MOV R15,R14

;;;;;;;;;;;;;;;;
; Gestion Etat ;
;;;;;;;;;;;;;;;;

.OneLess    ; Enleve un bloc du genre 'R3'       ( input R11=player Nb)
ADR R4,Etat
LDR R5,[R4,R3,LSL#2]
SUB R5,R5,#1
STR R5,[R4,R3,LSL#2]

CMP R11,#1

MOV R5,R12:STR R14,temp14_12
MOV R12,#5:BLEQ AddScore1:BLNE AddScore2     ; add 5 points to the score
MOV R12,R5:LDR R14,temp14_12

MOV R15,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;           TABLE QUI CONTIENT L'ETAT DE LA ZONE DE JEU           ;
;         ( a initialiser a' chaque chargement de schema )        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.NbOfBadBlocks EQUD 0            ; nombre de blocs a' eliminer

.Etat
.Normal    EQUD 250
.Drink     EQUD 100
.Bombs     EQUD 25
.DeathFace EQUD 0
.Chemic1   EQUD 0
.Alu       EQUD 0
.Pile      EQUD 10
.NbDDT     EQUD 25
.NbCFC     EQUD 15
.Radio     EQUD 5
.Chemic2   EQUD 5

.AnalizeScheme          ; Compte le nombre de blocs de chaque type
STR R14,temp14_8

; Init ETAT table

MOV R0,#0:MOV R1,#0:MOV R2,#0:MOV R3,#0
ADR R4,Etat
STMIA R4!,{R0-R3}:STMIA R4!,{R0-R3}:STMIA R4,{R0-R2}
ADR R4,Etat

LDR R0,SchemeBAS
MOV R1,#3072
.Levery
 LDRB R2,[R0],#1
 CMP R2,#11
 BPL noAnalz
 LDR R3,[R4,R2,LSL#2]
 ADD R3,R3,#1
 STR R3,[R4,R2,LSL#2]
.noAnalz
SUBS R1,R1,#1
BNE Levery

BL CountBadBlocks:STR R0,NbOfBadBlocks

LDR R15,temp14_8

.CountBadBlocks
ADR R1,DeathFace:LDMIA R1,{R1-R8}
 ADD R0,R1,R2
 ADD R0,R0,R3
 ADD R0,R0,R4
 ADD R0,R0,R5
 ADD R0,R0,R6
 ADD R0,R0,R7
 ADD R0,R0,R8       ;  >>> R0 = nunber of bad blocks
MOV R15,R14

.temp14_8 EQUD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ROUTINES PRINCIPALES POUR LE JEU 1/2 PLAYERS ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.Lili EQUD Land
.Lolo EQUD LandBAS
.pace EQUD 0

.AnimBackGround
LDRB R0,pace
LDR R1,Lili:ADD R1,R1,R0,LSR#6:LDR R2,Lolo:STR R1,[R2]
ADD R0,R0,#8:STRB R0,pace
MOV R15,R14

.MainGame
STR R14,temp14_7

SUB R0,PC,#FNmb(NbOfPlayers):LDR R0,[R0,#FNlb(NbOfPlayers)]
CMP R0,#1:BEQ MainGame1

.MainGame2
FNwait
BL SwapScreens

BL AnimBackGround

BL ReadKeyJoy
BL CtrlFuncKeys
BL MovePengi1
BL MovePengi2
BL GestionDeltasTwin
BL SCROLL
BL Assassin
BL CtrlMonsterBlock_P2
MOV R11,#2:BL CreateAllSprites
BL SpriteController
BL Arbitre
BL WriteScore
BL WriteTime
BL WritePerc
BL ViewScreen        ; and finally look at the screen

SUB R1,PC,#FNmb(Deadly):LDR R0,[R1,#FNlb(Deadly)]!
CMN R0,#2:BEQ Rest1
CMP R0,#256
BNE noRestore1
.Rest1
CMN R0,#2:MOVNE R0,#0
STR R0,[R1]    ; Deadly
MOV R0,#0
SUB R1,PC,#FNmb(DirX)
STR R0,[R1,#FNlb(DirX)]
SUB R1,PC,#FNmb(DirY)
STR R0,[R1,#FNlb(DirY)]
SUB R1,PC,#FNmb(Pushing)
STR R0,[R1,#FNlb(Pushing)]
BL ResetTrunk1

MOV R0,#60  ; 5 seconds
SUB R1,PC,#FNmb(Unreal)
STR R0,[R1,#FNlb(Unreal)]

.noRestore1
SUB R1,PC,#FNmb(Deadly2):LDR R0,[R1,#FNlb(Deadly2)]!
CMN R0,#2:BEQ Rest2   ; assassine'?
CMP R0,#256           ; ou tue' par monstre?
BNE noRestore2
.Rest2
CMN R0,#2:MOVNE R0,#0
STR R0,[R1]    ; Deadly2
MOV R0,#0
SUB R1,PC,#FNmb(DirX2)
STR R0,[R1,#FNlb(DirX2)]
SUB R1,PC,#FNmb(DirY2)
STR R0,[R1,#FNlb(DirY2)]
SUB R1,PC,#FNmb(Pushing2)
STR R0,[R1,#FNlb(Pushing2)]
BL ResetTrunk2

MOV R0,#60  ; 5 seconds
SUB R1,PC,#FNmb(Unreal2)
STR R0,[R1,#FNlb(Unreal2)]
.noRestore2
LDR R15,temp14_7

.MainGame1
FNwait
BL SwapScreens

BL AnimBackGround

BL ReadKeyJoy
BL CtrlFuncKeys
BL MovePengi1
BL CalculeDeltas
BL CtrlScrollScreen
BL SCROLL
BL CtrlMonsterBlock_P1
MOV R11,#1:BL CreateAllSprites
BL SpriteController
BL Arbitre
BL WriteScore
BL WriteTime
BL WritePerc
BL ViewScreen        ; and finally look at the screen

SUB R1,PC,#FNmb(Deadly):LDR R0,[R1,#FNlb(Deadly)]!
CMN R0,#2:BEQ Rest12   ; assassine'?
CMP R0,#256
BNE noRestore12
.Rest12
CMN R0,#2:MOVNE R0,#0
STR R0,[R1]    ; Deadly
MOV R0,#0
SUB R1,PC,#FNmb(FinX)
LDR R2,[R1,#FNlb(FinX)]!
CMP R2,#2:STR R0,[R1]
SUBGT R1,PC,#FNmb(PosX):LDRGT R2,[R1,#FNlb(PosX)]!:ADDGT R2,R2,#1:STRGT R2,[R1]
SUB R1,PC,#FNmb(FinY)
LDR R2,[R1,#FNlb(FinY)]!
CMP R2,#2:STR R0,[R1]
SUBGT R1,PC,#FNmb(PosY):LDRGT R2,[R1,#FNlb(PosY)]!:ADDGT R2,R2,#1:STRGT R2,[R1]
SUB R1,PC,#FNmb(Pushing)
STR R0,[R1,#FNlb(Pushing)]
BL ResetTrunk1

MOV R0,#60  ; 5 seconds
SUB R1,PC,#FNmb(Unreal)
STR R0,[R1,#FNlb(Unreal)]
.noRestore12
LDR R15,temp14_7

.temp14_7 EQUD 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.MainChal
STR R14,temp14_7

SUB R0,PC,#FNmb(NbOfPlayers):LDR R0,[R0,#FNlb(NbOfPlayers)]
CMP R0,#1:BEQ MainChal1

.MainChal2
FNwait
BL SwapScreens

BL ReadKeyJoy
BL CtrlFuncKeys
BL MovePengi1
BL MovePengi2
BL CalculeDeltas
BL CalculeDeltas2
BL SCROLL
BL Assassin
MOV R11,#2:BL CreateAllSprites
BL SpriteController
BL Arbitre
BL WriteScore
BL WriteTime
BL ViewScreen        ; and finally look at the screen

SUB R1,PC,#FNmb(Deadly):LDR R0,[R1,#FNlb(Deadly)]!
CMN R0,#2:BEQ Rest1c
CMP R0,#256
BNE noRestore1c
.Rest1c
CMN R0,#2:MOVNE R0,#0
STR R0,[R1]    ; Deadly
MOV R0,#0
SUB R1,PC,#FNmb(DirX)
STR R0,[R1,#FNlb(DirX)]
SUB R1,PC,#FNmb(DirY)
STR R0,[R1,#FNlb(DirY)]
SUB R1,PC,#FNmb(Pushing)
STR R0,[R1,#FNlb(Pushing)]
BL ResetTrunk1

MOV R0,#4096  ; superpengo
SUB R1,PC,#FNmb(Unreal)
STR R0,[R1,#FNlb(Unreal)]

.noRestore1c
SUB R1,PC,#FNmb(Deadly2):LDR R0,[R1,#FNlb(Deadly2)]!
CMN R0,#2:BEQ Rest2c  ; assassine'?
CMP R0,#256           ; ou tue' par monstre?
BNE noRestore2c
.Rest2c
CMN R0,#2:MOVNE R0,#0
STR R0,[R1]    ; Deadly2
MOV R0,#0
SUB R1,PC,#FNmb(DirX2)
STR R0,[R1,#FNlb(DirX2)]
SUB R1,PC,#FNmb(DirY2)
STR R0,[R1,#FNlb(DirY2)]
SUB R1,PC,#FNmb(Pushing2)
STR R0,[R1,#FNlb(Pushing2)]
BL ResetTrunk2

MOV R0,#4096  ; superpengo
SUB R1,PC,#FNmb(Unreal2)
STR R0,[R1,#FNlb(Unreal2)]
.noRestore2c
LDR R15,temp14_7

.MainChal1
FNwait
BL SwapScreens

BL AnimBackGround

BL ReadKeyJoy
BL CtrlFuncKeys
BL MovePengi1
BL CalculeDeltas
BL SCROLL
MOV R11,#1:BL CreateAllSprites
BL SpriteController
BL Arbitre
BL WriteScore
BL WriteTime
BL ViewScreen        ; and finally look at the screen

SUB R1,PC,#FNmb(Deadly):LDR R0,[R1,#FNlb(Deadly)]!
CMP R0,#256
BNE noRestore12c
.Rest12c
MOV R0,#0
STR R0,[R1]  ; Deadly

SUB R1,PC,#FNmb(FinX)
LDR R2,[R1,#FNlb(FinX)]!
CMP R2,#2:STR R0,[R1]
SUBGT R1,PC,#FNmb(PosX):LDRGT R2,[R1,#FNlb(PosX)]!:ADDGT R2,R2,#1:STRGT R2,[R1]
SUB R1,PC,#FNmb(FinY)
LDR R2,[R1,#FNlb(FinY)]!
CMP R2,#2:STR R0,[R1]
SUBGT R1,PC,#FNmb(PosY):LDRGT R2,[R1,#FNlb(PosY)]!:ADDGT R2,R2,#1:STRGT R2,[R1]
SUB R1,PC,#FNmb(Pushing)
STR R0,[R1,#FNlb(Pushing)]
BL ResetTrunk1

MOV R0,#4096  ; superpengo
SUB R1,PC,#FNmb(Unreal)
STR R0,[R1,#FNlb(Unreal)]
.noRestore12c
LDR R15,temp14_7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.LandsBAS EQUD Lands
.SchemeBAS EQUD Scheme
.LandABAS EQUD Land
.TransDataBAS EQUD TraDta
.BufDres EQUD Buffer

.temp14_10 EQUD 0

.LoadScheme
 ADR R1,SchNumberFile
 MOV R2,#2
 SWI "OS_BinaryToDecimal"
 MOV R0,#0
 STRB R0,[R1,R2]
.loadAgain
 ADR R0,SchemesFilename
 LDR R1,SchemeBAS
 LDR R2,BufDres
 MOV R3,#1
 SWI "XLZWD_Decompress"
 MOVVC R15,R14
B loadAgain

.LoadChallengeScheme
 ADR R0,ChallFilename
 LDR R1,SchemeBAS
 LDR R2,BufDres
 MOV R3,#1
 SWI "XLZWD_Decompress"
 BVS LoadChallengeScheme
MOV R15,R14

.SchemesFilename EQUS "POI.SCHEMES.S"
.SchNumberFile EQUS "1"+CHR$0+CHR$0:ALIGN
.ChallFilename EQUS "POI.SCHEMES.CHALLENGES"+CHR$0:ALIGN

.GenerateLand
STR R14,temp14_10
LDR R0,LandsBAS
LDR R1,SchemeBAS
LDR R2,LandABAS

; Codes generaux    00 - 23 . blocs     ; 00-15  ---  Deviennent sprites
;                   24 - 59 . decor

; Codes pour donnees SCHEME ; 00 - 23 . blocs  ( 23 = ELECTRIC )
;                             24 - 59 . vide (place au decor)

; Codes pour donnees Land   ; 24 - 59 . decor
;                             60 - 61 . valeur reservee pour TRANSPORTER

MOV R10,#0:MOV R11,#0
LDR R12,TransDataBAS

STMIA R12!,{R10,R11}:STMIA R12!,{R10,R11}:STMIA R12!,{R10,R11}
SUB R12,R12,#24 ; reset transporters

MOV R6,#4
.ContGen2
MOV R5,#3072
.ContGen
 LDRB R7,[R0],#4               ; delta in list 1
 LDRB R8,[R1],#1     ; R7 = donnees decor ; R8 = Donnees schema
 CMP R6,#1
 BNE noSpecial
 CMP R7,#60    ; transporteur?
 BMI noTost
 STMIA R12!,{R10,R11}    ; oui sauve sa position
.noTost
 ADD R10,R10,#1:CMP R10,#64:MOVEQ R10,#0:ADDEQ R11,R11,#1
.noSpecial
 CMP R8,#24
 STRMIB R8,[R2],#4
 STRPLB R7,[R2],#4
SUBS R5,R5,#1
BNE ContGen
SUB R1,R1,#3072
SUB R2,R2,#3072*4:ADD R2,R2,#1
SUB R0,R0,#3072*4:ADD R0,R0,#1
SUBS R6,R6,#1
BNE ContGen2

BL MakeOffsts
BL NoElectric
LDR R15,temp14_10

.KillTransporters
LDR R0,LandsBAS
MOV R2,#24
MOV R1,#3072*4
.LoopKiller
LDRB R3,[R0],#1
CMP R3,#60
STRPLB R2,[R0,#-1]      ; Remplace Transporter par du decor
SUBS R1,R1,#1:BNE LoopKiller
MOV R15,R14

.InitOccTable           ; Initialize a' 0 la table Occ (qui contient
LDR R0,OAdr2            ; pour chaque case un flag qui dit si elle est
MOV R1,#0               ; utilisee par un autre monstre )
MOV R5,#1
MOV R2,#3072
LDR R3,LandABAS
.LoopInitOT
 LDRB R4,[R3],#4
 CMP R4,#60              ; transporter interdit aux monstres
 STRMIB R1,[R0],#1
 STRPLB R5,[R0],#1
SUBS R2,R2,#1:BNE LoopInitOT
MOV R15,R14

.InitCyclones
LDR R0,CycloneListAdr               ; init list to 0 (=no Cyclone)
MOV R1,#0:MOV R2,#0:MOV R3,#0:MOV R4,#0:STMIA R0!,{R1-R4}:STMIA R0,{R1-R4}
LDR R0,CycloneListAdr

LDR R3,LandABAS  ; then fill list with position of cyclones
MOV R2,#3072
.LoopInitCy
 LDRB R5,[R3]
 CMP R5,#14:STREQ R3,[R0],#4
 ADD R3,R3,#4
 SUBS R2,R2,#1
BNE LoopInitCy
MOV R15,R14

.CycloneListAdr EQUD CycloneList

.tricBAS EQUD Graph+23*400
.Bzzt EQUD 0         ; counter
.ElectroChok EQUD 0
ALIGN

.Electr
LDR R0,tricBAS

LDR R7,Bzzt:ADD R7,R7,#1:STR R7,Bzzt:STR R7,ElectroChok    ; deadly!
ANDS R7,R7,#%1:SUBEQ R7,R0,#400:SUBNE R7,R0,#800 ;select electric sprite

LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7,{R1-R5}:STMIA R0,{R1-R5}

MOV R1,#27:MOV R2,#20:SWI "Trk_MakeNoise"

MOV R3,#23
MOV R15,R14

.NoElectric
MOV R0,#0:STR R0,ElectroChok  ; not deadly!
LDR R0,tricBAS
SUB R7,R0,#800

LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}
LDMIA R7!,{R1-R5}:STMIA R0!,{R1-R5}:LDMIA R7,{R1-R5}:STMIA R0,{R1-R5}

MOV R15,R14

.AbortElectric
MOV R0,#0:STR R0,ElectroChok  ; not deadly!
MOV R15,R14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.SetNormalBlock      ; remplace le bloc neutre par un sprite different
                     ; a' chaque niveau (input R0=level(0-4))
LDR R1,GraphBAS1
ADD R2,R1,#400*16
ADD R2,R2,R0,LSL#8
ADD R2,R2,R0,LSL#7
ADD R2,R2,R0,LSL#4   ;x400

MOV R0,#100          ; copy block
.lSetNBl
LDR R3,[R2],#4:STR R3,[R1],#4
SUBS R0,R0,#1:BNE lSetNBl
MOV R15,R14

.SpriteBAS  EQUD Sprite
.SpriteBAS2 EQUD Sprite+800*84 ; after pengi in list 2
.GraphBAS1  EQUD Graph
.CrunchWBas EQUD CrunchWay
.ScrBuffer  EQUD Screen

.AddMaskToLevel
LDR R0,ScrBuffer                    ; firstly,copy background blocks
LDR R1,GraphBAS1:ADD R1,R1,#2*4800
MOV R2,#3*4800
.laddM1
LDMIA R0!,{R3-R6}:STMIA R1!,{R3-R6}
SUBS R2,R2,#16:BNE laddM1

LDR R0,GraphBAS1
LDR R1,SpriteBAS2

MOV R2,#16     ; for every bloc
.MakeCrunch

LDR R6,CrunchWBas

MOV R5,#4    ; 4x crunch fase
.CrFase

MOV R8,R0

MOV R4,#100
.CountWords1
LDR R3,[R8],#4
LDR R7,[R6],#4
AND R3,R3,R7
STR R3,[R1],#4                              ; save graphics

TST R3,#&FF000000:ORRNE R3,R3,#&FF000000    ; create mask
TST R3,#&00FF0000:ORRNE R3,R3,#&00FF0000
TST R3,#&0000FF00:ORRNE R3,R3,#&0000FF00
TST R3,#&000000FF:ORRNE R3,R3,#&000000FF

STR R3,[R1],#4                              ; save mask

SUBS R4,R4,#1:BNE CountWords1
SUBS R5,R5,#1:BNE CrFase

ADD R0,R0,#400

SUBS R2,R2,#1:BNE MakeCrunch

LDR R0,ScrBuffer:ADD R0,R0,#4800*3     ; look for monsters
LDR R1,SpriteBAS2
ADD R1,R1,#64*800

MOV R2,#60     ; number of sprite monsters
.MakeMaskMonst
MOV R4,#100
.CountWords3
LDR R3,[R0],#4
STR R3,[R1],#4
TST R3,#&FF000000:ORRNE R3,R3,#&FF000000    ; create mask
TST R3,#&00FF0000:ORRNE R3,R3,#&00FF0000
TST R3,#&0000FF00:ORRNE R3,R3,#&0000FF00
TST R3,#&000000FF:ORRNE R3,R3,#&000000FF
STR R3,[R1],#4

SUBS R4,R4,#1:BNE CountWords3
SUBS R2,R2,#1:BNE MakeMaskMonst
MOV R15,R14

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  ecrit un char dans la status window
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.WriteNumber
ADD PC,PC,R0,LSL#2      ; R0=number to write; R1=ScrAdr
EQUS "JUMP"
B NbZero
B NbUn
B NbDeux
B NbTrois
B NbQuatre
B NbCinq
B NbSix
B NbSept
B NbHuit
B NbNeuf
B CharZ
B CharN
B CharE
B CharO
B CharPerc

.Point
STRB R6,[R1,#320*2+5]:STRB R6,[R1,#320*4+5]
MOV R15,R14

.NbZero
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STRB R5,[R1,#320*1]:STRB R5,[R1,#320*1+7]
STRB R6,[R1,#320*2]:STRB R6,[R1,#320*2+7]
STRB R7,[R1,#320*3]:STRB R7,[R1,#320*3+7]
STRB R6,[R1,#320*4]:STRB R6,[R1,#320*4+7]
STRB R5,[R1,#320*5]:STRB R5,[R1,#320*5+7]
MOV R15,R14

.NbUn
STRB R4,[R1,#320*0+4]:STRB R5,[R1,#320*1+4]
STRB R6,[R1,#320*2+4]:STRB R7,[R1,#320*3+4]
STRB R6,[R1,#320*4+4]:STRB R5,[R1,#320*5+4]
STRB R4,[R1,#320*6+4]
MOV R15,R14

.NbDeux
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STR  R7,[R1,#320*3]:STR R7,[R1,#320*3+4]
STRB R5,[R1,#320*1+7]:STRB R6,[R1,#320*2+7]
STRB R6,[R1,#320*4]:STRB R5,[R1,#320*5]
MOV R15,R14

.NbTrois
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STR  R7,[R1,#320*3]:STR R7,[R1,#320*3+4]
STRB R5,[R1,#320*1+7]:STRB R6,[R1,#320*2+7]
STRB R6,[R1,#320*4+7]:STRB R5,[R1,#320*5+7]
MOV R15,R14

.NbQuatre
STR R6,[R1,#320*4]:STR R6,[R1,#320*4+4]
STRB R4,[R1,#320*0]:STRB R5,[R1,#320*1]
STRB R6,[R1,#320*2]:STRB R7,[R1,#320*3]
STRB R6,[R1,#320*2+4]:STRB R7,[R1,#320*3+4]
STRB R5,[R1,#320*5+4]:STRB R4,[R1,#320*6+4]
MOV R15,R14

.NbCinq
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STR  R7,[R1,#320*3]:STR R7,[R1,#320*3+4]
STRB R5,[R1,#320*1]:STRB R6,[R1,#320*2]
STRB R6,[R1,#320*4+7]:STRB R5,[R1,#320*5+7]
MOV R15,R14

.NbSix
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STR  R7,[R1,#320*3]:STR R7,[R1,#320*3+4]
STRB R5,[R1,#320*1]:STRB R6,[R1,#320*2]:STRB R6,[R1,#320*4+7]
STRB R5,[R1,#320*5+7]:STRB R6,[R1,#320*4]:STRB R5,[R1,#320*5]
MOV R15,R14

.NbSept
STR R4,[R1,#0]:STR R4,[R1,#4]
STRB R5,[R1,#320*1+7]:STRB R6,[R1,#320*2+7]:STRB R7,[R1,#320*3+7]
STRB R6,[R1,#320*4+7]:STRB R5,[R1,#320*5+7]:STRB R4,[R1,#320*6+7]
MOV R15,R14

.NbHuit
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STR  R7,[R1,#320*3]:STR R7,[R1,#320*3+4]
STRB R5,[R1,#320*1]:STRB R6,[R1,#320*2]
STRB R5,[R1,#320*1+7]:STRB R6,[R1,#320*2+7]
STRB R6,[R1,#320*4+7]:STRB R5,[R1,#320*5+7]
STRB R6,[R1,#320*4]:STRB R5,[R1,#320*5]
MOV R15,R14

.NbNeuf
STR  R4,[R1,#0]:    STR R4,[R1,#4]
STR  R4,[R1,#320*6]:STR R4,[R1,#320*6+4]
STR  R7,[R1,#320*3]:STR R7,[R1,#320*3+4]
STRB R5,[R1,#320*1]:STRB R6,[R1,#320*2]
STRB R5,[R1,#320*1+7]:STRB R6,[R1,#320*2+7]
STRB R6,[R1,#320*4+7]:STRB R5,[R1,#320*5+7]
MOV R15,R14

.CharZ
STRB R4,[R1,#1]:STRB R4,[R1,#2]:STRB R4,[R1,#3]:STRB R4,[R1,#4]
STRB R4,[R1,#5]:STRB R4,[R1,#6]:STRB R4,[R1,#7]
STRB R4,[R1,#320*6+1]:STRB R4,[R1,#320*6+2]:STRB R4,[R1,#320*6+3]:STRB R4,[R1,#320*6+4]
STRB R4,[R1,#320*6+5]:STRB R4,[R1,#320*6+6]:STRB R4,[R1,#320*6+7]
STRB R5,[R1,#320*1+6]
STRB R6,[R1,#320*2+5]
STRB R7,[R1,#320*3+4]
STRB R6,[R1,#320*4+3]
STRB R5,[R1,#320*5+2]
MOV R15,R14

.CharE
STRB R4,[R1,#1]:STRB R4,[R1,#2]:STRB R4,[R1,#3]:STRB R4,[R1,#4]:STRB R4,[R1,#5]:STRB R4,[R1,#6]:STRB R4,[R1,#7]
STRB R7,[R1,#320*3+1]:STRB R7,[R1,#320*3+2]:STRB R7,[R1,#320*3+3]:STRB R7,[R1,#320*3+4]:STRB R7,[R1,#320*3+5]:STRB R7,[R1,#320*3+6]:STRB R7,[R1,#320*3+7]
STRB R4,[R1,#320*6+1]:STRB R4,[R1,#320*6+2]:STRB R4,[R1,#320*6+3]:STRB R4,[R1,#320*6+4]:STRB R4,[R1,#320*6+5]:STRB R4,[R1,#320*6+6]:STRB R4,[R1,#320*6+7]
STRB R5,[R1,#320*1+1]:STRB R6,[R1,#320*2+1]
STRB R6,[R1,#320*4+1]:STRB R5,[R1,#320*5+1]
MOV R15,R14

.CharN
STRB R4,[R1,#320*0+1]:STRB R4,[R1,#320*0+7]
STRB R5,[R1,#320*1+1]:STRB R5,[R1,#320*1+7]
STRB R6,[R1,#320*2+1]:STRB R6,[R1,#320*2+7]
STRB R7,[R1,#320*3+1]:STRB R7,[R1,#320*3+7]
STRB R6,[R1,#320*4+1]:STRB R6,[R1,#320*4+7]
STRB R5,[R1,#320*5+1]:STRB R5,[R1,#320*5+7]
STRB R4,[R1,#320*6+1]:STRB R4,[R1,#320*6+7]
STRB R5,[R1,#320*1+2]
STRB R6,[R1,#320*2+3]
STRB R7,[R1,#320*3+4]
STRB R6,[R1,#320*4+5]
STRB R5,[R1,#320*5+6]
MOV R15,R14

.CharO
STRB R4,[R1,#1]:STRB R4,[R1,#2]:STRB R4,[R1,#3]:STRB R4,[R1,#4]:STRB R4,[R1,#5]:STRB R4,[R1,#6]:STRB R4,[R1,#7]
STRB R4,[R1,#320*6+1]:STRB R4,[R1,#320*6+2]:STRB R4,[R1,#320*6+3]:STRB R4,[R1,#320*6+4]:STRB R4,[R1,#320*6+5]:STRB R4,[R1,#320*6+6]:STRB R4,[R1,#320*6+7]
STRB R5,[R1,#320*1+1]:STRB R6,[R1,#320*2+1]:STRB R7,[R1,#320*3+1]:STRB R6,[R1,#320*4+1]:STRB R5,[R1,#320*5+1]
STRB R5,[R1,#320*1+7]:STRB R6,[R1,#320*2+7]:STRB R7,[R1,#320*3+7]:STRB R6,[R1,#320*4+7]:STRB R5,[R1,#320*5+7]
MOV R15,R14

.CharPerc
STRB R4,[R1,#1]:STRB R4,[R1,#7]
STRB R5,[R1,#320*1+6]:STRB R6,[R1,#320*2+5]
STRB R7,[R1,#320*3+4]:STRB R6,[R1,#320*4+3]
STRB R5,[R1,#320*5+2]:STRB R4,[R1,#320*6+1]
STRB R4,[R1,#320*6+7]
MOV R15,R14

;;;;; Set StartScreen on Screen ;;;;;
.SetStartScreen
LDR R0,StartScreenAdr
LDR R1,ScreenAdr
LDR R2,BufferAdr
MOV R3,#0
SWI "LZWD_Decompress"
MOV R15,R14

.StartScreenAdr EQUD StartScreen
.ScreenAdr      EQUD Screen

;;;;;;;;;;;; ANIMATIONS BETWEEN LEVELS ;;;;;;;;;;;;;

.Cartoon    ;input R0=level number
STR R14,temp14_40

SUB R0,R0,#1
.predCart
CMP R0,#5:SUBPL R0,R0,#5:BPL predCart

STR R0,animNumb

BL DecrunchScr

MOV R0,#29:SWI "Trk_SetPosition"

LDR R0,animNumb
ADD PC,PC,R0,LSL#2
EQUS "JUMP"
B Cart_PoleSud
B Cart_BaseSpa
B Cart_Space
B Cart_Jungle

.Cart_Ordi
BL AppearStartScr
MOV R4,#138:BL PutPartInBuf

BL PutAllInOther

MOV R0,#0
.lCartOrdi
STR R0,phaseCounter

LDR R1,sprAdr
MOV R5,#&FF0000

MOV R3,#138

CMP R0,#100:BMI noJump2
SUB R4,R0,#100:MUL R6,R4,R4:MOV R6,R6,LSR#4
ADD R3,R3,R6:CMP R3,#186:MOVPL R3,#186

.noJump2
AND R4,R0,#%11000:MOV R4,R4,LSR#3:ADD R4,R4,#4

STMIA R1!,{R0,R3,R4}

MOV R3,#138

SUB R2,R0,#40:CMP R2,#84:MOVPL R2,#84
AND R4,R0,#%11000:MOV R4,R4,LSR#3:ADD R4,R4,#148+24+4
STMIA R1!,{R2,R3,R4}

SUB R2,R0,#80:CMP R2,#64:MOVPL R2,#64
AND R4,R0,#%11000:MOV R4,R4,LSR#3:ADD R4,R4,#148+4
STMIA R1!,{R2,R3,R4, R5}

FNwait
MOV R4,#138:BL GetPartFromBuf
BL SpriteController

SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
ADD R0,R0,#320*140:SUB R0,R0,#320*2
SUB R1,PC,#FNmb(SwapPage):LDR R1,[R1,#FNlb(SwapPage)]
CMP R1,#0:ADDEQ R1,R0,#80*1024:SUBNE R1,R0,#80*1024

MOV R2,#20  ; redraw a part of the disk drive
.lOrdiP
MOV R4,#17
.lOrdiQ
LDR R3,[R1],#4:CMP R3,#0:STRNE R3,[R0],#4:ADDEQ R0,R0,#4
SUBS R4,R4,#1:BNE lOrdiQ
ADD R0,R0,#320-17*4:ADD R1,R1,#320-17*4
SUBS R2,R2,#1:BNE lOrdiP

LDR R0,phaseCounter:ADD R0,R0,#2:CMP R0,#280:BMI lCartOrdi
B endOfCartoon

.Cart_PoleSud
BL AppearStartScr
MOV R4,#160:BL PutPartInBuf

MOV R0,#130
.lCartPole
STR R0,phaseCounter

LDR R1,sprAdr
MOV R5,#&FF0000

MOV R2,R0,LSL#1:SUB R2,R2,#20                         ; pengo
MOV R3,#193
CMP R2,#110:BMI noJmp:CMP R2,#152:BPL noJmp
SUB R6,R2,#131:MUL R7,R6,R6:RSB R7,R7,#448:SUB R3,R3,R7,LSR#5
.noJmp
AND R4,R0,#%1100:MOV R4,R4,LSR#2
STMIA R1!,{R2,R3,R4}

MOV R2,R0,LSL#1:ADD R2,R2,#10:CMP R2,#152:MOVMI R2,#152
MOV R3,#193
AND R4,R0,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
STMIA R1!,{R2,R3,R4}

MOV R2,R0,LSL#1:ADD R2,R2,#70:CMP R2,#192:MOVMI R2,#192
AND R4,R0,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
STMIA R1!,{R2,R3,R4}

MOV R2,R0,LSL#1:ADD R2,R2,#40:CMP R2,#172:MOVMI R2,#172
ADD R4,R0,#8:AND R4,R4,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148+24
STMIA R1!,{R2,R3,R4, R5}

FNwait
MOV R4,#160:BL GetPartFromBuf
BL SpriteController

LDR R0,phaseCounter
SUB R0,R0,#1:CMN R0,#100:BPL lCartPole
B endOfCartoon

.Cart_BaseSpa
BL UnpackRocket

MOV R0,#224:STR R0,highJet
MOV R0,#226:STR R0,groundJet
MOV R0,#68:STR R0,dXRocket
BL InitJet

BL AppearStartScr

MOV R0,#0:STR R0,gravityJet:STR R0,forceJet

MOV R0,#240
.lCartBase
STR R0,phaseCounter

CMP R0,#200
LDR R0,gravityJet:LDR R1,forceJet:ADDMI R0,R0,R1:ADDMI R1,R1,#1:STR R0,gravityJet:STR R1,forceJet

MOV R0,R0,LSR#4:RSB R0,R0,#220:STR R0,highJet

FNwait
BL SwapScreens
BL FastRecopy

LDR R1,gravityJet:MOV R1,R1,LSR#4:RSB R1,R1,#224-170
BL PutRocket
BL DrawJet

LDR R1,sprAdr
MOV R5,#&FF0000

LDR R6,phaseCounter:MOV R0,R6,LSL#1:SUB R0,R0,#220

AND R4,R6,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
MOV R2,R0:CMP R2,#140:MOVMI R2,#140
MOV R3,#212
STMIA R1!,{R2,R3,R4}

ADD R4,R6,#8:AND R4,R4,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148+24
ADD R2,R0,#20:CMP R2,#160:MOVMI R2,#160
STMIA R1!,{R2,R3,R4}

LDR R2,phaseCounter:ADD R2,R2,#60
AND R4,R6,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
ADD R2,R0,#40:CMP R2,#180:MOVMI R2,#180
STMIA R1,{R2,R3,R4, R5}

BL SpriteController
BL ViewScreen
LDR R0,phaseCounter:SUBS R0,R0,#1:BPL lCartBase
B endOfCartoon

.Cart_Space
BL UnpackRocket

MOV R0,#204:STR R0,highJet
MOV R0,#206:STR R0,groundJet
MOV R0,#108:STR R0,dXRocket
BL InitJet

BL AppearStartScr

MOV R0,#0:STR R0,gravityJet:STR R0,forceJet

MOV R0,#240
.lCartSpce
STR R0,phaseCounter

CMP R0,#200
LDR R0,gravityJet:LDR R1,forceJet:ADDMI R0,R0,R1:ADDMI R1,R1,#1:STR R0,gravityJet:STR R1,forceJet

MOV R0,R0,LSR#4:RSB R0,R0,#200:STR R0,highJet

FNwait
BL SwapScreens
BL FastRecopy

LDR R1,gravityJet:MOV R1,R1,LSR#4:RSB R1,R1,#204-170
BL PutRocket
BL DrawJet

LDR R1,sprAdr
MOV R5,#&FF0000

LDR R6,phaseCounter:MOV R0,R6,LSL#1:SUB R0,R0,#220

AND R4,R6,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
MOV R2,R0:CMP R2,#160:MOVMI R2,#160
MOV R3,#190
STMIA R1!,{R2,R3,R4}

ADD R4,R6,#8:AND R4,R4,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148+24
ADD R2,R0,#20:CMP R2,#180:MOVMI R2,#180
STMIA R1!,{R2,R3,R4}

LDR R2,phaseCounter:ADD R2,R2,#60
AND R4,R6,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
ADD R2,R0,#40:CMP R2,#200:MOVMI R2,#200
STMIA R1,{R2,R3,R4, R5}

BL SpriteController
BL ViewScreen
LDR R0,phaseCounter:SUBS R0,R0,#1:BPL lCartSpce
B endOfCartoon

.UnpackRocket
LDR R0,theRocketAdr
LDR R1,BufferAdr   ;dest
LDR R2,GraphBuf
MOV R3,#0
SWI "LZWD_Decompress"
MOV R15,R14

.theRocketAdr EQUD theRocket
.GraphBuf EQUD Graph+2*4800

.InitJet
LDR R0,JetBuf
MOV R1,#280
.lInitJet
LDR R9,RandomJet:ADD R9,R9,R9,ROR#1:STR R9,RandomJet
LDR R2,dXRocket:ADD R2,R2,#5:ADD R2,R2,R9,LSR#27:MOV R2,R2,LSL#3
LDR R3,highJet:MOV R3,R3,LSL#2
AND R4,R9,#%1111:TST R9,#%1<<17:RSBNE R4,R4,#0
AND R5,R9,#%1111100000:MOV R5,R5,LSR#5:ADD R5,R5,#16
MOV R6,#32:SUB R6,R6,R9,LSR#27
STMIA R0!,{R2-R6}
SUBS R1,R1,#1:BNE lInitJet
MOV R15,R14

.colsJet
EQUB 18:EQUB 22:EQUB 23:EQUB 54:EQUB 86:EQUB 87:EQUB 247:EQUB 255

.JetBuf EQUD Buffer+13920
.highJet EQUD 0
.gravityJet EQUD 0
.forceJet EQUD 0
.dXRocket EQUD 0
.groundJet EQUD 0

.DrawJet
LDR R0,JetBuf
SUB R12,PC,#FNmb(BASESCROLL):LDR R12,[R12,#FNlb(BASESCROLL)]

ADR R13,colsJet

MOV R1,#280
.loopJet
LDMIA R0,{R2,R3,R4,R5,R6}
SUBS R6,R6,#1:BMI genesisJet
ADD R2,R2,R4:MOV R7,R2,ASR#3
CMP R7,#320:BCS genesisJet
ADD R3,R3,R5:MOV R8,R3,ASR#2
LDR R9,groundJet
CMP R8,R9:RSBPL R5,R5,#0:MOVPL R5,R5,ASR#3

CMP R8,#0
ADDPL R10,R12,R8,LSL#8:ADDPL R10,R10,R8,LSL#6
LDRPLB R8,[R13,R6,LSR#2]
STRPLB R8,[R10,R7]
.endOfGen
STMIA R0!,{R2,R3,R4,R5,R6}
SUBS R1,R1,#1:BNE loopJet
MOV R15,R14

.genesisJet
LDR R9,RandomJet:ADD R9,R9,R9,ROR#1:STR R9,RandomJet
LDR R2,dXRocket:ADD R2,R2,#5:ADD R2,R2,R9,LSR#27:MOV R2,R2,LSL#3
LDR R3,highJet:MOV R3,R3,LSL#2
AND R4,R9,#%1111:TST R9,#%1<<17:RSBNE R4,R4,#0
AND R5,R9,#%1111100000:MOV R5,R5,LSR#5:ADD R5,R5,#16
MOV R6,#32:SUB R6,R6,R9,LSR#27
B endOfGen

.RandomJet EQUD -TIME

.Cart_Jungle
BL AppearStartScr

MOV R4,#110:BL PutPartInBuf

MOV R0,#130
.lCartJngl
STR R0,phaseCounter

LDR R1,sprAdr
MOV R5,#&FF0000

MOV R2,R0,LSL#1:SUB R2,R2,#20                         ; pengo
MOV R3,#130:CMP R0,#20:ADDMI R3,R3,R0:SUBMI R3,R3,#20
AND R4,R0,#%1100:MOV R4,R4,LSR#2
STMIA R1!,{R2,R3,R4}
                                                      ; monsters
MOV R2,R0,LSL#1:ADD R2,R2,#10:CMP R2,#100:MOVMI R2,#100
MOV R3,#130
AND R4,R0,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
STMIA R1!,{R2,R3,R4}

MOV R2,R0,LSL#1:ADD R2,R2,#70:CMP R2,#140:MOVMI R2,#140
AND R4,R0,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148
STMIA R1!,{R2,R3,R4}

MOV R2,R0,LSL#1:ADD R2,R2,#40:CMP R2,#120:MOVMI R2,#120
ADD R4,R0,#8:AND R4,R4,#%1100:MOV R4,R4,LSR#2:ADD R4,R4,#148+24
STMIA R1,{R2,R3,R4, R5}

FNwait
MOV R4,#110:BL GetPartFromBuf
BL SpriteController

LDR R0,phaseCounter
SUB R0,R0,#1:CMN R0,#100:BPL lCartJngl

B endOfCartoon

.endOfCartoon
LDR R15,temp14_40

.sprAdr EQUD ListOfSprites
.phaseCounter EQUD 0

.DecrunchScr
LDR R0,[PC,R0,LSL#2]
B okScrName
EQUD ICE_Screen
EQUD ESA_Screen
EQUD SPA_Screen
EQUD JUN_Screen
EQUD COM_Screen
.okScrName
LDR R1,ScreenAdr
LDR R2,BufferAdr
MOV R3,#1
SWI "LZWD_Decompress"   ; decompress data graphics
MOV R15,R14

.ICE_Screen EQUS "POI.ICE_SCR"+CHR$0:ALIGN
.ESA_Screen EQUS "POI.ESA_SCR"+CHR$0:ALIGN
.SPA_Screen EQUS "POI.SPACE_SCR"+CHR$0:ALIGN
.JUN_Screen EQUS "POI.JUNGLE_SCR"+CHR$0:ALIGN
.COM_Screen EQUS "POI.ORDI_SCR"+CHR$0:ALIGN

.BufferAdr EQUD Buffer
.animNumb EQUD 0
.temp14_40 EQUD 0

.FastRecopy
SUB R0,PC,#FNmb(BASESCROLL):LDR R0,[R0,#FNlb(BASESCROLL)]
LDR R1,ScreenAdr
MOV R2,#240
.lFastRcpy
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R12}:STMIA R0!,{R3-R12}
LDMIA R1!,{R3-R13}:STMIA R0!,{R3-R13}:ADD R0,R0,#320-244
SUBS R2,R2,#1:BNE lFastRcpy
MOV R15,R14

.PutRocket     ; input R1=y (rocket stored in Buffer)
CMN R1,#173:MOVMI R15,R14

STR R14,temp14_42

LDR R0,dXRocket
LDR R3,BufferAdr
MOV R11,#174
CMP R1,#0:SUBMI R3,R3,R1,LSL#6:SUBMI R3,R3,R1,LSL#4:ADDMI R11,R11,R1:MOVMI R1,#0

SUB R2,PC,#FNmb(BASESCROLL):LDR R2,[R2,#FNlb(BASESCROLL)]
ADD R2,R2,R0:ADD R2,R2,R1,LSL#8:ADD R2,R2,R1,LSL#6

.lPutRY
LDMIA R3!,{R0,R1, R4,R5, R6,R7}
LDMIA R2,{R8,R9,R10}
BIC R8,R8,R1:ORR R8,R8,R0
BIC R9,R9,R5:ORR R9,R9,R4
BIC R10,R10,R7:ORR R10,R10,R6
STMIA R2!,{R8,R9,R10}

LDMIA R3!,{R0,R1, R4,R5, R6,R7}
LDMIA R2,{R8,R9,R10}
BIC R8,R8,R1:ORR R8,R8,R0
BIC R9,R9,R5:ORR R9,R9,R4
BIC R10,R10,R7:ORR R10,R10,R6
STMIA R2!,{R8,R9,R10}

LDMIA R3!,{R0,R1, R4,R5, R6,R7, R12,R13}
LDMIA R2,{R8,R9,R10,R14}
BIC R8,R8,R1:ORR R8,R8,R0
BIC R9,R9,R5:ORR R9,R9,R4
BIC R10,R10,R7:ORR R10,R10,R6
BIC R14,R14,R13:ORR R14,R14,R12
STMIA R2!,{R8,R9,R10,R14}

ADD R2,R2,#320-40
SUBS R11,R11,#1:BNE lPutRY

LDR R15,temp14_42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.MmoBrdrAdr EQUD MemoBorder

.SaveBorder
LDR R0,MmoBrdrAdr
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#320*68:ADD R1,R1,#256

MOV R2,#15
.lsaveBrd
LDMIA R1,{R3-R12}:STMIA R0!,{R3-R12}:ADD R1,R1,#320
SUBS R2,R2,#1:BNE lsaveBrd
ADD R1,R1,#320*72:ADD R1,R1,#324

MOV R2,#7
.lsaveBrd2
LDMIA R1,{R3-R10}:ADD R1,R1,#320:STMIA R0!,{R3-R10}
SUBS R2,R2,#1:BNE lsaveBrd2

SUB R1,R1,#320*(163-128)

MOV R2,#7
.lsaveBrd3
LDMIA R1,{R3-R10}:ADD R1,R1,#320:STMIA R0!,{R3-R10}
SUBS R2,R2,#1:BNE lsaveBrd3
MOV R15,R14

.eraseZONE
STR R14,temp14_42
BL eraseZONE_bis:BL SwapScreens
BL eraseZONE_bis:BL SwapScreens
LDR R15,temp14_42

.eraseZONE_bis
LDR R0,MmoBrdrAdr
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#320*68:ADD R1,R1,#256

MOV R2,#15
.lsaveBrd
LDMIA R0!,{R3-R12}:STMIA R1,{R3-R12}:ADD R1,R1,#320
SUBS R2,R2,#1:BNE lsaveBrd
MOV R15,R14

.eraseTime
LDR R0,MmoBrdrAdr:ADD R0,R0,#600
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#260:ADD R1,R1,#320*156

MOV R2,#7
.lloadBrd2
LDMIA R0!,{R3-R10}:STMIA R1,{R3-R10}:ADD R1,R1,#320
SUBS R2,R2,#1:BNE lloadBrd2
MOV R15,R14

.erasePerc
LDR R0,MmoBrdrAdr:ADD R0,R0,#824
SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#260:ADD R1,R1,#320*128

MOV R2,#7
.lloadBrd3
LDMIA R0!,{R3-R10}:STMIA R1,{R3-R10}:ADD R1,R1,#320
SUBS R2,R2,#1:BNE lloadBrd3
MOV R15,R14

.temp14_42 EQUD 0

.writeZONE
STR R14,temp14_42
BL writeZONE_bis:BL SwapScreens
BL writeZONE_bis:BL SwapScreens
LDR R15,temp14_42

.writeZONE_bis
STR R14,temp14_40

SUB R1,PC,#FNmb(BASESCROLL):LDR R1,[R1,#FNlb(BASESCROLL)]
ADD R1,R1,#320*68:ADD R1,R1,#256:ADD R1,R1,#2

ADR R4,col1a:LDMIA R4,{R4-R7}

MOV R0,#10:BL WriteNumber:ADD R1,R1,#10 ;Z
MOV R0,#13:BL WriteNumber:ADD R1,R1,#10 ;O
MOV R0,#11:BL WriteNumber:ADD R1,R1,#10 ;N
MOV R0,#12:BL WriteNumber               ;E

ADR R4,col1b:LDMIA R4,{R4-R7}

ADD R1,R1,#320*8:SUB R1,R1,#20

SUB R12,PC,#FNmb(WhichLevel):LDR R12,[R12,#FNlb(WhichLevel)]

MOV R0,#0
.nxtDex
CMP R12,#10:ADDPL R0,R0,#1:SUBPL R12,R12,#10:BPL nxtDex
BL WriteNumber
ADD R1,R1,#12
MOV R0,R12
BL WriteNumber       ; write level number

LDR R15,temp14_40

.col1a EQUD &ECECECEC
       EQUD &EDEDEDED
       EQUD &EEEEEEEE
       EQUD &EFEFEFEF

.col1b EQUD &E0E0E0E0
       EQUD &E1E1E1E1
       EQUD &E2E2E2E2
       EQUD &E3E3E3E3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.OccTable      : REM contient un flag qui dit si case occupee ou pas
]
Adr_occTable=O%
P%+=1*3072
O%+=1*3072
[OPT PASS

.Scheme
]
P%+=1*3072    :REM  Foreground
O%+=1*3072
[OPT PASS

.Lands
]
P%+=4*3072   :REM  4x Animated Backgrounds
O%+=4*3072
[OPT PASS

.Land
]
P%+=4*3072     :REM  Dynamic screens     ( interlaced )
O%+=4*3072
[OPT PASS

.MemoBorder
]
P%+=1048:O%+=1048
[OPT PASS
.CrunchWay
]
Adr_crunch=O%
P%+=1600:O%+=1600
[OPT PASS
.Arrows
]
Adr_arrows=O%
P%+=3200:O%+=3200
[OPT PASS
.FadeTable
]
Adr_fade=O%
P%+=256:O%+=256
[OPT PASS
.Plaquette
]
Adr_plaqu=O%
P%+=2400:O%+=2400
[OPT PASS
.Chars
]
Adr_chars=O%
P%+=52*192:O%+=52*192
[OPT PASS
EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0     ;space("u")
EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0
EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0
EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0
EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0
EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0:EQUD 0
.Degrades
]
Adr_degr=O%
P%+=456:O%+=456
[OPT PASS
.StartScreen  ; this is the compressed ray traced picture
]
Adr_startS=O%
P%+=18620:O%+=18620
[OPT PASS
.Screen       ; buffer for decrunched picture(cartoon or start screen)
]
Adr_screen=O%
P%+=244*240:O%+=244*240
[OPT PASS
.TitleDat
]
Adr_title=O%
P%+=2324:O%+=2324
[OPT PASS
.DataDEMO
]
Adr_datDemo=O%
P%+=1600:O%+=1600
[OPT PASS
.SchemeDemo
]
Adr_schemeDemo=O%
P%+=420:O%+=420
[OPT PASS
.Buffer
]
Adr_bubu=O%
P%+=19524:O%+=19524
[OPT PASS
.theRocket
]
Adr_theRocket=O%
P%+=2512:O%+=2512
[OPT PASS

;;;; Compressed datas ( LEVELS Antarctic,LaunchBase,Space,Jungle,Computer)

.SetLevelGraphLand               ; input R0=1..50 = level graphics & land
SUB R12,R0,#1
.searchSet
 CMP R12,#5:SUBPL R12,R12,#5:BPL searchSet

LDR R0,[PC,R12,LSL#2]
B DecomprLevelA
EQUD Level1_crunch
EQUD Level2_crunch
EQUD Level3_crunch
EQUD Level4_crunch
EQUD Level5_crunch

.DecomprLevelA
LDR R1,GraphIst
LDR R2,Bufferbas
MOV R3,#0
SWI "LZWD_Decompress"   ; decompress data graphics

LDR R0,[PC,R12,LSL#2]
B DecomprLevelB
EQUD ICE_Land
EQUD ESA_Land
EQUD SPACE_Land
EQUD JUNGLE_Land
EQUD COMPUTER_Land

.DecomprLevelB
LDR R1,LandsIst
LDR R2,Bufferbas
MOV R3,#0
SWI "LZWD_Decompress"   ; decompress data lands

MOV R0,R12:B SetNormalBlock

.GraphIst EQUD Screen ; sauve level dans Screen(buffer provvisoire)
.LandsIst EQUD Lands
.Bufferbas EQUD Buffer
.GraphJst EQUD Graph+2*4800

.DecompChallenge
ADR R0,Chall__crunch
LDR R1,GraphJst
LDR R2,Bufferbas
MOV R3,#0
SWI "LZWD_Decompress"   ; decompress graphics

LDR R0,LandsIst   ; construct challenge land
MOV R1,#4*3072
MOV R2,#24
.lFillLands
STRB R2,[R0],#1:SUBS R1,R1,#1:BNE lFillLands
MOV R2,#70
STRB R2,[R0,#-1]:STRB R2,[R0,#-5]:STRB R2,[R0,#-9] ;set useless transports
MOV R15,R14

.Chall__crunch ]:Adr_Chall__crunch=O%:P%+=180:O%+=180:[OPT PASS
.Level1_crunch ]:Adr_Level1_crunch=O%:P%+=&2768:O%+=&2768:[OPT PASS
.Level2_crunch ]:Adr_Level2_crunch=O%:P%+=&27CC:O%+=&27CC:[OPT PASS
.Level3_crunch ]:Adr_Level3_crunch=O%:P%+=&2624:O%+=&2624:[OPT PASS
.Level4_crunch ]:Adr_Level4_crunch=O%:P%+=&382C:O%+=&382C:[OPT PASS
.Level5_crunch ]:Adr_Level5_crunch=O%:P%+=&2B2C:O%+=&2B2C:[OPT PASS

.ICE_Land      ]:Adr_ICE_Land=O%:     P%+=1708:O%+=1708:[OPT PASS
.ESA_Land      ]:Adr_ESA_Land=O%:     P%+=1708:O%+=1708:[OPT PASS
.SPACE_Land    ]:Adr_SPACE_Land=O%:   P%+=1708:O%+=1708:[OPT PASS
.JUNGLE_Land   ]:Adr_JUNGLE_Land=O%:  P%+=1708:O%+=1708:[OPT PASS
.COMPUTER_Land ]:Adr_COMPUTER_Land=O%:P%+=1708:O%+=1708:[OPT PASS

.Graph
]
Adr_graph=O%
P%+=24800
O%+=24800
[OPT PASS
.Sprite
]
Adr_sprite=O%
P%+=208*800   :REM Sprite & Mask
O%+=208*800

Adr_MakePengiMask=O%
[OPT PASS          ; the following routine dont need to be saved

.MakePengiMask          ; input R1=destination,R0=source
MOV R2,#84              ; 72 sprites of pengi + 12 ScoreBoom
.ReadPengi

MOV R4,#100
.CountWords2

LDR R3,[R0],#4
STR R3,[R1],#4                              ; save graphics

TST R3,#&FF000000:ORRNE R3,R3,#&FF000000    ; create mask
TST R3,#&00FF0000:ORRNE R3,R3,#&00FF0000
TST R3,#&0000FF00:ORRNE R3,R3,#&0000FF00
TST R3,#&000000FF:ORRNE R3,R3,#&000000FF

STR R3,[R1],#4                              ; save mask

SUBS R4,R4,#1:BNE CountWords2
SUBS R2,R2,#1:BNE ReadPengi
MOV R15,R14
]
NEXT

PRINT "CODE "AbortElectric-Poizone
PRINT "PROG "Sprite+208*800-Poizone

ON ERROR REPORT:PRINT ERL:STOP

FOR n=0TO 2*244-1:?(Adr_sinus+n)=16+8*SIN(n*4*PI/244):NEXT

REM encode PassWords
FOR N%=Adr_passWords TO Adr_passWords+10*8-1:?N%=(?N%) OR %10000000:NEXT

OSCLI("LOAD TOX.PENGO1 "+STR$~(Adr_screen))
OSCLI("LOAD TOX.PENGO2 "+STR$~(Adr_screen+4800))
OSCLI("LOAD TOX.PENGO3 "+STR$~(Adr_screen+2*4800))
OSCLI("LOAD TOX.PENGO1bis "+STR$~(Adr_screen+3*4800))
OSCLI("LOAD TOX.PENGO2bis "+STR$~(Adr_screen+4*4800))
OSCLI("LOAD TOX.PENGO3bis "+STR$~(Adr_screen+5*4800))
OSCLI("LOAD TOX.SCOREBOOM "+STR$~(Adr_screen+6*4800))

B%=Adr_sprite:A%=Adr_screen:CALL Adr_MakePengiMask

FOR Q%=Adr_screen TO Adr_screen+244*240 STEP 4:!Q%=0:NEXT
FOR Q%=Adr_bubu TO Adr_bubu+19520 STEP 4:!Q%=0:NEXT
FOR Q%=Adr_occTable TO Adr_occTable+30*1024+1044 STEP 4:!Q%=0:NEXT

OSCLI("LOAD TOX.MADGADG "+STR$~Adr_graph)
OSCLI("LOAD TOX.SECOND "+STR$~(Adr_graph+4800))
OSCLI("LOAD TOX.transport "+STR$~(Adr_graph+24000))

OSCLI("LOAD TOX.MASKCRASH "+STR$~Adr_crunch)
OSCLI("LOAD TOX.Arrows "+STR$~Adr_arrows)
OSCLI("LOAD TOX.TheChars "+STR$~Adr_chars)
OSCLI("LOAD TOX.PLAQU_SPR "+STR$~Adr_plaqu)
OSCLI("LOAD TOX.FADETABLE "+STR$~Adr_fade)
OSCLI("LOAD TOX.LITTLECOLS "+STR$~Adr_degr)

OSCLI("LOAD TOX.START_SCR "+STR$~Adr_startS)
OSCLI("LOAD TOX.demo_path "+STR$~Adr_datDemo)
OSCLI("LOAD TOX.Title_Dat "+STR$~Adr_title)
OSCLI("LOAD TOX.inkeyTabl "+STR$~Adr_inkey)

OSCLI("LOAD TOX.SCHEMES.SCHEMEdemo "+STR$~Adr_schemeDemo)

OSCLI("LOAD TOX_CR.LEVELS.LEVEL1 "+STR$~Adr_Level1_crunch)
OSCLI("LOAD TOX_CR.LEVELS.LEVEL2 "+STR$~Adr_Level2_crunch)
OSCLI("LOAD TOX_CR.LEVELS.LEVEL3 "+STR$~Adr_Level3_crunch)
OSCLI("LOAD TOX_CR.LEVELS.LEVEL4 "+STR$~Adr_Level4_crunch)
OSCLI("LOAD TOX_CR.LEVELS.LEVEL5 "+STR$~Adr_Level5_crunch)
OSCLI("LOAD TOX.CHAL_SPR      "+STR$~Adr_Chall__crunch)

OSCLI("LOAD TOX_CR.LANDS.ICE_SET "+STR$~      Adr_ICE_Land)
OSCLI("LOAD TOX_CR.LANDS.ESA_SET "+STR$~      Adr_ESA_Land)
OSCLI("LOAD TOX_CR.LANDS.SPACE_SET "+STR$~  Adr_SPACE_Land)
OSCLI("LOAD TOX_CR.LANDS.JUNGLE_SET "+STR$~Adr_JUNGLE_Land)
OSCLI("LOAD TOX_CR.LANDS.ORDI_SET "+STR$~Adr_COMPUTER_Land)

OSCLI("LOAD TOX.ROCKET_LZW "+STR$~Adr_theRocket)

OSCLI("SAVE POIZ_cde3 "+STR$~Cde+" "+STR$~(Adr_sprite+7*9600) +" "+STR$~basecode+" "+STR$~basecode):OSCLI("SETTYPE POIZ_CDE3 FFF"):PRINT "SAVED":STOP

END

REM ;;;;;;;; Fill Scroll  ( and other useful functions ) ;;;;;;;;;;
DEFFNuno
[OPT PASS
LDR R9,[R7],#20:STR R9,[R14],#320:LDR R9,[R7],#20:STR R9,[R14],#320
LDR R9,[R7],#20:STR R9,[R14],#320:LDR R9,[R7],#20:STR R9,[R14],#320
] =0
DEFFNdue
[OPT PASS
LDMIA R7,{R9,R10}:STMIA R14,{R9,R10}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9,R10}:STMIA R14,{R9,R10}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9,R10}:STMIA R14,{R9,R10}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9,R10}:STMIA R14,{R9,R10}:ADD R7,R7,#20:ADD R14,R14,#320
] =0
DEFFNtre
[OPT PASS
LDMIA R7,{R9-R11}:STMIA R14,{R9-R11}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9-R11}:STMIA R14,{R9-R11}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9-R11}:STMIA R14,{R9-R11}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9-R11}:STMIA R14,{R9-R11}:ADD R7,R7,#20:ADD R14,R14,#320
] =0
DEFFNquattro
[OPT PASS
LDMIA R7,{R9-R12}:STMIA R14,{R9-R12}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9-R12}:STMIA R14,{R9-R12}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9-R12}:STMIA R14,{R9-R12}:ADD R7,R7,#20:ADD R14,R14,#320
LDMIA R7,{R9-R12}:STMIA R14,{R9-R12}:ADD R7,R7,#20:ADD R14,R14,#320
] =0
DEFFNcinque
[OPT PASS
LDMIA R7!,{R9-R13}:STMIA R14,{R9-R13}:ADD R14,R14,#320
LDMIA R7!,{R9-R13}:STMIA R14,{R9-R13}:ADD R14,R14,#320
LDMIA R7!,{R9-R13}:STMIA R14,{R9-R13}:ADD R14,R14,#320
LDMIA R7!,{R9-R13}:STMIA R14,{R9-R13}:ADD R14,R14,#320
] =0
DEFFNcinqueb
[OPT PASS
LDMIA R7!,{R2,R3,R5,R6,R8,R9-R13}:STMIA R14,{R2,R3,R5,R6,R8}:ADD R14,R14,#320:STMIA R14,{R9-R13}:ADD R14,R14,#320
LDMIA R7!,{R2,R3,R5,R6,R8,R9-R13}:STMIA R14,{R2,R3,R5,R6,R8}:ADD R14,R14,#320:STMIA R14,{R9-R13}:ADD R14,R14,#320
] =0
DEFFNwait
[OPT PASS
MOV R0,#19:SWI "OS_Byte"
] =0

DEFFNmb(LABEL%)
IF P%-LABEL%>0 THEN V%=(P%-LABEL%) AND &FF00 ELSE V%=(LABEL%-P%-4) AND &FF00
=V%
DEFFNlb(LABEL%)
IF P%-LABEL%>0 THEN V%=-8-((P%-4-LABEL%) AND &FF) ELSE V%=-4+((LABEL%-P%) AND &FF)
=V%

